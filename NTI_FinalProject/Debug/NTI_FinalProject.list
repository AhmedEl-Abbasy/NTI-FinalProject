
NTI_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f68  08000f68  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f68  08000f68  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f68  08000f68  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f68  08000f68  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000060  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001dad  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000099c  00000000  00000000  00021e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000238  00000000  00000000  000227d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000018d  00000000  00000000  00022a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000132c  00000000  00000000  00022b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000020ef  00000000  00000000  00023ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00008990  00000000  00000000  00025fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000664  00000000  00000000  0002e948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  0002efac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f50 	.word	0x08000f50

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08000f50 	.word	0x08000f50

080001d4 <BUTTON_init>:
 * Parameters (in) : parameterName   Parameter Description
 * Return value:   : Std_ReturnType  E_OK
 *                                    E_NOT_OK
 *******************************************************************************/
STD_ReturnState BUTTON_init()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	STD_ReturnState Ret_Val = RET_OK;
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]

	DIO_setupPinMode(BUTTON_PORT, BUTTON_PIN, PIN_INPUT);
 80001de:	2200      	movs	r2, #0
 80001e0:	210d      	movs	r1, #13
 80001e2:	2002      	movs	r0, #2
 80001e4:	f000 faa0 	bl	8000728 <DIO_setupPinMode>

#if (BUTTON_CONNECTION == 1)
	DIO_activateInternal(BUTTON_PORT, BUTTON_PIN, BUTTON_CONNECTION);
 80001e8:	2201      	movs	r2, #1
 80001ea:	210d      	movs	r1, #13
 80001ec:	2002      	movs	r0, #2
 80001ee:	f000 fc8b 	bl	8000b08 <DIO_activateInternal>
#else
	Ret_Val = RET_NOK;

#endif

	return Ret_Val;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <DcMotor_Init>:
#include "motor.h"
#include "dio.h"
#include "motor_cnfg.h"
//#include "pwm.h"

void DcMotor_Init(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	DIO_setupPinMode(MotorPortID,MootorPin1, PIN_OUTPUT);
 8000200:	2201      	movs	r2, #1
 8000202:	2100      	movs	r1, #0
 8000204:	2001      	movs	r0, #1
 8000206:	f000 fa8f 	bl	8000728 <DIO_setupPinMode>
	DIO_setupPinMode(MotorPortID,MootorPin2, PIN_OUTPUT);
 800020a:	2201      	movs	r2, #1
 800020c:	2101      	movs	r1, #1
 800020e:	2001      	movs	r0, #1
 8000210:	f000 fa8a 	bl	8000728 <DIO_setupPinMode>

	DIO_writePin(MotorPortID, MootorPin1,LOGIC_LOW);
 8000214:	2200      	movs	r2, #0
 8000216:	2100      	movs	r1, #0
 8000218:	2001      	movs	r0, #1
 800021a:	f000 fb61 	bl	80008e0 <DIO_writePin>
	DIO_writePin(MotorPortID, MootorPin2,LOGIC_LOW);
 800021e:	2200      	movs	r2, #0
 8000220:	2101      	movs	r1, #1
 8000222:	2001      	movs	r0, #1
 8000224:	f000 fb5c 	bl	80008e0 <DIO_writePin>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}

0800022c <DcMotor_Rotate>:

void DcMotor_Rotate(Config_Motor * config_ptr ){
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]

	if(config_ptr->state==on){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d11d      	bne.n	8000278 <DcMotor_Rotate+0x4c>
//		PWM_Start(config_ptr->speed);
			if(config_ptr->direction==clockwise){
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	785b      	ldrb	r3, [r3, #1]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d10a      	bne.n	800025a <DcMotor_Rotate+0x2e>
				DIO_writePin(MotorPortID, MootorPin1,LOGIC_HIGH);
 8000244:	2201      	movs	r2, #1
 8000246:	2100      	movs	r1, #0
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fb49 	bl	80008e0 <DIO_writePin>
				DIO_writePin(MotorPortID, MootorPin2,LOGIC_LOW);
 800024e:	2200      	movs	r2, #0
 8000250:	2101      	movs	r1, #1
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fb44 	bl	80008e0 <DIO_writePin>

			DIO_writePin(MotorPortID, MootorPin1,LOGIC_LOW);
			DIO_writePin(MotorPortID, MootorPin2,LOGIC_LOW);
		}

}
 8000258:	e018      	b.n	800028c <DcMotor_Rotate+0x60>
			}else if(config_ptr->direction==anticlockwise)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	785b      	ldrb	r3, [r3, #1]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d114      	bne.n	800028c <DcMotor_Rotate+0x60>
				DIO_writePin(MotorPortID, MootorPin1,LOGIC_LOW);
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	2001      	movs	r0, #1
 8000268:	f000 fb3a 	bl	80008e0 <DIO_writePin>
				DIO_writePin(MotorPortID, MootorPin2,LOGIC_HIGH);
 800026c:	2201      	movs	r2, #1
 800026e:	2101      	movs	r1, #1
 8000270:	2001      	movs	r0, #1
 8000272:	f000 fb35 	bl	80008e0 <DIO_writePin>
}
 8000276:	e009      	b.n	800028c <DcMotor_Rotate+0x60>
			DIO_writePin(MotorPortID, MootorPin1,LOGIC_LOW);
 8000278:	2200      	movs	r2, #0
 800027a:	2100      	movs	r1, #0
 800027c:	2001      	movs	r0, #1
 800027e:	f000 fb2f 	bl	80008e0 <DIO_writePin>
			DIO_writePin(MotorPortID, MootorPin2,LOGIC_LOW);
 8000282:	2200      	movs	r2, #0
 8000284:	2101      	movs	r1, #1
 8000286:	2001      	movs	r0, #1
 8000288:	f000 fb2a 	bl	80008e0 <DIO_writePin>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <EXTI_SelectHandlerFnuc>:

/*******************************************************************************
 *                      Private Functions Definitions                          *
 *******************************************************************************/
static void EXTI_SelectHandlerFnuc(EXTI_Type *EXTI)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	if (EXTI->EXTIxSelect == EXTI_0){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	785b      	ldrb	r3, [r3, #1]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d104      	bne.n	80002ae <EXTI_SelectHandlerFnuc+0x1a>
		EXTI_HandlerFunc0 = EXTI->EXTI_CallBackFunc;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4a47      	ldr	r2, [pc, #284]	; (80003c8 <EXTI_SelectHandlerFnuc+0x134>)
 80002aa:	6013      	str	r3, [r2, #0]
		EXTI_HandlerFunc14 = EXTI->EXTI_CallBackFunc;
	}
	else if (EXTI->EXTIxSelect == EXTI_15){
		EXTI_HandlerFunc15 = EXTI->EXTI_CallBackFunc;
	}
}
 80002ac:	e088      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_1){
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	785b      	ldrb	r3, [r3, #1]
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d104      	bne.n	80002c0 <EXTI_SelectHandlerFnuc+0x2c>
		EXTI_HandlerFunc1 = EXTI->EXTI_CallBackFunc;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a44      	ldr	r2, [pc, #272]	; (80003cc <EXTI_SelectHandlerFnuc+0x138>)
 80002bc:	6013      	str	r3, [r2, #0]
}
 80002be:	e07f      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_2){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	785b      	ldrb	r3, [r3, #1]
 80002c4:	2b02      	cmp	r3, #2
 80002c6:	d104      	bne.n	80002d2 <EXTI_SelectHandlerFnuc+0x3e>
		EXTI_HandlerFunc2 = EXTI->EXTI_CallBackFunc;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a40      	ldr	r2, [pc, #256]	; (80003d0 <EXTI_SelectHandlerFnuc+0x13c>)
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	e076      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_3){
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	785b      	ldrb	r3, [r3, #1]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d104      	bne.n	80002e4 <EXTI_SelectHandlerFnuc+0x50>
		EXTI_HandlerFunc3 = EXTI->EXTI_CallBackFunc;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	4a3d      	ldr	r2, [pc, #244]	; (80003d4 <EXTI_SelectHandlerFnuc+0x140>)
 80002e0:	6013      	str	r3, [r2, #0]
}
 80002e2:	e06d      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_4){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d104      	bne.n	80002f6 <EXTI_SelectHandlerFnuc+0x62>
		EXTI_HandlerFunc4 = EXTI->EXTI_CallBackFunc;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	4a39      	ldr	r2, [pc, #228]	; (80003d8 <EXTI_SelectHandlerFnuc+0x144>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	e064      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_5){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	785b      	ldrb	r3, [r3, #1]
 80002fa:	2b05      	cmp	r3, #5
 80002fc:	d104      	bne.n	8000308 <EXTI_SelectHandlerFnuc+0x74>
		EXTI_HandlerFunc5 = EXTI->EXTI_CallBackFunc;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	4a36      	ldr	r2, [pc, #216]	; (80003dc <EXTI_SelectHandlerFnuc+0x148>)
 8000304:	6013      	str	r3, [r2, #0]
}
 8000306:	e05b      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_6){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	785b      	ldrb	r3, [r3, #1]
 800030c:	2b06      	cmp	r3, #6
 800030e:	d104      	bne.n	800031a <EXTI_SelectHandlerFnuc+0x86>
		EXTI_HandlerFunc6 = EXTI->EXTI_CallBackFunc;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <EXTI_SelectHandlerFnuc+0x14c>)
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	e052      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_7){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	785b      	ldrb	r3, [r3, #1]
 800031e:	2b07      	cmp	r3, #7
 8000320:	d104      	bne.n	800032c <EXTI_SelectHandlerFnuc+0x98>
		EXTI_HandlerFunc7 = EXTI->EXTI_CallBackFunc;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	4a2f      	ldr	r2, [pc, #188]	; (80003e4 <EXTI_SelectHandlerFnuc+0x150>)
 8000328:	6013      	str	r3, [r2, #0]
}
 800032a:	e049      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_8){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	785b      	ldrb	r3, [r3, #1]
 8000330:	2b08      	cmp	r3, #8
 8000332:	d104      	bne.n	800033e <EXTI_SelectHandlerFnuc+0xaa>
		EXTI_HandlerFunc8 = EXTI->EXTI_CallBackFunc;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a2b      	ldr	r2, [pc, #172]	; (80003e8 <EXTI_SelectHandlerFnuc+0x154>)
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	e040      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_9){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	785b      	ldrb	r3, [r3, #1]
 8000342:	2b09      	cmp	r3, #9
 8000344:	d104      	bne.n	8000350 <EXTI_SelectHandlerFnuc+0xbc>
		EXTI_HandlerFunc9 = EXTI->EXTI_CallBackFunc;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	4a28      	ldr	r2, [pc, #160]	; (80003ec <EXTI_SelectHandlerFnuc+0x158>)
 800034c:	6013      	str	r3, [r2, #0]
}
 800034e:	e037      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_10){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	785b      	ldrb	r3, [r3, #1]
 8000354:	2b0a      	cmp	r3, #10
 8000356:	d104      	bne.n	8000362 <EXTI_SelectHandlerFnuc+0xce>
		EXTI_HandlerFunc10 = EXTI->EXTI_CallBackFunc;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4a24      	ldr	r2, [pc, #144]	; (80003f0 <EXTI_SelectHandlerFnuc+0x15c>)
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	e02e      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_11){
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	785b      	ldrb	r3, [r3, #1]
 8000366:	2b0b      	cmp	r3, #11
 8000368:	d104      	bne.n	8000374 <EXTI_SelectHandlerFnuc+0xe0>
		EXTI_HandlerFunc11 = EXTI->EXTI_CallBackFunc;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <EXTI_SelectHandlerFnuc+0x160>)
 8000370:	6013      	str	r3, [r2, #0]
}
 8000372:	e025      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_12){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	785b      	ldrb	r3, [r3, #1]
 8000378:	2b0c      	cmp	r3, #12
 800037a:	d104      	bne.n	8000386 <EXTI_SelectHandlerFnuc+0xf2>
		EXTI_HandlerFunc12 = EXTI->EXTI_CallBackFunc;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a1d      	ldr	r2, [pc, #116]	; (80003f8 <EXTI_SelectHandlerFnuc+0x164>)
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	e01c      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_13){
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	785b      	ldrb	r3, [r3, #1]
 800038a:	2b0d      	cmp	r3, #13
 800038c:	d107      	bne.n	800039e <EXTI_SelectHandlerFnuc+0x10a>
		EXTI_HandlerFunc13 = EXTI->EXTI_CallBackFunc;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4a1a      	ldr	r2, [pc, #104]	; (80003fc <EXTI_SelectHandlerFnuc+0x168>)
 8000394:	6013      	str	r3, [r2, #0]
		EXTI_HandlerFunc13();
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <EXTI_SelectHandlerFnuc+0x168>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4798      	blx	r3
}
 800039c:	e010      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_14){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	785b      	ldrb	r3, [r3, #1]
 80003a2:	2b0e      	cmp	r3, #14
 80003a4:	d104      	bne.n	80003b0 <EXTI_SelectHandlerFnuc+0x11c>
		EXTI_HandlerFunc14 = EXTI->EXTI_CallBackFunc;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <EXTI_SelectHandlerFnuc+0x16c>)
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	e007      	b.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
	else if (EXTI->EXTIxSelect == EXTI_15){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	785b      	ldrb	r3, [r3, #1]
 80003b4:	2b0f      	cmp	r3, #15
 80003b6:	d103      	bne.n	80003c0 <EXTI_SelectHandlerFnuc+0x12c>
		EXTI_HandlerFunc15 = EXTI->EXTI_CallBackFunc;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <EXTI_SelectHandlerFnuc+0x170>)
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000038 	.word	0x20000038
 80003cc:	2000003c 	.word	0x2000003c
 80003d0:	20000040 	.word	0x20000040
 80003d4:	20000044 	.word	0x20000044
 80003d8:	20000048 	.word	0x20000048
 80003dc:	2000004c 	.word	0x2000004c
 80003e0:	20000050 	.word	0x20000050
 80003e4:	20000054 	.word	0x20000054
 80003e8:	20000058 	.word	0x20000058
 80003ec:	2000005c 	.word	0x2000005c
 80003f0:	20000060 	.word	0x20000060
 80003f4:	20000064 	.word	0x20000064
 80003f8:	20000068 	.word	0x20000068
 80003fc:	2000006c 	.word	0x2000006c
 8000400:	20000070 	.word	0x20000070
 8000404:	20000074 	.word	0x20000074

08000408 <EXTI_LineEnable>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState EXTI_LineEnable(EXTI_Type *EXTI)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	STD_ReturnState Ret_Val = RET_OK;
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]
	if (EXTI->Trig_Stat == FALLING_TRIGGER){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10b      	bne.n	8000434 <EXTI_LineEnable+0x2c>
		SET_BIT(EXTI_FTSR1_REG, EXTI->EXTIxSelect);
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <EXTI_LineEnable+0xac>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	7852      	ldrb	r2, [r2, #1]
 8000424:	4611      	mov	r1, r2
 8000426:	2201      	movs	r2, #1
 8000428:	408a      	lsls	r2, r1
 800042a:	4611      	mov	r1, r2
 800042c:	4a21      	ldr	r2, [pc, #132]	; (80004b4 <EXTI_LineEnable+0xac>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
 8000432:	e02c      	b.n	800048e <EXTI_LineEnable+0x86>
	}
	else if (EXTI->Trig_Stat  == RISING_TRIGGER){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d10b      	bne.n	8000454 <EXTI_LineEnable+0x4c>
		SET_BIT(EXTI_RTSR1_REG, EXTI->EXTIxSelect);
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <EXTI_LineEnable+0xb0>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	7852      	ldrb	r2, [r2, #1]
 8000444:	4611      	mov	r1, r2
 8000446:	2201      	movs	r2, #1
 8000448:	408a      	lsls	r2, r1
 800044a:	4611      	mov	r1, r2
 800044c:	4a1a      	ldr	r2, [pc, #104]	; (80004b8 <EXTI_LineEnable+0xb0>)
 800044e:	430b      	orrs	r3, r1
 8000450:	6013      	str	r3, [r2, #0]
 8000452:	e01c      	b.n	800048e <EXTI_LineEnable+0x86>
	}
	else if (EXTI->Trig_Stat  == ON_CHANGE_TRIGGER){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b02      	cmp	r3, #2
 800045a:	d116      	bne.n	800048a <EXTI_LineEnable+0x82>
		SET_BIT(EXTI_FTSR1_REG, EXTI->EXTIxSelect);
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <EXTI_LineEnable+0xac>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7852      	ldrb	r2, [r2, #1]
 8000464:	4611      	mov	r1, r2
 8000466:	2201      	movs	r2, #1
 8000468:	408a      	lsls	r2, r1
 800046a:	4611      	mov	r1, r2
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <EXTI_LineEnable+0xac>)
 800046e:	430b      	orrs	r3, r1
 8000470:	6013      	str	r3, [r2, #0]
		SET_BIT(EXTI_RTSR1_REG, EXTI->EXTIxSelect);
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <EXTI_LineEnable+0xb0>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	7852      	ldrb	r2, [r2, #1]
 800047a:	4611      	mov	r1, r2
 800047c:	2201      	movs	r2, #1
 800047e:	408a      	lsls	r2, r1
 8000480:	4611      	mov	r1, r2
 8000482:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <EXTI_LineEnable+0xb0>)
 8000484:	430b      	orrs	r3, r1
 8000486:	6013      	str	r3, [r2, #0]
 8000488:	e001      	b.n	800048e <EXTI_LineEnable+0x86>
	}
	else{
		Ret_Val = RET_NOK;
 800048a:	2301      	movs	r3, #1
 800048c:	73fb      	strb	r3, [r7, #15]
	}
	EXTI_SelectHandlerFnuc(EXTI);
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f7ff ff00 	bl	8000294 <EXTI_SelectHandlerFnuc>

	SET_BIT(EXTI_IMR1_REG, EXTI->EXTIxSelect);
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <EXTI_LineEnable+0xb4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	7852      	ldrb	r2, [r2, #1]
 800049c:	4611      	mov	r1, r2
 800049e:	2201      	movs	r2, #1
 80004a0:	408a      	lsls	r2, r1
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <EXTI_LineEnable+0xb4>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6013      	str	r3, [r2, #0]

	return Ret_Val;
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3710      	adds	r7, #16
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	4001040c 	.word	0x4001040c
 80004b8:	40010408 	.word	0x40010408
 80004bc:	40010400 	.word	0x40010400

080004c0 <ICU_INT_CheckStatus>:

}


STD_ReturnState ICU_INT_CheckStatus(ICU_Channel channel)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState state;

	switch(channel)
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b05      	cmp	r3, #5
 80004ce:	d86f      	bhi.n	80005b0 <ICU_INT_CheckStatus+0xf0>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <ICU_INT_CheckStatus+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004f1 	.word	0x080004f1
 80004dc:	08000511 	.word	0x08000511
 80004e0:	08000531 	.word	0x08000531
 80004e4:	08000551 	.word	0x08000551
 80004e8:	08000571 	.word	0x08000571
 80004ec:	08000591 	.word	0x08000591
	{
	   case channel_1:
		   state = CHECK_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 80004f0:	4b33      	ldr	r3, [pc, #204]	; (80005c0 <ICU_INT_CheckStatus+0x100>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	085b      	lsrs	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f003 0301 	and.w	r3, r3, #1
 80004fc:	73fb      	strb	r3, [r7, #15]
		   if( state == 0 )
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d102      	bne.n	800050a <ICU_INT_CheckStatus+0x4a>
		   	{
		   	   state = RET_NOK;
 8000504:	2301      	movs	r3, #1
 8000506:	73fb      	strb	r3, [r7, #15]
		   	}
		   	else
		   	{
			   state = RET_OK;
			}
	   break;
 8000508:	e052      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
			   state = RET_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	73fb      	strb	r3, [r7, #15]
	   break;
 800050e:	e04f      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
	   case channel_2:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8000510:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <ICU_INT_CheckStatus+0x100>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	089b      	lsrs	r3, r3, #2
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <ICU_INT_CheckStatus+0x6a>
	   	   {
	   		   state = RET_NOK;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8000528:	e042      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800052a:	2300      	movs	r3, #0
 800052c:	73fb      	strb	r3, [r7, #15]
	   break;
 800052e:	e03f      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
	   case channel_3:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC3IF_BIT_3 );
 8000530:	4b23      	ldr	r3, [pc, #140]	; (80005c0 <ICU_INT_CheckStatus+0x100>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	08db      	lsrs	r3, r3, #3
 8000536:	b2db      	uxtb	r3, r3
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <ICU_INT_CheckStatus+0x8a>
	   	   {
	   		   state = RET_NOK;
 8000544:	2301      	movs	r3, #1
 8000546:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8000548:	e032      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]
	   break;
 800054e:	e02f      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
	   case channel_4:
		   state = CHECK_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <ICU_INT_CheckStatus+0x104>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	085b      	lsrs	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <ICU_INT_CheckStatus+0xaa>
	   	   {
	   		   state = RET_NOK;
 8000564:	2301      	movs	r3, #1
 8000566:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8000568:	e022      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	73fb      	strb	r3, [r7, #15]
	   break;
 800056e:	e01f      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
	   case channel_5:
		   state = CHECK_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <ICU_INT_CheckStatus+0x104>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	089b      	lsrs	r3, r3, #2
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <ICU_INT_CheckStatus+0xca>
	   	   {
	   		   state = RET_NOK;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8000588:	e012      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800058a:	2300      	movs	r3, #0
 800058c:	73fb      	strb	r3, [r7, #15]
	   break;
 800058e:	e00f      	b.n	80005b0 <ICU_INT_CheckStatus+0xf0>
	   case channel_6:
		   state = CHECK_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <ICU_INT_CheckStatus+0x104>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	08db      	lsrs	r3, r3, #3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <ICU_INT_CheckStatus+0xea>
	   	   {
	   		   state = RET_NOK;
 80005a4:	2301      	movs	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 80005a8:	e001      	b.n	80005ae <ICU_INT_CheckStatus+0xee>
			  state = RET_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
	   break;
 80005ae:	bf00      	nop

	}

	return state;
 80005b0:	7bfb      	ldrb	r3, [r7, #15]

}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40013410 	.word	0x40013410
 80005c4:	40012c10 	.word	0x40012c10

080005c8 <TIM8_CC_IRQHandler>:
}


//TIM8_CC_IRQHandler
void TIM8_CC_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	if ( ICU_INT_CheckStatus(channel_1 ) == RET_OK  )
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff ff77 	bl	80004c0 <ICU_INT_CheckStatus>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10c      	bne.n	80005f2 <TIM8_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <TIM8_CC_IRQHandler+0x7c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a19      	ldr	r2, [pc, #100]	; (8000644 <TIM8_CC_IRQHandler+0x7c>)
 80005de:	f023 0302 	bic.w	r3, r3, #2
 80005e2:	6013      	str	r3, [r2, #0]
		if( Channel_1_CLB_Ptr != (void*)RET_NULLPTR )
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <TIM8_CC_IRQHandler+0x80>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d002      	beq.n	80005f2 <TIM8_CC_IRQHandler+0x2a>
		{
			Channel_1_CLB_Ptr();
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <TIM8_CC_IRQHandler+0x80>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_2 ) == RET_OK  )
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff ff64 	bl	80004c0 <ICU_INT_CheckStatus>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10c      	bne.n	8000618 <TIM8_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <TIM8_CC_IRQHandler+0x7c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <TIM8_CC_IRQHandler+0x7c>)
 8000604:	f023 0304 	bic.w	r3, r3, #4
 8000608:	6013      	str	r3, [r2, #0]
		if( Channel_2_CLB_Ptr != (void*)RET_NULLPTR )
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <TIM8_CC_IRQHandler+0x84>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d002      	beq.n	8000618 <TIM8_CC_IRQHandler+0x50>
		{
			Channel_2_CLB_Ptr();
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <TIM8_CC_IRQHandler+0x84>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_3 ) == RET_OK  )
 8000618:	2002      	movs	r0, #2
 800061a:	f7ff ff51 	bl	80004c0 <ICU_INT_CheckStatus>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d10c      	bne.n	800063e <TIM8_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM8_SR_REG ,CC3IF_BIT_3 );
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <TIM8_CC_IRQHandler+0x7c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <TIM8_CC_IRQHandler+0x7c>)
 800062a:	f023 0308 	bic.w	r3, r3, #8
 800062e:	6013      	str	r3, [r2, #0]
		if( Channel_3_CLB_Ptr != (void*)RET_NULLPTR )
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <TIM8_CC_IRQHandler+0x88>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d002      	beq.n	800063e <TIM8_CC_IRQHandler+0x76>
		{
			Channel_3_CLB_Ptr();
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <TIM8_CC_IRQHandler+0x88>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4798      	blx	r3
		}
	}

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40013410 	.word	0x40013410
 8000648:	20000000 	.word	0x20000000
 800064c:	20000004 	.word	0x20000004
 8000650:	20000008 	.word	0x20000008

08000654 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if ( ICU_INT_CheckStatus(channel_4 ) == RET_OK  )
 8000658:	2003      	movs	r0, #3
 800065a:	f7ff ff31 	bl	80004c0 <ICU_INT_CheckStatus>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d10c      	bne.n	800067e <TIM1_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <TIM1_CC_IRQHandler+0x7c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <TIM1_CC_IRQHandler+0x7c>)
 800066a:	f023 0302 	bic.w	r3, r3, #2
 800066e:	6013      	str	r3, [r2, #0]
		if( Channel_4_CLB_Ptr != (void*)RET_NULLPTR )
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <TIM1_CC_IRQHandler+0x80>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d002      	beq.n	800067e <TIM1_CC_IRQHandler+0x2a>
		{
			Channel_4_CLB_Ptr();
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <TIM1_CC_IRQHandler+0x80>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_5 ) == RET_OK  )
 800067e:	2004      	movs	r0, #4
 8000680:	f7ff ff1e 	bl	80004c0 <ICU_INT_CheckStatus>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10c      	bne.n	80006a4 <TIM1_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <TIM1_CC_IRQHandler+0x7c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <TIM1_CC_IRQHandler+0x7c>)
 8000690:	f023 0304 	bic.w	r3, r3, #4
 8000694:	6013      	str	r3, [r2, #0]
		if( Channel_5_CLB_Ptr != (void*)RET_NULLPTR )
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <TIM1_CC_IRQHandler+0x84>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d002      	beq.n	80006a4 <TIM1_CC_IRQHandler+0x50>
		{
			Channel_5_CLB_Ptr();
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <TIM1_CC_IRQHandler+0x84>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_6 ) == RET_OK  )
 80006a4:	2005      	movs	r0, #5
 80006a6:	f7ff ff0b 	bl	80004c0 <ICU_INT_CheckStatus>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10c      	bne.n	80006ca <TIM1_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <TIM1_CC_IRQHandler+0x7c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <TIM1_CC_IRQHandler+0x7c>)
 80006b6:	f023 0308 	bic.w	r3, r3, #8
 80006ba:	6013      	str	r3, [r2, #0]
		if( Channel_6_CLB_Ptr != (void*)RET_NULLPTR )
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <TIM1_CC_IRQHandler+0x88>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d002      	beq.n	80006ca <TIM1_CC_IRQHandler+0x76>
		{
			Channel_6_CLB_Ptr();
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <TIM1_CC_IRQHandler+0x88>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4798      	blx	r3
		}
	}
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012c10 	.word	0x40012c10
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	20000010 	.word	0x20000010
 80006dc:	20000014 	.word	0x20000014

080006e0 <NVIC_EnableIRQ>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e0:	b490      	push	{r4, r7}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState Ret_Val = RET_NOK;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
	if((u8)IRQn >= 0)
	{
		NVIC_ISER->ISER[(IRQn / 32)] |= (1 << (IRQn % 32));
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <NVIC_EnableIRQ+0x44>)
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	b2d8      	uxtb	r0, r3
 80006f6:	4603      	mov	r3, r0
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	79fa      	ldrb	r2, [r7, #7]
 80006fe:	f002 021f 	and.w	r2, r2, #31
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	4614      	mov	r4, r2
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <NVIC_EnableIRQ+0x44>)
 800070c:	4601      	mov	r1, r0
 800070e:	4323      	orrs	r3, r4
 8000710:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		Ret_Val = RET_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]
	}
	return Ret_Val;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bc90      	pop	{r4, r7}
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100

08000728 <DIO_setupPinMode>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
STD_ReturnState DIO_setupPinMode(DIO_PortID portID, DIO_PinID pinID, DIO_PinMode pinMode)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	460b      	mov	r3, r1
 8000734:	71bb      	strb	r3, [r7, #6]
 8000736:	4613      	mov	r3, r2
 8000738:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]

	if((portID >= NUM_OF_PORTS) || (pinID >= NUM_OF_PINS_PER_PORT))
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b07      	cmp	r3, #7
 8000742:	d802      	bhi.n	800074a <DIO_setupPinMode+0x22>
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2b0e      	cmp	r3, #14
 8000748:	d902      	bls.n	8000750 <DIO_setupPinMode+0x28>
	{
		Ret_Val = RET_NOK;
 800074a:	2301      	movs	r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e0b1      	b.n	80008b4 <DIO_setupPinMode+0x18c>
	}

	else
	{
		switch(portID)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b07      	cmp	r3, #7
 8000754:	f200 80ae 	bhi.w	80008b4 <DIO_setupPinMode+0x18c>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <DIO_setupPinMode+0x38>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000781 	.word	0x08000781
 8000764:	080007ab 	.word	0x080007ab
 8000768:	080007d1 	.word	0x080007d1
 800076c:	080007f7 	.word	0x080007f7
 8000770:	0800081d 	.word	0x0800081d
 8000774:	08000843 	.word	0x08000843
 8000778:	08000869 	.word	0x08000869
 800077c:	0800088f 	.word	0x0800088f
		{
		case PORTA_ID:
			DIOA_MODER_REG = (DIOA_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	79ba      	ldrb	r2, [r7, #6]
 8000788:	0052      	lsls	r2, r2, #1
 800078a:	2103      	movs	r1, #3
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	43d2      	mvns	r2, r2
 8000792:	4013      	ands	r3, r2
 8000794:	7979      	ldrb	r1, [r7, #5]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	0052      	lsls	r2, r2, #1
 800079a:	fa01 f202 	lsl.w	r2, r1, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007a4:	430b      	orrs	r3, r1
 80007a6:	6013      	str	r3, [r2, #0]
			break;
 80007a8:	e084      	b.n	80008b4 <DIO_setupPinMode+0x18c>

		case PORTB_ID:
			DIOB_MODER_REG = (DIOB_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <DIO_setupPinMode+0x19c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	79ba      	ldrb	r2, [r7, #6]
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	2103      	movs	r1, #3
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	4013      	ands	r3, r2
 80007bc:	7979      	ldrb	r1, [r7, #5]
 80007be:	79ba      	ldrb	r2, [r7, #6]
 80007c0:	0052      	lsls	r2, r2, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a3e      	ldr	r2, [pc, #248]	; (80008c4 <DIO_setupPinMode+0x19c>)
 80007ca:	430b      	orrs	r3, r1
 80007cc:	6013      	str	r3, [r2, #0]
			break;
 80007ce:	e071      	b.n	80008b4 <DIO_setupPinMode+0x18c>

		case PORTC_ID:
			DIOC_MODER_REG = (DIOC_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <DIO_setupPinMode+0x1a0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	2103      	movs	r1, #3
 80007da:	fa01 f202 	lsl.w	r2, r1, r2
 80007de:	43d2      	mvns	r2, r2
 80007e0:	4013      	ands	r3, r2
 80007e2:	7979      	ldrb	r1, [r7, #5]
 80007e4:	79ba      	ldrb	r2, [r7, #6]
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a36      	ldr	r2, [pc, #216]	; (80008c8 <DIO_setupPinMode+0x1a0>)
 80007f0:	430b      	orrs	r3, r1
 80007f2:	6013      	str	r3, [r2, #0]
			break;
 80007f4:	e05e      	b.n	80008b4 <DIO_setupPinMode+0x18c>

		case PORTD_ID:
			DIOD_MODER_REG = (DIOD_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80007f6:	4b35      	ldr	r3, [pc, #212]	; (80008cc <DIO_setupPinMode+0x1a4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	79ba      	ldrb	r2, [r7, #6]
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	2103      	movs	r1, #3
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	43d2      	mvns	r2, r2
 8000806:	4013      	ands	r3, r2
 8000808:	7979      	ldrb	r1, [r7, #5]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	0052      	lsls	r2, r2, #1
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <DIO_setupPinMode+0x1a4>)
 8000816:	430b      	orrs	r3, r1
 8000818:	6013      	str	r3, [r2, #0]
			break;
 800081a:	e04b      	b.n	80008b4 <DIO_setupPinMode+0x18c>

		case PORTE_ID:
			DIOE_MODER_REG = (DIOE_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 800081c:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <DIO_setupPinMode+0x1a8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	2103      	movs	r1, #3
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	43d2      	mvns	r2, r2
 800082c:	4013      	ands	r3, r2
 800082e:	7979      	ldrb	r1, [r7, #5]
 8000830:	79ba      	ldrb	r2, [r7, #6]
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <DIO_setupPinMode+0x1a8>)
 800083c:	430b      	orrs	r3, r1
 800083e:	6013      	str	r3, [r2, #0]
			break;
 8000840:	e038      	b.n	80008b4 <DIO_setupPinMode+0x18c>

		case PORTF_ID:
			DIOF_MODER_REG = (DIOF_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <DIO_setupPinMode+0x1ac>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	2103      	movs	r1, #3
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	4013      	ands	r3, r2
 8000854:	7979      	ldrb	r1, [r7, #5]
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	0052      	lsls	r2, r2, #1
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <DIO_setupPinMode+0x1ac>)
 8000862:	430b      	orrs	r3, r1
 8000864:	6013      	str	r3, [r2, #0]
			break;
 8000866:	e025      	b.n	80008b4 <DIO_setupPinMode+0x18c>

		case PORTG_ID:
			DIOG_MODER_REG = (DIOG_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <DIO_setupPinMode+0x1b0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	79ba      	ldrb	r2, [r7, #6]
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	2103      	movs	r1, #3
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	43d2      	mvns	r2, r2
 8000878:	4013      	ands	r3, r2
 800087a:	7979      	ldrb	r1, [r7, #5]
 800087c:	79ba      	ldrb	r2, [r7, #6]
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	4611      	mov	r1, r2
 8000886:	4a14      	ldr	r2, [pc, #80]	; (80008d8 <DIO_setupPinMode+0x1b0>)
 8000888:	430b      	orrs	r3, r1
 800088a:	6013      	str	r3, [r2, #0]
			break;
 800088c:	e012      	b.n	80008b4 <DIO_setupPinMode+0x18c>

		case PORTH_ID:
			DIOH_MODER_REG = (DIOH_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <DIO_setupPinMode+0x1b4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	79ba      	ldrb	r2, [r7, #6]
 8000894:	0052      	lsls	r2, r2, #1
 8000896:	2103      	movs	r1, #3
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	43d2      	mvns	r2, r2
 800089e:	4013      	ands	r3, r2
 80008a0:	7979      	ldrb	r1, [r7, #5]
 80008a2:	79ba      	ldrb	r2, [r7, #6]
 80008a4:	0052      	lsls	r2, r2, #1
 80008a6:	fa01 f202 	lsl.w	r2, r1, r2
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <DIO_setupPinMode+0x1b4>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6013      	str	r3, [r2, #0]
			break;
 80008b2:	bf00      	nop
		}
	}

	return Ret_Val;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48000800 	.word	0x48000800
 80008cc:	48000c00 	.word	0x48000c00
 80008d0:	48001000 	.word	0x48001000
 80008d4:	48001400 	.word	0x48001400
 80008d8:	48001800 	.word	0x48001800
 80008dc:	48001c00 	.word	0x48001c00

080008e0 <DIO_writePin>:

STD_ReturnState DIO_writePin(DIO_PortID portID, DIO_PinID pinID, DIO_PinLevel pinLevel)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	460b      	mov	r3, r1
 80008ec:	71bb      	strb	r3, [r7, #6]
 80008ee:	4613      	mov	r3, r2
 80008f0:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d802      	bhi.n	8000902 <DIO_writePin+0x22>
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2b0e      	cmp	r3, #14
 8000900:	d902      	bls.n	8000908 <DIO_writePin+0x28>
	{
		Ret_Val = RET_NOK;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e0e7      	b.n	8000ad8 <DIO_writePin+0x1f8>
	}

	else
	{
		switch(portID)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b07      	cmp	r3, #7
 800090c:	f200 80e4 	bhi.w	8000ad8 <DIO_writePin+0x1f8>
 8000910:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <DIO_writePin+0x38>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000939 	.word	0x08000939
 800091c:	0800096d 	.word	0x0800096d
 8000920:	080009a1 	.word	0x080009a1
 8000924:	080009d5 	.word	0x080009d5
 8000928:	08000a09 	.word	0x08000a09
 800092c:	08000a3d 	.word	0x08000a3d
 8000930:	08000a71 	.word	0x08000a71
 8000934:	08000aa5 	.word	0x08000aa5
		{
		case PORTA_ID:
			if(pinLevel == LOGIC_LOW)
 8000938:	797b      	ldrb	r3, [r7, #5]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10b      	bne.n	8000956 <DIO_writePin+0x76>
			{
				CLEAR_BIT(DIOA_ODR_REG, pinID);
 800093e:	4b6a      	ldr	r3, [pc, #424]	; (8000ae8 <DIO_writePin+0x208>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	79ba      	ldrb	r2, [r7, #6]
 8000944:	2101      	movs	r1, #1
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	43d2      	mvns	r2, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a66      	ldr	r2, [pc, #408]	; (8000ae8 <DIO_writePin+0x208>)
 8000950:	400b      	ands	r3, r1
 8000952:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOA_ODR_REG, pinID);
			}
			break;
 8000954:	e0c0      	b.n	8000ad8 <DIO_writePin+0x1f8>
				SET_BIT(DIOA_ODR_REG, pinID);
 8000956:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <DIO_writePin+0x208>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	79ba      	ldrb	r2, [r7, #6]
 800095c:	2101      	movs	r1, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4611      	mov	r1, r2
 8000964:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <DIO_writePin+0x208>)
 8000966:	430b      	orrs	r3, r1
 8000968:	6013      	str	r3, [r2, #0]
			break;
 800096a:	e0b5      	b.n	8000ad8 <DIO_writePin+0x1f8>

		case PORTB_ID:
			if(pinLevel == LOGIC_LOW)
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10b      	bne.n	800098a <DIO_writePin+0xaa>
			{
				CLEAR_BIT(DIOB_ODR_REG, pinID);
 8000972:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <DIO_writePin+0x20c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	79ba      	ldrb	r2, [r7, #6]
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	43d2      	mvns	r2, r2
 8000980:	4611      	mov	r1, r2
 8000982:	4a5a      	ldr	r2, [pc, #360]	; (8000aec <DIO_writePin+0x20c>)
 8000984:	400b      	ands	r3, r1
 8000986:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOB_ODR_REG, pinID);
			}
			break;
 8000988:	e0a6      	b.n	8000ad8 <DIO_writePin+0x1f8>
				SET_BIT(DIOB_ODR_REG, pinID);
 800098a:	4b58      	ldr	r3, [pc, #352]	; (8000aec <DIO_writePin+0x20c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	4611      	mov	r1, r2
 8000998:	4a54      	ldr	r2, [pc, #336]	; (8000aec <DIO_writePin+0x20c>)
 800099a:	430b      	orrs	r3, r1
 800099c:	6013      	str	r3, [r2, #0]
			break;
 800099e:	e09b      	b.n	8000ad8 <DIO_writePin+0x1f8>

		case PORTC_ID:
			if(pinLevel == LOGIC_LOW)
 80009a0:	797b      	ldrb	r3, [r7, #5]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10b      	bne.n	80009be <DIO_writePin+0xde>
			{
				CLEAR_BIT(DIOC_ODR_REG, pinID);
 80009a6:	4b52      	ldr	r3, [pc, #328]	; (8000af0 <DIO_writePin+0x210>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	2101      	movs	r1, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	43d2      	mvns	r2, r2
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <DIO_writePin+0x210>)
 80009b8:	400b      	ands	r3, r1
 80009ba:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOC_ODR_REG, pinID);
			}
			break;
 80009bc:	e08c      	b.n	8000ad8 <DIO_writePin+0x1f8>
				SET_BIT(DIOC_ODR_REG, pinID);
 80009be:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <DIO_writePin+0x210>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	2101      	movs	r1, #1
 80009c6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a48      	ldr	r2, [pc, #288]	; (8000af0 <DIO_writePin+0x210>)
 80009ce:	430b      	orrs	r3, r1
 80009d0:	6013      	str	r3, [r2, #0]
			break;
 80009d2:	e081      	b.n	8000ad8 <DIO_writePin+0x1f8>

		case PORTD_ID:
			if(pinLevel == LOGIC_LOW)
 80009d4:	797b      	ldrb	r3, [r7, #5]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10b      	bne.n	80009f2 <DIO_writePin+0x112>
			{
				CLEAR_BIT(DIOD_ODR_REG, pinID);
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <DIO_writePin+0x214>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	79ba      	ldrb	r2, [r7, #6]
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f202 	lsl.w	r2, r1, r2
 80009e6:	43d2      	mvns	r2, r2
 80009e8:	4611      	mov	r1, r2
 80009ea:	4a42      	ldr	r2, [pc, #264]	; (8000af4 <DIO_writePin+0x214>)
 80009ec:	400b      	ands	r3, r1
 80009ee:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOD_ODR_REG, pinID);
			}
			break;
 80009f0:	e072      	b.n	8000ad8 <DIO_writePin+0x1f8>
				SET_BIT(DIOD_ODR_REG, pinID);
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <DIO_writePin+0x214>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	2101      	movs	r1, #1
 80009fa:	fa01 f202 	lsl.w	r2, r1, r2
 80009fe:	4611      	mov	r1, r2
 8000a00:	4a3c      	ldr	r2, [pc, #240]	; (8000af4 <DIO_writePin+0x214>)
 8000a02:	430b      	orrs	r3, r1
 8000a04:	6013      	str	r3, [r2, #0]
			break;
 8000a06:	e067      	b.n	8000ad8 <DIO_writePin+0x1f8>

		case PORTE_ID:
			if(pinLevel == LOGIC_LOW)
 8000a08:	797b      	ldrb	r3, [r7, #5]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10b      	bne.n	8000a26 <DIO_writePin+0x146>
			{
				CLEAR_BIT(DIOE_ODR_REG, pinID);
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <DIO_writePin+0x218>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	79ba      	ldrb	r2, [r7, #6]
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	43d2      	mvns	r2, r2
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4a36      	ldr	r2, [pc, #216]	; (8000af8 <DIO_writePin+0x218>)
 8000a20:	400b      	ands	r3, r1
 8000a22:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOE_ODR_REG, pinID);
			}
			break;
 8000a24:	e058      	b.n	8000ad8 <DIO_writePin+0x1f8>
				SET_BIT(DIOE_ODR_REG, pinID);
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <DIO_writePin+0x218>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	79ba      	ldrb	r2, [r7, #6]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a30      	ldr	r2, [pc, #192]	; (8000af8 <DIO_writePin+0x218>)
 8000a36:	430b      	orrs	r3, r1
 8000a38:	6013      	str	r3, [r2, #0]
			break;
 8000a3a:	e04d      	b.n	8000ad8 <DIO_writePin+0x1f8>

		case PORTF_ID:
			if(pinLevel == LOGIC_LOW)
 8000a3c:	797b      	ldrb	r3, [r7, #5]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d10b      	bne.n	8000a5a <DIO_writePin+0x17a>
			{
				CLEAR_BIT(DIOF_ODR_REG, pinID);
 8000a42:	4b2e      	ldr	r3, [pc, #184]	; (8000afc <DIO_writePin+0x21c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	79ba      	ldrb	r2, [r7, #6]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	43d2      	mvns	r2, r2
 8000a50:	4611      	mov	r1, r2
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <DIO_writePin+0x21c>)
 8000a54:	400b      	ands	r3, r1
 8000a56:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOF_ODR_REG, pinID);
			}
			break;
 8000a58:	e03e      	b.n	8000ad8 <DIO_writePin+0x1f8>
				SET_BIT(DIOF_ODR_REG, pinID);
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <DIO_writePin+0x21c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	2101      	movs	r1, #1
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	4611      	mov	r1, r2
 8000a68:	4a24      	ldr	r2, [pc, #144]	; (8000afc <DIO_writePin+0x21c>)
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	6013      	str	r3, [r2, #0]
			break;
 8000a6e:	e033      	b.n	8000ad8 <DIO_writePin+0x1f8>

		case PORTG_ID:
			if(pinLevel == LOGIC_LOW)
 8000a70:	797b      	ldrb	r3, [r7, #5]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10b      	bne.n	8000a8e <DIO_writePin+0x1ae>
			{
				CLEAR_BIT(DIOG_ODR_REG, pinID);
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <DIO_writePin+0x220>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	79ba      	ldrb	r2, [r7, #6]
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	43d2      	mvns	r2, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <DIO_writePin+0x220>)
 8000a88:	400b      	ands	r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOG_ODR_REG, pinID);
			}
			break;
 8000a8c:	e024      	b.n	8000ad8 <DIO_writePin+0x1f8>
				SET_BIT(DIOG_ODR_REG, pinID);
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <DIO_writePin+0x220>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	79ba      	ldrb	r2, [r7, #6]
 8000a94:	2101      	movs	r1, #1
 8000a96:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <DIO_writePin+0x220>)
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6013      	str	r3, [r2, #0]
			break;
 8000aa2:	e019      	b.n	8000ad8 <DIO_writePin+0x1f8>

		case PORTH_ID:
			if(pinLevel == LOGIC_LOW)
 8000aa4:	797b      	ldrb	r3, [r7, #5]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10b      	bne.n	8000ac2 <DIO_writePin+0x1e2>
			{
				CLEAR_BIT(DIOH_ODR_REG, pinID);
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <DIO_writePin+0x224>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	43d2      	mvns	r2, r2
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <DIO_writePin+0x224>)
 8000abc:	400b      	ands	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOH_ODR_REG, pinID);
			}
			break;
 8000ac0:	e009      	b.n	8000ad6 <DIO_writePin+0x1f6>
				SET_BIT(DIOH_ODR_REG, pinID);
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <DIO_writePin+0x224>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <DIO_writePin+0x224>)
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	6013      	str	r3, [r2, #0]
			break;
 8000ad6:	bf00      	nop
		}
	}

	return Ret_Val;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	48000014 	.word	0x48000014
 8000aec:	48000414 	.word	0x48000414
 8000af0:	48000814 	.word	0x48000814
 8000af4:	48000c14 	.word	0x48000c14
 8000af8:	48001014 	.word	0x48001014
 8000afc:	48001414 	.word	0x48001414
 8000b00:	48001814 	.word	0x48001814
 8000b04:	48001c14 	.word	0x48001c14

08000b08 <DIO_activateInternal>:

	return Ret_Val;
}

STD_ReturnState DIO_activateInternal(DIO_PortID portID, DIO_PinID pinID, DIO_InternalMode internalMode)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
 8000b12:	460b      	mov	r3, r1
 8000b14:	71bb      	strb	r3, [r7, #6]
 8000b16:	4613      	mov	r3, r2
 8000b18:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b07      	cmp	r3, #7
 8000b22:	d802      	bhi.n	8000b2a <DIO_activateInternal+0x22>
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	2b0e      	cmp	r3, #14
 8000b28:	d902      	bls.n	8000b30 <DIO_activateInternal+0x28>
	{
		Ret_Val = RET_NOK;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e0af      	b.n	8000c90 <DIO_activateInternal+0x188>
	}

	else
	{
		switch(portID)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	f200 80ac 	bhi.w	8000c90 <DIO_activateInternal+0x188>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <DIO_activateInternal+0x38>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000b61 	.word	0x08000b61
 8000b44:	08000b87 	.word	0x08000b87
 8000b48:	08000bad 	.word	0x08000bad
 8000b4c:	08000bd3 	.word	0x08000bd3
 8000b50:	08000bf9 	.word	0x08000bf9
 8000b54:	08000c1f 	.word	0x08000c1f
 8000b58:	08000c45 	.word	0x08000c45
 8000b5c:	08000c6b 	.word	0x08000c6b
		{
		case PORTA_ID:
			DIOA_PUPDR_REG = (DIOA_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000b60:	4b4f      	ldr	r3, [pc, #316]	; (8000ca0 <DIO_activateInternal+0x198>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	2103      	movs	r1, #3
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	43d2      	mvns	r2, r2
 8000b70:	4013      	ands	r3, r2
 8000b72:	7979      	ldrb	r1, [r7, #5]
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	0052      	lsls	r2, r2, #1
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <DIO_activateInternal+0x198>)
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
			break;
 8000b84:	e084      	b.n	8000c90 <DIO_activateInternal+0x188>

		case PORTB_ID:
			DIOB_PUPDR_REG = (DIOB_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000b86:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <DIO_activateInternal+0x19c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	0052      	lsls	r2, r2, #1
 8000b8e:	2103      	movs	r1, #3
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	4013      	ands	r3, r2
 8000b98:	7979      	ldrb	r1, [r7, #5]
 8000b9a:	79ba      	ldrb	r2, [r7, #6]
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a3f      	ldr	r2, [pc, #252]	; (8000ca4 <DIO_activateInternal+0x19c>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6013      	str	r3, [r2, #0]
			break;
 8000baa:	e071      	b.n	8000c90 <DIO_activateInternal+0x188>

		case PORTC_ID:
			DIOC_PUPDR_REG = (DIOC_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000bac:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <DIO_activateInternal+0x1a0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	43d2      	mvns	r2, r2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	7979      	ldrb	r1, [r7, #5]
 8000bc0:	79ba      	ldrb	r2, [r7, #6]
 8000bc2:	0052      	lsls	r2, r2, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a37      	ldr	r2, [pc, #220]	; (8000ca8 <DIO_activateInternal+0x1a0>)
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
			break;
 8000bd0:	e05e      	b.n	8000c90 <DIO_activateInternal+0x188>

		case PORTD_ID:
			DIOD_PUPDR_REG = (DIOD_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000bd2:	4b36      	ldr	r3, [pc, #216]	; (8000cac <DIO_activateInternal+0x1a4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	79ba      	ldrb	r2, [r7, #6]
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	2103      	movs	r1, #3
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	4013      	ands	r3, r2
 8000be4:	7979      	ldrb	r1, [r7, #5]
 8000be6:	79ba      	ldrb	r2, [r7, #6]
 8000be8:	0052      	lsls	r2, r2, #1
 8000bea:	fa01 f202 	lsl.w	r2, r1, r2
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	; (8000cac <DIO_activateInternal+0x1a4>)
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	6013      	str	r3, [r2, #0]
			break;
 8000bf6:	e04b      	b.n	8000c90 <DIO_activateInternal+0x188>

		case PORTE_ID:
			DIOE_PUPDR_REG = (DIOE_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <DIO_activateInternal+0x1a8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	79ba      	ldrb	r2, [r7, #6]
 8000bfe:	0052      	lsls	r2, r2, #1
 8000c00:	2103      	movs	r1, #3
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	43d2      	mvns	r2, r2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	7979      	ldrb	r1, [r7, #5]
 8000c0c:	79ba      	ldrb	r2, [r7, #6]
 8000c0e:	0052      	lsls	r2, r2, #1
 8000c10:	fa01 f202 	lsl.w	r2, r1, r2
 8000c14:	4611      	mov	r1, r2
 8000c16:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <DIO_activateInternal+0x1a8>)
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
			break;
 8000c1c:	e038      	b.n	8000c90 <DIO_activateInternal+0x188>

		case PORTF_ID:
			DIOF_PUPDR_REG = (DIOF_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <DIO_activateInternal+0x1ac>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	79ba      	ldrb	r2, [r7, #6]
 8000c24:	0052      	lsls	r2, r2, #1
 8000c26:	2103      	movs	r1, #3
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	4013      	ands	r3, r2
 8000c30:	7979      	ldrb	r1, [r7, #5]
 8000c32:	79ba      	ldrb	r2, [r7, #6]
 8000c34:	0052      	lsls	r2, r2, #1
 8000c36:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <DIO_activateInternal+0x1ac>)
 8000c3e:	430b      	orrs	r3, r1
 8000c40:	6013      	str	r3, [r2, #0]
			break;
 8000c42:	e025      	b.n	8000c90 <DIO_activateInternal+0x188>

		case PORTG_ID:
			DIOG_PUPDR_REG = (DIOG_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <DIO_activateInternal+0x1b0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	79ba      	ldrb	r2, [r7, #6]
 8000c4a:	0052      	lsls	r2, r2, #1
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	43d2      	mvns	r2, r2
 8000c54:	4013      	ands	r3, r2
 8000c56:	7979      	ldrb	r1, [r7, #5]
 8000c58:	79ba      	ldrb	r2, [r7, #6]
 8000c5a:	0052      	lsls	r2, r2, #1
 8000c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c60:	4611      	mov	r1, r2
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <DIO_activateInternal+0x1b0>)
 8000c64:	430b      	orrs	r3, r1
 8000c66:	6013      	str	r3, [r2, #0]
			break;
 8000c68:	e012      	b.n	8000c90 <DIO_activateInternal+0x188>

		case PORTH_ID:
			DIOH_PUPDR_REG = (DIOH_PUPDR_REG & ~(0x03 << (pinID*2))) | (internalMode << (pinID*2));
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <DIO_activateInternal+0x1b4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	79ba      	ldrb	r2, [r7, #6]
 8000c70:	0052      	lsls	r2, r2, #1
 8000c72:	2103      	movs	r1, #3
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	7979      	ldrb	r1, [r7, #5]
 8000c7e:	79ba      	ldrb	r2, [r7, #6]
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	4611      	mov	r1, r2
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <DIO_activateInternal+0x1b4>)
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	6013      	str	r3, [r2, #0]
			break;
 8000c8e:	bf00      	nop
		}
	}

	return Ret_Val;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	4800000c 	.word	0x4800000c
 8000ca4:	4800040c 	.word	0x4800040c
 8000ca8:	4800080c 	.word	0x4800080c
 8000cac:	48000c0c 	.word	0x48000c0c
 8000cb0:	4800100c 	.word	0x4800100c
 8000cb4:	4800140c 	.word	0x4800140c
 8000cb8:	4800180c 	.word	0x4800180c
 8000cbc:	48001c0c 	.word	0x48001c0c

08000cc0 <rcc_setSystemClk>:
#include "rcc_reg.h"
#include "bit_math.h"
#include "rcc.h"


void rcc_setSystemClk(rcc_sysClk_t sysClk){
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	switch(sysClk){
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d02c      	beq.n	8000d2a <rcc_setSystemClk+0x6a>
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	dc3e      	bgt.n	8000d52 <rcc_setSystemClk+0x92>
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <rcc_setSystemClk+0x1e>
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d012      	beq.n	8000d02 <rcc_setSystemClk+0x42>
		/* select PLL as sys clock*/
		RCC_CFGR_REG|=PLL_SW;
		break;

	}
}
 8000cdc:	e039      	b.n	8000d52 <rcc_setSystemClk+0x92>
		SET_BIT(RCC_CR_REG,HSION_BIT);
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSION_READY_FLAG_BIT)==0);
 8000cea:	bf00      	nop
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f9      	beq.n	8000cec <rcc_setSystemClk+0x2c>
		RCC_CFGR_REG|=HSI_SW;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <rcc_setSystemClk+0xa4>)
 8000cfa:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <rcc_setSystemClk+0xa4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6013      	str	r3, [r2, #0]
		break;
 8000d00:	e027      	b.n	8000d52 <rcc_setSystemClk+0x92>
		SET_BIT(RCC_CR_REG,HSEON_BIT);
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0c:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSEON_READY_FLAG_BIT)==0);
 8000d0e:	bf00      	nop
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f9      	beq.n	8000d10 <rcc_setSystemClk+0x50>
		RCC_CFGR_REG|=HSE_SW;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <rcc_setSystemClk+0xa4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <rcc_setSystemClk+0xa4>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]
		break;
 8000d28:	e013      	b.n	8000d52 <rcc_setSystemClk+0x92>
		SET_BIT(RCC_CR_REG,PLLON_BIT);
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d34:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,PLLON_READY_FLAG_BIT)==0);
 8000d36:	bf00      	nop
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <rcc_setSystemClk+0xa0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f9      	beq.n	8000d38 <rcc_setSystemClk+0x78>
		RCC_CFGR_REG|=PLL_SW;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <rcc_setSystemClk+0xa4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <rcc_setSystemClk+0xa4>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	6013      	str	r3, [r2, #0]
		break;
 8000d50:	bf00      	nop
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40021004 	.word	0x40021004

08000d68 <rcc_enablePeriClk>:
void rcc_enablePeriClk(rcc_busId_t busId , u8 periId ){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	71bb      	strb	r3, [r7, #6]
	switch(busId){
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d01c      	beq.n	8000db8 <rcc_enablePeriClk+0x50>
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	dc25      	bgt.n	8000dce <rcc_enablePeriClk+0x66>
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <rcc_enablePeriClk+0x24>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d00b      	beq.n	8000da2 <rcc_enablePeriClk+0x3a>
	case APB2:
		SET_BIT(RCC_APB2ENR_REG,periId);

		break;
	}
}
 8000d8a:	e020      	b.n	8000dce <rcc_enablePeriClk+0x66>
		SET_BIT(RCC_AHBENR_REG,periId);
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <rcc_enablePeriClk+0x74>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	79ba      	ldrb	r2, [r7, #6]
 8000d92:	2101      	movs	r1, #1
 8000d94:	fa01 f202 	lsl.w	r2, r1, r2
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <rcc_enablePeriClk+0x74>)
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	6013      	str	r3, [r2, #0]
		break;
 8000da0:	e015      	b.n	8000dce <rcc_enablePeriClk+0x66>
		SET_BIT(RCC_APB1ENR_REG,periId);
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <rcc_enablePeriClk+0x78>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	79ba      	ldrb	r2, [r7, #6]
 8000da8:	2101      	movs	r1, #1
 8000daa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dae:	4611      	mov	r1, r2
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <rcc_enablePeriClk+0x78>)
 8000db2:	430b      	orrs	r3, r1
 8000db4:	6013      	str	r3, [r2, #0]
		break;
 8000db6:	e00a      	b.n	8000dce <rcc_enablePeriClk+0x66>
		SET_BIT(RCC_APB2ENR_REG,periId);
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <rcc_enablePeriClk+0x7c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	79ba      	ldrb	r2, [r7, #6]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <rcc_enablePeriClk+0x7c>)
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6013      	str	r3, [r2, #0]
		break;
 8000dcc:	bf00      	nop
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021014 	.word	0x40021014
 8000de0:	4002101c 	.word	0x4002101c
 8000de4:	40021018 	.word	0x40021018

08000de8 <SysTick_Handler>:


static volatile void(*g_callBackPtr)(void) = (void*)RET_NULLPTR;

void SysTick_Handler (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	if(g_callBackPtr != (void*)RET_NULLPTR)
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Handler+0x18>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d002      	beq.n	8000dfa <SysTick_Handler+0x12>
	{
		(*g_callBackPtr)();
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <SysTick_Handler+0x18>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4798      	blx	r3
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000018 	.word	0x20000018

08000e04 <main>:
/*******************************************************************************
 *                      Main Function                          *
 *******************************************************************************/

int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
//	u8 k=0;
	rcc_setSystemClk(HSI);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff58 	bl	8000cc0 <rcc_setSystemClk>
	rcc_enablePeriClk(AHB,IOPB_EN);
 8000e10:	2112      	movs	r1, #18
 8000e12:	2000      	movs	r0, #0
 8000e14:	f7ff ffa8 	bl	8000d68 <rcc_enablePeriClk>

	rcc_enablePeriClk(AHB,IOPC_EN);
 8000e18:	2113      	movs	r1, #19
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff ffa4 	bl	8000d68 <rcc_enablePeriClk>

	rcc_enablePeriClk(AHB,IOPA_EN);
 8000e20:	2111      	movs	r1, #17
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff ffa0 	bl	8000d68 <rcc_enablePeriClk>
//	rcc_enablePeriClk(APB2,TIM1_EN);
//	rcc_enablePeriClk(APB1,TIM2_EN);
//	rcc_enablePeriClk(APB1,TIM3_EN);
//	rcc_enablePeriClk(APB1,TIM4_EN);

	rcc_enablePeriClk(APB2,SYSCFG_EN);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff ff9c 	bl	8000d68 <rcc_enablePeriClk>


	DcMotor_Init();
 8000e30:	f7ff f9e4 	bl	80001fc <DcMotor_Init>
	BUTTON_init();
 8000e34:	f7ff f9ce 	bl	80001d4 <BUTTON_init>

	Config_Motor MyCong;
	MyCong.state=on;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	733b      	strb	r3, [r7, #12]
//	MyCong.direction=clockwise;
	MyCong.direction=anticlockwise;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	737b      	strb	r3, [r7, #13]
//	DIO_setupPinMode(PORTA_ID, PIN0_ID, PIN_ANALOG);
//	ADC1_Init(Channel_1 );
//
//	ADC_Enable(ADC_1);
	EXTI_Type Button_EXT;
	Button_EXT.Trig_Stat =RISING_TRIGGER;
 8000e40:	2301      	movs	r3, #1
 8000e42:	713b      	strb	r3, [r7, #4]
	Button_EXT.EXTIxSelect = EXTI_13;
 8000e44:	230d      	movs	r3, #13
 8000e46:	717b      	strb	r3, [r7, #5]
	Button_EXT.EXTI_CallBackFunc = (&Exti_Fun);
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <main+0x84>)
 8000e4a:	60bb      	str	r3, [r7, #8]
	SYSCFG_EXTICR4 = 0x0020;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <main+0x88>)
 8000e4e:	2220      	movs	r2, #32
 8000e50:	601a      	str	r2, [r3, #0]

//	PWM_voidSetPinDirection(1,1);
//	PWM_voidWrite(1,1,100);
	DcMotor_Rotate(&MyCong);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff f9e8 	bl	800022c <DcMotor_Rotate>
	/* Loop forever */
//	SCB_SetPriorityGroup(GROUPS_4_SUBS_4);
	NVIC_EnableIRQ(IRQn_EXTI15_10);
 8000e5c:	2028      	movs	r0, #40	; 0x28
 8000e5e:	f7ff fc3f 	bl	80006e0 <NVIC_EnableIRQ>
//	NVIC_SetPriority(IRQn_EXTI15_10 , 0);
	EXTI_LineEnable(&Button_EXT);
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff facf 	bl	8000408 <EXTI_LineEnable>


//	DIO_setupPinMode(PORTC_ID, PIN13_ID,PIN_INPUT);

	DIO_setupPinMode(PORTA_ID, PIN5_ID,PIN_OUTPUT);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fc5a 	bl	8000728 <DIO_setupPinMode>
	DIO_writePin(PORTA_ID, PIN5_ID,STD_HIGH);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2105      	movs	r1, #5
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fd31 	bl	80008e0 <DIO_writePin>
//
//	NVIC_SetPendingIRQ(IRQn_EXTI15_10);
//
//	NVIC_SetPendingIRQ(IRQn_EXTI15_10);

	Glopal_Var =0;
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <main+0x8c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	801a      	strh	r2, [r3, #0]
	for(;;)
 8000e84:	e7fe      	b.n	8000e84 <main+0x80>
 8000e86:	bf00      	nop
 8000e88:	08000e95 	.word	0x08000e95
 8000e8c:	40010014 	.word	0x40010014
 8000e90:	20000078 	.word	0x20000078

08000e94 <Exti_Fun>:

	}
}

void Exti_Fun(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler()
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
//	}
//	else
//	{
//		DIO_writePin(PORTA_ID, PIN5_ID,STD_HIGH);
//	}
	DIO_writePin(PORTA_ID, PIN5_ID,STD_LOW);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f7ff fd18 	bl	80008e0 <DIO_writePin>
//	DIO_togglePin(PORTA_ID, PIN5_ID);
//	for(u16 i=0;i<10000;i++){
//
//	}
//	NVIC_ClearPendingIRQ(IRQn_EXTI15_10);
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ee2:	f000 f811 	bl	8000f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee6:	f7ff ff8d 	bl	8000e04 <main>

08000eea <LoopForever>:

LoopForever:
  b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   r0, =_estack
 8000eec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ef8:	08000f70 	.word	0x08000f70
  ldr r2, =_sbss
 8000efc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000f00:	2000007c 	.word	0x2000007c

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>
	...

08000f08 <__libc_init_array>:
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	4d0d      	ldr	r5, [pc, #52]	; (8000f40 <__libc_init_array+0x38>)
 8000f0c:	4c0d      	ldr	r4, [pc, #52]	; (8000f44 <__libc_init_array+0x3c>)
 8000f0e:	1b64      	subs	r4, r4, r5
 8000f10:	10a4      	asrs	r4, r4, #2
 8000f12:	2600      	movs	r6, #0
 8000f14:	42a6      	cmp	r6, r4
 8000f16:	d109      	bne.n	8000f2c <__libc_init_array+0x24>
 8000f18:	4d0b      	ldr	r5, [pc, #44]	; (8000f48 <__libc_init_array+0x40>)
 8000f1a:	4c0c      	ldr	r4, [pc, #48]	; (8000f4c <__libc_init_array+0x44>)
 8000f1c:	f000 f818 	bl	8000f50 <_init>
 8000f20:	1b64      	subs	r4, r4, r5
 8000f22:	10a4      	asrs	r4, r4, #2
 8000f24:	2600      	movs	r6, #0
 8000f26:	42a6      	cmp	r6, r4
 8000f28:	d105      	bne.n	8000f36 <__libc_init_array+0x2e>
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}
 8000f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f30:	4798      	blx	r3
 8000f32:	3601      	adds	r6, #1
 8000f34:	e7ee      	b.n	8000f14 <__libc_init_array+0xc>
 8000f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f3a:	4798      	blx	r3
 8000f3c:	3601      	adds	r6, #1
 8000f3e:	e7f2      	b.n	8000f26 <__libc_init_array+0x1e>
 8000f40:	08000f68 	.word	0x08000f68
 8000f44:	08000f68 	.word	0x08000f68
 8000f48:	08000f68 	.word	0x08000f68
 8000f4c:	08000f6c 	.word	0x08000f6c

08000f50 <_init>:
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	bf00      	nop
 8000f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f56:	bc08      	pop	{r3}
 8000f58:	469e      	mov	lr, r3
 8000f5a:	4770      	bx	lr

08000f5c <_fini>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr
