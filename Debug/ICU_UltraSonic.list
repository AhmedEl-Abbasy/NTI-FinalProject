
ICU_UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001524  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080016b8  080016c0  000116c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080016b8  080016b8  000116c0  2**0
                  CONTENTS
  4 .ARM          00000000  080016b8  080016b8  000116c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016b8  080016c0  000116c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016b8  080016b8  000116b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000116c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  080016c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  080016c0  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000116c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015e7  00000000  00000000  000116f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000627  00000000  00000000  00012cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00013300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000134e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000015f3  00000000  00000000  00013648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000cf2  00000000  00000000  00014c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006c20  00000000  00000000  0001592d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001c54d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000590  00000000  00000000  0001c5c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080016a0 	.word	0x080016a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080016a0 	.word	0x080016a0

080001d4 <ICU_Init>:




void ICU_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	}
#endif

	  /************   Channels 1,2,3 Tim 8 as ICU  ***************/

	  TIM8_CCMR1_REG |= WriteValue(1,CC1S_BIT_0_1); //01: CC1 channel is configured as input, IC1 is mapped on TI1
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <ICU_Init+0x84>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <ICU_Init+0x84>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6013      	str	r3, [r2, #0]
	  TIM8_CCMR1_REG |= WriteValue(1,CC2S_BIT_8_9); //01: CC2 channel is configured as input, IC2 is mapped on TI2
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <ICU_Init+0x84>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1b      	ldr	r2, [pc, #108]	; (8000258 <ICU_Init+0x84>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
	  TIM8_CCMR2_REG |= WriteValue(1,CC3S_BIT_0_1); //01: CC3 channel is configured as input, IC3 is mapped on TI3
 80001f0:	4b1a      	ldr	r3, [pc, #104]	; (800025c <ICU_Init+0x88>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a19      	ldr	r2, [pc, #100]	; (800025c <ICU_Init+0x88>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6013      	str	r3, [r2, #0]

	  /************   Channels 4,5,6 Tim 1 as ICU  ***************/

	  TIM1_CCMR1_REG |= WriteValue(1,CC1S_BIT_0_1);   //01: CC1 channel is configured as input, IC1 is mapped on TI1
 80001fc:	4b18      	ldr	r3, [pc, #96]	; (8000260 <ICU_Init+0x8c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a17      	ldr	r2, [pc, #92]	; (8000260 <ICU_Init+0x8c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]
	  TIM1_CCMR1_REG |= WriteValue(1,CC2S_BIT_8_9);   //01: CC2 channel is configured as input, IC2 is mapped on TI2
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <ICU_Init+0x8c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a14      	ldr	r2, [pc, #80]	; (8000260 <ICU_Init+0x8c>)
 800020e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000212:	6013      	str	r3, [r2, #0]
	  TIM1_CCMR2_REG |= WriteValue(1,CC3S_BIT_0_1);   //01: CC3 channel is configured as input, IC3 is mapped on TI3
 8000214:	4b13      	ldr	r3, [pc, #76]	; (8000264 <ICU_Init+0x90>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a12      	ldr	r2, [pc, #72]	; (8000264 <ICU_Init+0x90>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]

	  /*************  Enable Tim8 with 8 Prescaler so tick time is 1 micro sec Sys Clk is 8 M ====> HSI *******/

	  TIM8_PSC_REG = 7;
 8000220:	4b11      	ldr	r3, [pc, #68]	; (8000268 <ICU_Init+0x94>)
 8000222:	2207      	movs	r2, #7
 8000224:	801a      	strh	r2, [r3, #0]
	  SET_BIT(TIM8_CR1_REG,CEN_BIT_0);
 8000226:	4b11      	ldr	r3, [pc, #68]	; (800026c <ICU_Init+0x98>)
 8000228:	881b      	ldrh	r3, [r3, #0]
 800022a:	b29b      	uxth	r3, r3
 800022c:	4a0f      	ldr	r2, [pc, #60]	; (800026c <ICU_Init+0x98>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	b29b      	uxth	r3, r3
 8000234:	8013      	strh	r3, [r2, #0]
	  /*************  Enable Tim1 with 8 Prescaler so tick time is 1 micro sec Sys Clk is 8 M ====> HSI *******/

      TIM1_PSC_REG = 7;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <ICU_Init+0x9c>)
 8000238:	2207      	movs	r2, #7
 800023a:	801a      	strh	r2, [r3, #0]
      SET_BIT(TIM1_CR1_REG,CEN_BIT_0);
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <ICU_Init+0xa0>)
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	b29b      	uxth	r3, r3
 8000242:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <ICU_Init+0xa0>)
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	b29b      	uxth	r3, r3
 800024a:	8013      	strh	r3, [r2, #0]

}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40013418 	.word	0x40013418
 800025c:	4001341c 	.word	0x4001341c
 8000260:	40012c18 	.word	0x40012c18
 8000264:	40012c1c 	.word	0x40012c1c
 8000268:	40013428 	.word	0x40013428
 800026c:	40013400 	.word	0x40013400
 8000270:	40012c28 	.word	0x40012c28
 8000274:	40012c00 	.word	0x40012c00

08000278 <ICU_Control>:

void ICU_Control(ICU_Channel channel ,  u8 control)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	460a      	mov	r2, r1
 8000282:	71fb      	strb	r3, [r7, #7]
 8000284:	4613      	mov	r3, r2
 8000286:	71bb      	strb	r3, [r7, #6]
	switch(control)
 8000288:	79bb      	ldrb	r3, [r7, #6]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d002      	beq.n	8000294 <ICU_Control+0x1c>
 800028e:	2b01      	cmp	r3, #1
 8000290:	d01c      	beq.n	80002cc <ICU_Control+0x54>
	break;


	}

}
 8000292:	e037      	b.n	8000304 <ICU_Control+0x8c>
		if( channel < channel_4 )
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	2b02      	cmp	r3, #2
 8000298:	d80b      	bhi.n	80002b2 <ICU_Control+0x3a>
			SET_BIT(TIM8_CCER_REG , ( channel * 4 ) );
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <ICU_Control+0x98>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	0092      	lsls	r2, r2, #2
 80002a2:	2101      	movs	r1, #1
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a19      	ldr	r2, [pc, #100]	; (8000310 <ICU_Control+0x98>)
 80002ac:	430b      	orrs	r3, r1
 80002ae:	6013      	str	r3, [r2, #0]
	break;
 80002b0:	e028      	b.n	8000304 <ICU_Control+0x8c>
			SET_BIT(TIM1_CCER_REG , ( ( channel - 3 ) * 4 ) );
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <ICU_Control+0x9c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	3a03      	subs	r2, #3
 80002ba:	0092      	lsls	r2, r2, #2
 80002bc:	2101      	movs	r1, #1
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	4611      	mov	r1, r2
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <ICU_Control+0x9c>)
 80002c6:	430b      	orrs	r3, r1
 80002c8:	6013      	str	r3, [r2, #0]
	break;
 80002ca:	e01b      	b.n	8000304 <ICU_Control+0x8c>
		if( channel < channel_4 )
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d80b      	bhi.n	80002ea <ICU_Control+0x72>
			CLEAR_BIT(TIM8_CCER_REG , ( channel * 4 ) );
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <ICU_Control+0x98>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	2101      	movs	r1, #1
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	43db      	mvns	r3, r3
 80002e2:	490b      	ldr	r1, [pc, #44]	; (8000310 <ICU_Control+0x98>)
 80002e4:	4013      	ands	r3, r2
 80002e6:	600b      	str	r3, [r1, #0]
	break;
 80002e8:	e00b      	b.n	8000302 <ICU_Control+0x8a>
			CLEAR_BIT(TIM1_CCER_REG , ( ( channel - 3 ) * 4 ) );
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <ICU_Control+0x9c>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	3b03      	subs	r3, #3
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	2101      	movs	r1, #1
 80002f6:	fa01 f303 	lsl.w	r3, r1, r3
 80002fa:	43db      	mvns	r3, r3
 80002fc:	4905      	ldr	r1, [pc, #20]	; (8000314 <ICU_Control+0x9c>)
 80002fe:	4013      	ands	r3, r2
 8000300:	600b      	str	r3, [r1, #0]
	break;
 8000302:	bf00      	nop
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40013420 	.word	0x40013420
 8000314:	40012c20 	.word	0x40012c20

08000318 <ICU_SelectEdge>:


void ICU_SelectEdge(ICU_Channel channel,ICU_Edge edge)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	460a      	mov	r2, r1
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	4613      	mov	r3, r2
 8000326:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b05      	cmp	r3, #5
 800032c:	f200 811e 	bhi.w	800056c <ICU_SelectEdge+0x254>
 8000330:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <ICU_SelectEdge+0x20>)
 8000332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000336:	bf00      	nop
 8000338:	08000351 	.word	0x08000351
 800033c:	080003ab 	.word	0x080003ab
 8000340:	08000405 	.word	0x08000405
 8000344:	0800045f 	.word	0x0800045f
 8000348:	080004b9 	.word	0x080004b9
 800034c:	08000513 	.word	0x08000513
	{
	  case channel_1:
		  	   if( edge == RISING )
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d10c      	bne.n	8000370 <ICU_SelectEdge+0x58>
		  	  	{
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 8000356:	4b88      	ldr	r3, [pc, #544]	; (8000578 <ICU_SelectEdge+0x260>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a87      	ldr	r2, [pc, #540]	; (8000578 <ICU_SelectEdge+0x260>)
 800035c:	f023 0302 	bic.w	r3, r3, #2
 8000360:	6013      	str	r3, [r2, #0]
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 8000362:	4b85      	ldr	r3, [pc, #532]	; (8000578 <ICU_SelectEdge+0x260>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a84      	ldr	r2, [pc, #528]	; (8000578 <ICU_SelectEdge+0x260>)
 8000368:	f023 0308 	bic.w	r3, r3, #8
 800036c:	6013      	str	r3, [r2, #0]
		  	  	else
		  	  	{
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
		  	  	}
	  break;
 800036e:	e0fd      	b.n	800056c <ICU_SelectEdge+0x254>
		  	  	else if (edge == FALLING )
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d10c      	bne.n	8000390 <ICU_SelectEdge+0x78>
		  	  	  	  SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 8000376:	4b80      	ldr	r3, [pc, #512]	; (8000578 <ICU_SelectEdge+0x260>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a7f      	ldr	r2, [pc, #508]	; (8000578 <ICU_SelectEdge+0x260>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	6013      	str	r3, [r2, #0]
		  	  	  	  CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 8000382:	4b7d      	ldr	r3, [pc, #500]	; (8000578 <ICU_SelectEdge+0x260>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a7c      	ldr	r2, [pc, #496]	; (8000578 <ICU_SelectEdge+0x260>)
 8000388:	f023 0308 	bic.w	r3, r3, #8
 800038c:	6013      	str	r3, [r2, #0]
	  break;
 800038e:	e0ed      	b.n	800056c <ICU_SelectEdge+0x254>
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 8000390:	4b79      	ldr	r3, [pc, #484]	; (8000578 <ICU_SelectEdge+0x260>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a78      	ldr	r2, [pc, #480]	; (8000578 <ICU_SelectEdge+0x260>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6013      	str	r3, [r2, #0]
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 800039c:	4b76      	ldr	r3, [pc, #472]	; (8000578 <ICU_SelectEdge+0x260>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a75      	ldr	r2, [pc, #468]	; (8000578 <ICU_SelectEdge+0x260>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6013      	str	r3, [r2, #0]
	  break;
 80003a8:	e0e0      	b.n	800056c <ICU_SelectEdge+0x254>
	  case channel_2:
	  	  	  if( edge == RISING )
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d10c      	bne.n	80003ca <ICU_SelectEdge+0xb2>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 80003b0:	4b71      	ldr	r3, [pc, #452]	; (8000578 <ICU_SelectEdge+0x260>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a70      	ldr	r2, [pc, #448]	; (8000578 <ICU_SelectEdge+0x260>)
 80003b6:	f023 0320 	bic.w	r3, r3, #32
 80003ba:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 80003bc:	4b6e      	ldr	r3, [pc, #440]	; (8000578 <ICU_SelectEdge+0x260>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a6d      	ldr	r2, [pc, #436]	; (8000578 <ICU_SelectEdge+0x260>)
 80003c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003c6:	6013      	str	r3, [r2, #0]
	  	     else
	  	     {
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
	  	     }
	  break;
 80003c8:	e0d0      	b.n	800056c <ICU_SelectEdge+0x254>
	  	     else if (edge == FALLING )
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d10c      	bne.n	80003ea <ICU_SelectEdge+0xd2>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 80003d0:	4b69      	ldr	r3, [pc, #420]	; (8000578 <ICU_SelectEdge+0x260>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a68      	ldr	r2, [pc, #416]	; (8000578 <ICU_SelectEdge+0x260>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 80003dc:	4b66      	ldr	r3, [pc, #408]	; (8000578 <ICU_SelectEdge+0x260>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a65      	ldr	r2, [pc, #404]	; (8000578 <ICU_SelectEdge+0x260>)
 80003e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003e6:	6013      	str	r3, [r2, #0]
	  break;
 80003e8:	e0c0      	b.n	800056c <ICU_SelectEdge+0x254>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 80003ea:	4b63      	ldr	r3, [pc, #396]	; (8000578 <ICU_SelectEdge+0x260>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a62      	ldr	r2, [pc, #392]	; (8000578 <ICU_SelectEdge+0x260>)
 80003f0:	f043 0320 	orr.w	r3, r3, #32
 80003f4:	6013      	str	r3, [r2, #0]
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 80003f6:	4b60      	ldr	r3, [pc, #384]	; (8000578 <ICU_SelectEdge+0x260>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a5f      	ldr	r2, [pc, #380]	; (8000578 <ICU_SelectEdge+0x260>)
 80003fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000400:	6013      	str	r3, [r2, #0]
	  break;
 8000402:	e0b3      	b.n	800056c <ICU_SelectEdge+0x254>
	  case channel_3:
	  	  	  if( edge == RISING )
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d10c      	bne.n	8000424 <ICU_SelectEdge+0x10c>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 800040a:	4b5b      	ldr	r3, [pc, #364]	; (8000578 <ICU_SelectEdge+0x260>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a5a      	ldr	r2, [pc, #360]	; (8000578 <ICU_SelectEdge+0x260>)
 8000410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000414:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 8000416:	4b58      	ldr	r3, [pc, #352]	; (8000578 <ICU_SelectEdge+0x260>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a57      	ldr	r2, [pc, #348]	; (8000578 <ICU_SelectEdge+0x260>)
 800041c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000420:	6013      	str	r3, [r2, #0]
		  	  else
		  	  {
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
		  	  }
	  break;
 8000422:	e0a3      	b.n	800056c <ICU_SelectEdge+0x254>
		  	  else if (edge == FALLING )
 8000424:	79bb      	ldrb	r3, [r7, #6]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d10c      	bne.n	8000444 <ICU_SelectEdge+0x12c>
	  	  		  SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 800042a:	4b53      	ldr	r3, [pc, #332]	; (8000578 <ICU_SelectEdge+0x260>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a52      	ldr	r2, [pc, #328]	; (8000578 <ICU_SelectEdge+0x260>)
 8000430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000434:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 8000436:	4b50      	ldr	r3, [pc, #320]	; (8000578 <ICU_SelectEdge+0x260>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a4f      	ldr	r2, [pc, #316]	; (8000578 <ICU_SelectEdge+0x260>)
 800043c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000440:	6013      	str	r3, [r2, #0]
	  break;
 8000442:	e093      	b.n	800056c <ICU_SelectEdge+0x254>
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 8000444:	4b4c      	ldr	r3, [pc, #304]	; (8000578 <ICU_SelectEdge+0x260>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a4b      	ldr	r2, [pc, #300]	; (8000578 <ICU_SelectEdge+0x260>)
 800044a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800044e:	6013      	str	r3, [r2, #0]
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 8000450:	4b49      	ldr	r3, [pc, #292]	; (8000578 <ICU_SelectEdge+0x260>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a48      	ldr	r2, [pc, #288]	; (8000578 <ICU_SelectEdge+0x260>)
 8000456:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800045a:	6013      	str	r3, [r2, #0]
	  break;
 800045c:	e086      	b.n	800056c <ICU_SelectEdge+0x254>
	  case channel_4:
	  	   if( edge == RISING )
 800045e:	79bb      	ldrb	r3, [r7, #6]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d10c      	bne.n	800047e <ICU_SelectEdge+0x166>
	  	  	{
	  		      CLEAR_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 8000464:	4b45      	ldr	r3, [pc, #276]	; (800057c <ICU_SelectEdge+0x264>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a44      	ldr	r2, [pc, #272]	; (800057c <ICU_SelectEdge+0x264>)
 800046a:	f023 0302 	bic.w	r3, r3, #2
 800046e:	6013      	str	r3, [r2, #0]
	  		      CLEAR_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 8000470:	4b42      	ldr	r3, [pc, #264]	; (800057c <ICU_SelectEdge+0x264>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a41      	ldr	r2, [pc, #260]	; (800057c <ICU_SelectEdge+0x264>)
 8000476:	f023 0308 	bic.w	r3, r3, #8
 800047a:	6013      	str	r3, [r2, #0]
	  	  	else
	  	  	{
	  	  		 SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
	  	  		 SET_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
	  	  	}
	  break;
 800047c:	e076      	b.n	800056c <ICU_SelectEdge+0x254>
	  	  	else if (edge == FALLING )
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d10c      	bne.n	800049e <ICU_SelectEdge+0x186>
	  	  	  	  SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 8000484:	4b3d      	ldr	r3, [pc, #244]	; (800057c <ICU_SelectEdge+0x264>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a3c      	ldr	r2, [pc, #240]	; (800057c <ICU_SelectEdge+0x264>)
 800048a:	f043 0302 	orr.w	r3, r3, #2
 800048e:	6013      	str	r3, [r2, #0]
	  	  	  	  CLEAR_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 8000490:	4b3a      	ldr	r3, [pc, #232]	; (800057c <ICU_SelectEdge+0x264>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a39      	ldr	r2, [pc, #228]	; (800057c <ICU_SelectEdge+0x264>)
 8000496:	f023 0308 	bic.w	r3, r3, #8
 800049a:	6013      	str	r3, [r2, #0]
	  break;
 800049c:	e066      	b.n	800056c <ICU_SelectEdge+0x254>
	  	  		 SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 800049e:	4b37      	ldr	r3, [pc, #220]	; (800057c <ICU_SelectEdge+0x264>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a36      	ldr	r2, [pc, #216]	; (800057c <ICU_SelectEdge+0x264>)
 80004a4:	f043 0302 	orr.w	r3, r3, #2
 80004a8:	6013      	str	r3, [r2, #0]
	  	  		 SET_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <ICU_SelectEdge+0x264>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a33      	ldr	r2, [pc, #204]	; (800057c <ICU_SelectEdge+0x264>)
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	6013      	str	r3, [r2, #0]
	  break;
 80004b6:	e059      	b.n	800056c <ICU_SelectEdge+0x254>
	  case channel_5:
  	  	  if( edge == RISING )
 80004b8:	79bb      	ldrb	r3, [r7, #6]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d10c      	bne.n	80004d8 <ICU_SelectEdge+0x1c0>
  	  	  {
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 80004be:	4b2f      	ldr	r3, [pc, #188]	; (800057c <ICU_SelectEdge+0x264>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a2e      	ldr	r2, [pc, #184]	; (800057c <ICU_SelectEdge+0x264>)
 80004c4:	f023 0320 	bic.w	r3, r3, #32
 80004c8:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 80004ca:	4b2c      	ldr	r3, [pc, #176]	; (800057c <ICU_SelectEdge+0x264>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a2b      	ldr	r2, [pc, #172]	; (800057c <ICU_SelectEdge+0x264>)
 80004d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d4:	6013      	str	r3, [r2, #0]
  	     else
  	     {
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
  	  		  SET_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
  	     }
	  break;
 80004d6:	e049      	b.n	800056c <ICU_SelectEdge+0x254>
  	     else if (edge == FALLING )
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d10c      	bne.n	80004f8 <ICU_SelectEdge+0x1e0>
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <ICU_SelectEdge+0x264>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <ICU_SelectEdge+0x264>)
 80004e4:	f043 0320 	orr.w	r3, r3, #32
 80004e8:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <ICU_SelectEdge+0x264>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a23      	ldr	r2, [pc, #140]	; (800057c <ICU_SelectEdge+0x264>)
 80004f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004f4:	6013      	str	r3, [r2, #0]
	  break;
 80004f6:	e039      	b.n	800056c <ICU_SelectEdge+0x254>
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <ICU_SelectEdge+0x264>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1f      	ldr	r2, [pc, #124]	; (800057c <ICU_SelectEdge+0x264>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6013      	str	r3, [r2, #0]
  	  		  SET_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <ICU_SelectEdge+0x264>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a1c      	ldr	r2, [pc, #112]	; (800057c <ICU_SelectEdge+0x264>)
 800050a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050e:	6013      	str	r3, [r2, #0]
	  break;
 8000510:	e02c      	b.n	800056c <ICU_SelectEdge+0x254>
	  case channel_6:
  	  	  if( edge == RISING )
 8000512:	79bb      	ldrb	r3, [r7, #6]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d10c      	bne.n	8000532 <ICU_SelectEdge+0x21a>
  	  	  {
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <ICU_SelectEdge+0x264>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a17      	ldr	r2, [pc, #92]	; (800057c <ICU_SelectEdge+0x264>)
 800051e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <ICU_SelectEdge+0x264>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <ICU_SelectEdge+0x264>)
 800052a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800052e:	6013      	str	r3, [r2, #0]
	  	  else
	  	  {
	  		 SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
	  		 SET_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
	  	  }
	  break;
 8000530:	e01b      	b.n	800056a <ICU_SelectEdge+0x252>
	  	  else if (edge == FALLING )
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10c      	bne.n	8000552 <ICU_SelectEdge+0x23a>
  	  		  SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <ICU_SelectEdge+0x264>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <ICU_SelectEdge+0x264>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <ICU_SelectEdge+0x264>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <ICU_SelectEdge+0x264>)
 800054a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800054e:	6013      	str	r3, [r2, #0]
	  break;
 8000550:	e00b      	b.n	800056a <ICU_SelectEdge+0x252>
	  		 SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <ICU_SelectEdge+0x264>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <ICU_SelectEdge+0x264>)
 8000558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055c:	6013      	str	r3, [r2, #0]
	  		 SET_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <ICU_SelectEdge+0x264>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a06      	ldr	r2, [pc, #24]	; (800057c <ICU_SelectEdge+0x264>)
 8000564:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000568:	6013      	str	r3, [r2, #0]
	  break;
 800056a:	bf00      	nop
	}



}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40013420 	.word	0x40013420
 800057c:	40012c20 	.word	0x40012c20

08000580 <ICU_INT_CheckStatus>:


STD_ReturnState ICU_INT_CheckStatus(ICU_Channel channel)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState state;

	switch(channel)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b05      	cmp	r3, #5
 800058e:	d86f      	bhi.n	8000670 <ICU_INT_CheckStatus+0xf0>
 8000590:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <ICU_INT_CheckStatus+0x18>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005b1 	.word	0x080005b1
 800059c:	080005d1 	.word	0x080005d1
 80005a0:	080005f1 	.word	0x080005f1
 80005a4:	08000611 	.word	0x08000611
 80005a8:	08000631 	.word	0x08000631
 80005ac:	08000651 	.word	0x08000651
	{
	   case channel_1:
		   state = CHECK_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <ICU_INT_CheckStatus+0x100>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	085b      	lsrs	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
		   if( state == 0 )
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <ICU_INT_CheckStatus+0x4a>
		   	{
		   	   state = E_NOT_OK;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
		   	}
		   	else
		   	{
			   state = E_OK;
			}
	   break;
 80005c8:	e052      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
			   state = E_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
	   break;
 80005ce:	e04f      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
	   case channel_2:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <ICU_INT_CheckStatus+0x100>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	089b      	lsrs	r3, r3, #2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <ICU_INT_CheckStatus+0x6a>
	   	   {
	   		   state = E_NOT_OK;
 80005e4:	2301      	movs	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 80005e8:	e042      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
			  state = E_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
	   break;
 80005ee:	e03f      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
	   case channel_3:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC3IF_BIT_3 );
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <ICU_INT_CheckStatus+0x100>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <ICU_INT_CheckStatus+0x8a>
	   	   {
	   		   state = E_NOT_OK;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 8000608:	e032      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
			  state = E_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	73fb      	strb	r3, [r7, #15]
	   break;
 800060e:	e02f      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
	   case channel_4:
		   state = CHECK_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <ICU_INT_CheckStatus+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <ICU_INT_CheckStatus+0xaa>
	   	   {
	   		   state = E_NOT_OK;
 8000624:	2301      	movs	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 8000628:	e022      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
			  state = E_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
	   break;
 800062e:	e01f      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
	   case channel_5:
		   state = CHECK_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <ICU_INT_CheckStatus+0x104>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <ICU_INT_CheckStatus+0xca>
	   	   {
	   		   state = E_NOT_OK;
 8000644:	2301      	movs	r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 8000648:	e012      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
			  state = E_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	73fb      	strb	r3, [r7, #15]
	   break;
 800064e:	e00f      	b.n	8000670 <ICU_INT_CheckStatus+0xf0>
	   case channel_6:
		   state = CHECK_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <ICU_INT_CheckStatus+0x104>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <ICU_INT_CheckStatus+0xea>
	   	   {
	   		   state = E_NOT_OK;
 8000664:	2301      	movs	r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 8000668:	e001      	b.n	800066e <ICU_INT_CheckStatus+0xee>
			  state = E_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
	   break;
 800066e:	bf00      	nop

	}

	return state;
 8000670:	7bfb      	ldrb	r3, [r7, #15]

}
 8000672:	4618      	mov	r0, r3
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40013410 	.word	0x40013410
 8000684:	40012c10 	.word	0x40012c10

08000688 <ICU_Read>:


void ICU_Read(ICU_Channel channel,u16 * read_ptr )
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]

	switch(channel)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	2b05      	cmp	r3, #5
 8000698:	d832      	bhi.n	8000700 <ICU_Read+0x78>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <ICU_Read+0x18>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b9 	.word	0x080006b9
 80006a4:	080006c5 	.word	0x080006c5
 80006a8:	080006d1 	.word	0x080006d1
 80006ac:	080006dd 	.word	0x080006dd
 80006b0:	080006e9 	.word	0x080006e9
 80006b4:	080006f5 	.word	0x080006f5
	{
	  case channel_1:
		  * read_ptr = TIM8_CCR1_REG;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <ICU_Read+0x84>)
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	801a      	strh	r2, [r3, #0]
	  break;
 80006c2:	e01d      	b.n	8000700 <ICU_Read+0x78>
	  case channel_2:
		  * read_ptr = TIM8_CCR2_REG;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <ICU_Read+0x88>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	801a      	strh	r2, [r3, #0]
	  break;
 80006ce:	e017      	b.n	8000700 <ICU_Read+0x78>
	  case channel_3:
		  * read_ptr = TIM8_CCR3_REG;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <ICU_Read+0x8c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	801a      	strh	r2, [r3, #0]
	  break;
 80006da:	e011      	b.n	8000700 <ICU_Read+0x78>
	  case channel_4:
		  * read_ptr = TIM1_CCR1_REG;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <ICU_Read+0x90>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	801a      	strh	r2, [r3, #0]
	  break;
 80006e6:	e00b      	b.n	8000700 <ICU_Read+0x78>
	  case channel_5:
		  * read_ptr = TIM1_CCR2_REG;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <ICU_Read+0x94>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	801a      	strh	r2, [r3, #0]
	  break;
 80006f2:	e005      	b.n	8000700 <ICU_Read+0x78>
	  case channel_6:
		  * read_ptr = TIM1_CCR3_REG;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <ICU_Read+0x98>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	801a      	strh	r2, [r3, #0]
	  break;
 80006fe:	bf00      	nop
	}

}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40013434 	.word	0x40013434
 8000710:	40013438 	.word	0x40013438
 8000714:	4001343c 	.word	0x4001343c
 8000718:	40012c34 	.word	0x40012c34
 800071c:	40012c38 	.word	0x40012c38
 8000720:	40012c3c 	.word	0x40012c3c

08000724 <ICU_INT_Enable>:


void ICU_INT_Enable(ICU_Channel channel,void(*ptr)(void))
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
	switch(channel)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b05      	cmp	r3, #5
 8000734:	d873      	bhi.n	800081e <ICU_INT_Enable+0xfa>
 8000736:	a201      	add	r2, pc, #4	; (adr r2, 800073c <ICU_INT_Enable+0x18>)
 8000738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073c:	08000755 	.word	0x08000755
 8000740:	08000773 	.word	0x08000773
 8000744:	08000791 	.word	0x08000791
 8000748:	080007af 	.word	0x080007af
 800074c:	080007cd 	.word	0x080007cd
 8000750:	080007eb 	.word	0x080007eb
	{
	  case channel_1:
	    	SET_BIT(TIM8_DIER_REG,CC1IE_BIT_1);
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <ICU_INT_Enable+0x108>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	4a34      	ldr	r2, [pc, #208]	; (800082c <ICU_INT_Enable+0x108>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	b29b      	uxth	r3, r3
 8000762:	8013      	strh	r3, [r2, #0]
	    	if(ptr != NULLPTR)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d04e      	beq.n	8000808 <ICU_INT_Enable+0xe4>
	    	{
	    		Channel_1_CLB_Ptr = ptr;
 800076a:	4a31      	ldr	r2, [pc, #196]	; (8000830 <ICU_INT_Enable+0x10c>)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000770:	e04a      	b.n	8000808 <ICU_INT_Enable+0xe4>
	  case channel_2:
		   SET_BIT(TIM8_DIER_REG,CC2IE_BIT_2);
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <ICU_INT_Enable+0x108>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	b29b      	uxth	r3, r3
 8000778:	4a2c      	ldr	r2, [pc, #176]	; (800082c <ICU_INT_Enable+0x108>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	b29b      	uxth	r3, r3
 8000780:	8013      	strh	r3, [r2, #0]
	    	if(ptr != NULLPTR)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d041      	beq.n	800080c <ICU_INT_Enable+0xe8>
	    	{
	    		Channel_2_CLB_Ptr = ptr;
 8000788:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <ICU_INT_Enable+0x110>)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 800078e:	e03d      	b.n	800080c <ICU_INT_Enable+0xe8>
	  case channel_3:
		   SET_BIT(TIM8_DIER_REG,CC3IE_BIT_3);
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <ICU_INT_Enable+0x108>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	4a25      	ldr	r2, [pc, #148]	; (800082c <ICU_INT_Enable+0x108>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	b29b      	uxth	r3, r3
 800079e:	8013      	strh	r3, [r2, #0]
	    	if( ptr != NULLPTR)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d034      	beq.n	8000810 <ICU_INT_Enable+0xec>
	    	{
	    		Channel_3_CLB_Ptr = ptr;
 80007a6:	4a24      	ldr	r2, [pc, #144]	; (8000838 <ICU_INT_Enable+0x114>)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 80007ac:	e030      	b.n	8000810 <ICU_INT_Enable+0xec>
	  case channel_4:
		   SET_BIT(TIM1_DIER_REG,CC1IE_BIT_1);
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <ICU_INT_Enable+0x118>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <ICU_INT_Enable+0x118>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	8013      	strh	r3, [r2, #0]
	    	if( ptr != NULLPTR)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d027      	beq.n	8000814 <ICU_INT_Enable+0xf0>
	    	{
	    		Channel_4_CLB_Ptr = ptr;
 80007c4:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <ICU_INT_Enable+0x11c>)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 80007ca:	e023      	b.n	8000814 <ICU_INT_Enable+0xf0>
	  case channel_5:
		   SET_BIT(TIM1_DIER_REG,CC2IE_BIT_2);
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <ICU_INT_Enable+0x118>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4a1a      	ldr	r2, [pc, #104]	; (800083c <ICU_INT_Enable+0x118>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	b29b      	uxth	r3, r3
 80007da:	8013      	strh	r3, [r2, #0]
	    	if( ptr != NULLPTR)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d01a      	beq.n	8000818 <ICU_INT_Enable+0xf4>
	    	{
	    		Channel_5_CLB_Ptr = ptr;
 80007e2:	4a18      	ldr	r2, [pc, #96]	; (8000844 <ICU_INT_Enable+0x120>)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 80007e8:	e016      	b.n	8000818 <ICU_INT_Enable+0xf4>
	  case channel_6:
		   SET_BIT(TIM1_DIER_REG,CC3IE_BIT_3);
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <ICU_INT_Enable+0x118>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <ICU_INT_Enable+0x118>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	8013      	strh	r3, [r2, #0]
	    	if( ptr != NULLPTR)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00d      	beq.n	800081c <ICU_INT_Enable+0xf8>
	    	{
	    		Channel_6_CLB_Ptr = ptr;
 8000800:	4a11      	ldr	r2, [pc, #68]	; (8000848 <ICU_INT_Enable+0x124>)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000806:	e009      	b.n	800081c <ICU_INT_Enable+0xf8>
	  break;
 8000808:	bf00      	nop
 800080a:	e008      	b.n	800081e <ICU_INT_Enable+0xfa>
	  break;
 800080c:	bf00      	nop
 800080e:	e006      	b.n	800081e <ICU_INT_Enable+0xfa>
	  break;
 8000810:	bf00      	nop
 8000812:	e004      	b.n	800081e <ICU_INT_Enable+0xfa>
	  break;
 8000814:	bf00      	nop
 8000816:	e002      	b.n	800081e <ICU_INT_Enable+0xfa>
	  break;
 8000818:	bf00      	nop
 800081a:	e000      	b.n	800081e <ICU_INT_Enable+0xfa>
	  break;
 800081c:	bf00      	nop


	}

}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	4001340c 	.word	0x4001340c
 8000830:	2000001c 	.word	0x2000001c
 8000834:	20000020 	.word	0x20000020
 8000838:	20000024 	.word	0x20000024
 800083c:	40012c0c 	.word	0x40012c0c
 8000840:	20000028 	.word	0x20000028
 8000844:	2000002c 	.word	0x2000002c
 8000848:	20000030 	.word	0x20000030

0800084c <TIM8_CC_IRQHandler>:
}


//TIM8_CC_IRQHandler
void TIM8_CC_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

	if ( ICU_INT_CheckStatus(channel_1 ) == E_OK  )
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fe95 	bl	8000580 <ICU_INT_CheckStatus>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10c      	bne.n	8000876 <TIM8_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <TIM8_CC_IRQHandler+0x7c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <TIM8_CC_IRQHandler+0x7c>)
 8000862:	f023 0302 	bic.w	r3, r3, #2
 8000866:	6013      	str	r3, [r2, #0]
		if( Channel_1_CLB_Ptr != NULLPTR )
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <TIM8_CC_IRQHandler+0x80>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <TIM8_CC_IRQHandler+0x2a>
		{
			Channel_1_CLB_Ptr();
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <TIM8_CC_IRQHandler+0x80>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_2 ) == E_OK  )
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fe82 	bl	8000580 <ICU_INT_CheckStatus>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d10c      	bne.n	800089c <TIM8_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <TIM8_CC_IRQHandler+0x7c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <TIM8_CC_IRQHandler+0x7c>)
 8000888:	f023 0304 	bic.w	r3, r3, #4
 800088c:	6013      	str	r3, [r2, #0]
		if( Channel_2_CLB_Ptr != NULLPTR )
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <TIM8_CC_IRQHandler+0x84>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <TIM8_CC_IRQHandler+0x50>
		{
			Channel_2_CLB_Ptr();
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <TIM8_CC_IRQHandler+0x84>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_3 ) == E_OK  )
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fe6f 	bl	8000580 <ICU_INT_CheckStatus>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d10c      	bne.n	80008c2 <TIM8_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM8_SR_REG ,CC3IF_BIT_3 );
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <TIM8_CC_IRQHandler+0x7c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <TIM8_CC_IRQHandler+0x7c>)
 80008ae:	f023 0308 	bic.w	r3, r3, #8
 80008b2:	6013      	str	r3, [r2, #0]
		if( Channel_3_CLB_Ptr != NULLPTR )
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <TIM8_CC_IRQHandler+0x88>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <TIM8_CC_IRQHandler+0x76>
		{
			Channel_3_CLB_Ptr();
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <TIM8_CC_IRQHandler+0x88>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4798      	blx	r3
		}
	}

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40013410 	.word	0x40013410
 80008cc:	2000001c 	.word	0x2000001c
 80008d0:	20000020 	.word	0x20000020
 80008d4:	20000024 	.word	0x20000024

080008d8 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	if ( ICU_INT_CheckStatus(channel_4 ) == E_OK  )
 80008dc:	2003      	movs	r0, #3
 80008de:	f7ff fe4f 	bl	8000580 <ICU_INT_CheckStatus>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10c      	bne.n	8000902 <TIM1_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <TIM1_CC_IRQHandler+0x7c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	; (8000954 <TIM1_CC_IRQHandler+0x7c>)
 80008ee:	f023 0302 	bic.w	r3, r3, #2
 80008f2:	6013      	str	r3, [r2, #0]
		if( Channel_4_CLB_Ptr != NULLPTR )
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <TIM1_CC_IRQHandler+0x80>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <TIM1_CC_IRQHandler+0x2a>
		{
			Channel_4_CLB_Ptr();
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <TIM1_CC_IRQHandler+0x80>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_5 ) == E_OK  )
 8000902:	2004      	movs	r0, #4
 8000904:	f7ff fe3c 	bl	8000580 <ICU_INT_CheckStatus>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10c      	bne.n	8000928 <TIM1_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <TIM1_CC_IRQHandler+0x7c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <TIM1_CC_IRQHandler+0x7c>)
 8000914:	f023 0304 	bic.w	r3, r3, #4
 8000918:	6013      	str	r3, [r2, #0]
		if( Channel_5_CLB_Ptr != NULLPTR )
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <TIM1_CC_IRQHandler+0x84>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d002      	beq.n	8000928 <TIM1_CC_IRQHandler+0x50>
		{
			Channel_5_CLB_Ptr();
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <TIM1_CC_IRQHandler+0x84>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_6 ) == E_OK  )
 8000928:	2005      	movs	r0, #5
 800092a:	f7ff fe29 	bl	8000580 <ICU_INT_CheckStatus>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10c      	bne.n	800094e <TIM1_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <TIM1_CC_IRQHandler+0x7c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <TIM1_CC_IRQHandler+0x7c>)
 800093a:	f023 0308 	bic.w	r3, r3, #8
 800093e:	6013      	str	r3, [r2, #0]
		if( Channel_6_CLB_Ptr != NULLPTR )
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <TIM1_CC_IRQHandler+0x88>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <TIM1_CC_IRQHandler+0x76>
		{
			Channel_6_CLB_Ptr();
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <TIM1_CC_IRQHandler+0x88>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4798      	blx	r3
		}
	}
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40012c10 	.word	0x40012c10
 8000958:	20000028 	.word	0x20000028
 800095c:	2000002c 	.word	0x2000002c
 8000960:	20000030 	.word	0x20000030

08000964 <NVIC_EnableIRQ>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b490      	push	{r4, r7}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState Ret_Val = E_NOT_OK;
 800096e:	2301      	movs	r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
	if((u8)IRQn >= 0)
	{
		NVIC_ISER->ISER[(IRQn / 32)] |= (1 << (IRQn % 32));
 8000972:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <NVIC_EnableIRQ+0x44>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	b2d8      	uxtb	r0, r3
 800097a:	4603      	mov	r3, r0
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	f002 021f 	and.w	r2, r2, #31
 8000986:	2101      	movs	r1, #1
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	4614      	mov	r4, r2
 800098e:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <NVIC_EnableIRQ+0x44>)
 8000990:	4601      	mov	r1, r0
 8000992:	4323      	orrs	r3, r4
 8000994:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		Ret_Val = E_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
	}
	return Ret_Val;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc90      	pop	{r4, r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <NVIC_SetPriority>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState NVIC_SetPriority(IRQn_Type IRQn,u32 priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState Ret_Val = E_NOT_OK;
 80009b8:	2301      	movs	r3, #1
 80009ba:	73fb      	strb	r3, [r7, #15]
	if(IRQn >=0)
	{
		NVIC_IPR->IPR[(u32)IRQn] = (u8)(priority <<4)	&(u32)0xff;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <NVIC_SetPriority+0x30>)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	54ca      	strb	r2, [r1, r3]
		Ret_Val = E_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
	}
	return Ret_Val;
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000e400 	.word	0xe000e400

080009e0 <rcc_setSystemClk>:


#include "rcc.h"


void rcc_setSystemClk(rcc_sysClk_t sysClk){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	switch(sysClk){
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d017      	beq.n	8000a20 <rcc_setSystemClk+0x40>
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d02a      	beq.n	8000a4a <rcc_setSystemClk+0x6a>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d000      	beq.n	80009fa <rcc_setSystemClk+0x1a>
		/* select PLL as sys clock*/
		RCC_CFGR_REG|=PLL_SW;
		break;

	}
}
 80009f8:	e03c      	b.n	8000a74 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSION_BIT);
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <rcc_setSystemClk+0xa0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSION_READY_FLAG_BIT)==0);
 8000a06:	bf00      	nop
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f8      	beq.n	8000a08 <rcc_setSystemClk+0x28>
		RCC_CFGR_REG|=HSI_SW;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <rcc_setSystemClk+0xa4>)
 8000a18:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <rcc_setSystemClk+0xa4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6013      	str	r3, [r2, #0]
		break;
 8000a1e:	e029      	b.n	8000a74 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSEON_BIT);
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a2a:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSEON_READY_FLAG_BIT)==0);
 8000a2c:	bf00      	nop
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	0c5b      	lsrs	r3, r3, #17
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0f8      	beq.n	8000a2e <rcc_setSystemClk+0x4e>
		RCC_CFGR_REG|=HSE_SW;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <rcc_setSystemClk+0xa4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <rcc_setSystemClk+0xa4>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]
		break;
 8000a48:	e014      	b.n	8000a74 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,PLLON_BIT);
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a54:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,PLLON_READY_FLAG_BIT)==0);
 8000a56:	bf00      	nop
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <rcc_setSystemClk+0xa0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	0e5b      	lsrs	r3, r3, #25
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0f8      	beq.n	8000a58 <rcc_setSystemClk+0x78>
		RCC_CFGR_REG|=PLL_SW;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <rcc_setSystemClk+0xa4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <rcc_setSystemClk+0xa4>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6013      	str	r3, [r2, #0]
		break;
 8000a72:	bf00      	nop
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40021004 	.word	0x40021004

08000a88 <rcc_enablePeriClk>:
void rcc_enablePeriClk(rcc_busId_t busId , u8 periId ){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
	switch(busId){
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d00f      	beq.n	8000abe <rcc_enablePeriClk+0x36>
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d018      	beq.n	8000ad4 <rcc_enablePeriClk+0x4c>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d000      	beq.n	8000aa8 <rcc_enablePeriClk+0x20>
	case APB2:
		SET_BIT(RCC_APB2ENR_REG,periId);

		break;
	}
}
 8000aa6:	e020      	b.n	8000aea <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_AHBENR_REG,periId);
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <rcc_enablePeriClk+0x70>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	2101      	movs	r1, #1
 8000ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <rcc_enablePeriClk+0x70>)
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
		break;
 8000abc:	e015      	b.n	8000aea <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB1ENR_REG,periId);
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <rcc_enablePeriClk+0x74>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	79ba      	ldrb	r2, [r7, #6]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <rcc_enablePeriClk+0x74>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6013      	str	r3, [r2, #0]
		break;
 8000ad2:	e00a      	b.n	8000aea <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB2ENR_REG,periId);
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <rcc_enablePeriClk+0x78>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <rcc_enablePeriClk+0x78>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6013      	str	r3, [r2, #0]
		break;
 8000ae8:	bf00      	nop
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40021014 	.word	0x40021014
 8000afc:	4002101c 	.word	0x4002101c
 8000b00:	40021018 	.word	0x40021018

08000b04 <main>:
#include "icu.h"
#include "sysTick.h"
#include "ultrasonic.h"

int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	u16 read1,read2;
	rcc_setSystemClk(HSI);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff ff68 	bl	80009e0 <rcc_setSystemClk>
	rcc_enablePeriClk(APB2,TIM8_EN);
 8000b10:	210d      	movs	r1, #13
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff ffb8 	bl	8000a88 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB2,TIM1_EN);
 8000b18:	210b      	movs	r1, #11
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff ffb4 	bl	8000a88 <rcc_enablePeriClk>

	rcc_enablePeriClk(AHB,IOPA_EN);
 8000b20:	2111      	movs	r1, #17
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ffb0 	bl	8000a88 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPB_EN);
 8000b28:	2112      	movs	r1, #18
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff ffac 	bl	8000a88 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPC_EN);
 8000b30:	2113      	movs	r1, #19
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ffa8 	bl	8000a88 <rcc_enablePeriClk>


	sysTick_init(AHB_8,NULLPTR);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 fd40 	bl	80015c0 <sysTick_init>


	Ultrasonic_init();
 8000b40:	f000 f846 	bl	8000bd0 <Ultrasonic_init>


    /* Loop forever */
	for(;;)
	{
		Ultrasonic_Trigger( TRIGGER4_PORT , TRIGGER4_PIN , UltraSonic_Channel4 );
 8000b44:	2203      	movs	r2, #3
 8000b46:	2101      	movs	r1, #1
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 f909 	bl	8000d60 <Ultrasonic_Trigger>
		read1 = Ultrasonic_readDistance();
 8000b4e:	f000 f92f 	bl	8000db0 <Ultrasonic_readDistance>
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
		sysTick_start(500000);
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <main+0x74>)
 8000b58:	f000 fd5e 	bl	8001618 <sysTick_start>

		Ultrasonic_Trigger( TRIGGER1_PORT , TRIGGER1_PIN , UltraSonic_Channel1 );
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 f8fd 	bl	8000d60 <Ultrasonic_Trigger>
		read2 = Ultrasonic_readDistance();
 8000b66:	f000 f923 	bl	8000db0 <Ultrasonic_readDistance>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
		sysTick_start(500000);
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <main+0x74>)
 8000b70:	f000 fd52 	bl	8001618 <sysTick_start>
		Ultrasonic_Trigger( TRIGGER4_PORT , TRIGGER4_PIN , UltraSonic_Channel4 );
 8000b74:	e7e6      	b.n	8000b44 <main+0x40>
 8000b76:	bf00      	nop
 8000b78:	0007a120 	.word	0x0007a120

08000b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b80:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000baa:	f000 fd55 	bl	8001658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff ffa9 	bl	8000b04 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   r0, =_estack
 8000bb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bc0:	080016c0 	.word	0x080016c0
  ldr r2, =_sbss
 8000bc4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bc8:	20000044 	.word	0x20000044

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <Ultrasonic_init>:

/*
 * Description: initialization Function of the Ultrasonic driver
 */
void Ultrasonic_init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

	DIO_setupPinMode( PORTA_ID , PIN5_ID , PIN_OUTPUT );
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 f94f 	bl	8000e7c <DIO_setupPinMode>
	DIO_writePin( PORTA_ID , PIN5_ID , LOGIC_LOW );
 8000bde:	2200      	movs	r2, #0
 8000be0:	2105      	movs	r1, #5
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 fa26 	bl	8001034 <DIO_writePin>


	/*****	Init all ICU Channels 1,2,3,4,5,6 *********/

	ICU_Init();
 8000be8:	f7ff faf4 	bl	80001d4 <ICU_Init>

	/**********  Channel   1   *********************************/

	DIO_setupPinMode( TRIGGER1_PORT , TRIGGER1_PIN , PIN_OUTPUT );
 8000bec:	2201      	movs	r2, #1
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f943 	bl	8000e7c <DIO_setupPinMode>
	DIO_writePin( TRIGGER1_PORT ,  TRIGGER1_PIN , LOGIC_LOW );
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 fa1a 	bl	8001034 <DIO_writePin>

	DIO_setupPinMode( ECHO1_PORT , ECHO1_PIN , PIN_ALTERNATE );
 8000c00:	2202      	movs	r2, #2
 8000c02:	2106      	movs	r1, #6
 8000c04:	2002      	movs	r0, #2
 8000c06:	f000 f939 	bl	8000e7c <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO1_PORT ,ECHO1_PIN , UltraSonic1_AF );
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	2106      	movs	r1, #6
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f000 fb1c 	bl	800124c <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel1, Both_Edges );
 8000c14:	2102      	movs	r1, #2
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fb7e 	bl	8000318 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel1 , Ultrasonic_edgeProcessing );
 8000c1c:	494f      	ldr	r1, [pc, #316]	; (8000d5c <Ultrasonic_init+0x18c>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fd80 	bl	8000724 <ICU_INT_Enable>

	/**********  Channel   2   *********************************/

	DIO_setupPinMode( TRIGGER2_PORT , TRIGGER2_PIN , PIN_OUTPUT );
 8000c24:	2201      	movs	r2, #1
 8000c26:	2102      	movs	r1, #2
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f927 	bl	8000e7c <DIO_setupPinMode>
	DIO_writePin( TRIGGER2_PORT ,  TRIGGER2_PIN , LOGIC_LOW );
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2102      	movs	r1, #2
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f9fe 	bl	8001034 <DIO_writePin>

	DIO_setupPinMode( ECHO2_PORT , ECHO2_PIN , PIN_ALTERNATE );
 8000c38:	2202      	movs	r2, #2
 8000c3a:	2107      	movs	r1, #7
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f000 f91d 	bl	8000e7c <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO2_PORT ,ECHO2_PIN , UltraSonic2_AF );
 8000c42:	2204      	movs	r2, #4
 8000c44:	2107      	movs	r1, #7
 8000c46:	2002      	movs	r0, #2
 8000c48:	f000 fb00 	bl	800124c <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel2, Both_Edges );
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff fb62 	bl	8000318 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel2 , Ultrasonic_edgeProcessing);
 8000c54:	4941      	ldr	r1, [pc, #260]	; (8000d5c <Ultrasonic_init+0x18c>)
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fd64 	bl	8000724 <ICU_INT_Enable>

	/**********  Channel   3   *********************************/

	DIO_setupPinMode( TRIGGER3_PORT , TRIGGER3_PIN , PIN_OUTPUT );
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2104      	movs	r1, #4
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f90b 	bl	8000e7c <DIO_setupPinMode>
	DIO_writePin( TRIGGER3_PORT ,  TRIGGER3_PIN , LOGIC_LOW );
 8000c66:	2200      	movs	r2, #0
 8000c68:	2104      	movs	r1, #4
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f9e2 	bl	8001034 <DIO_writePin>

	DIO_setupPinMode( ECHO3_PORT , ECHO3_PIN , PIN_ALTERNATE );
 8000c70:	2202      	movs	r2, #2
 8000c72:	2108      	movs	r1, #8
 8000c74:	2002      	movs	r0, #2
 8000c76:	f000 f901 	bl	8000e7c <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO3_PORT ,ECHO3_PIN , UltraSonic3_AF );
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f000 fae4 	bl	800124c <DIO_setAlternateFunction>


	ICU_SelectEdge(UltraSonic_Channel3, Both_Edges );
 8000c84:	2102      	movs	r1, #2
 8000c86:	2002      	movs	r0, #2
 8000c88:	f7ff fb46 	bl	8000318 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel3 , Ultrasonic_edgeProcessing);
 8000c8c:	4933      	ldr	r1, [pc, #204]	; (8000d5c <Ultrasonic_init+0x18c>)
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f7ff fd48 	bl	8000724 <ICU_INT_Enable>

	/**********  Channel   4   *********************************/

	DIO_setupPinMode( TRIGGER4_PORT , TRIGGER4_PIN , PIN_OUTPUT );
 8000c94:	2201      	movs	r2, #1
 8000c96:	2101      	movs	r1, #1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f8ef 	bl	8000e7c <DIO_setupPinMode>
	DIO_writePin( TRIGGER4_PORT ,  TRIGGER4_PIN , LOGIC_LOW );
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f9c6 	bl	8001034 <DIO_writePin>

	DIO_setupPinMode( ECHO4_PORT , ECHO4_PIN , PIN_ALTERNATE );
 8000ca8:	2202      	movs	r2, #2
 8000caa:	2100      	movs	r1, #0
 8000cac:	2002      	movs	r0, #2
 8000cae:	f000 f8e5 	bl	8000e7c <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO4_PORT ,ECHO4_PIN , UltraSonic4_AF );
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f000 fac8 	bl	800124c <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel4, Both_Edges );
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f7ff fb2a 	bl	8000318 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel4 , Ultrasonic_edgeProcessing);
 8000cc4:	4925      	ldr	r1, [pc, #148]	; (8000d5c <Ultrasonic_init+0x18c>)
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	f7ff fd2c 	bl	8000724 <ICU_INT_Enable>

	/**********  Channel   5   *********************************/

	DIO_setupPinMode( TRIGGER5_PORT , TRIGGER5_PIN , PIN_OUTPUT );
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f8d3 	bl	8000e7c <DIO_setupPinMode>
	DIO_writePin( TRIGGER5_PORT ,  TRIGGER5_PIN , LOGIC_LOW );
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2101      	movs	r1, #1
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f9aa 	bl	8001034 <DIO_writePin>

	DIO_setupPinMode( ECHO5_PORT , ECHO5_PIN , PIN_ALTERNATE );
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f000 f8c9 	bl	8000e7c <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO5_PORT ,ECHO5_PIN , UltraSonic5_AF );
 8000cea:	2202      	movs	r2, #2
 8000cec:	2101      	movs	r1, #1
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f000 faac 	bl	800124c <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel5, Both_Edges );
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	2004      	movs	r0, #4
 8000cf8:	f7ff fb0e 	bl	8000318 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel5 , Ultrasonic_edgeProcessing);
 8000cfc:	4917      	ldr	r1, [pc, #92]	; (8000d5c <Ultrasonic_init+0x18c>)
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff fd10 	bl	8000724 <ICU_INT_Enable>

	/**********  Channel   6   *********************************/

	DIO_setupPinMode( TRIGGER6_PORT , TRIGGER6_PIN , PIN_OUTPUT );
 8000d04:	2201      	movs	r2, #1
 8000d06:	2101      	movs	r1, #1
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f8b7 	bl	8000e7c <DIO_setupPinMode>
	DIO_writePin( TRIGGER6_PORT ,  TRIGGER6_PIN , LOGIC_LOW );
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2101      	movs	r1, #1
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f98e 	bl	8001034 <DIO_writePin>

	DIO_setupPinMode( ECHO6_PORT , ECHO6_PIN , PIN_ALTERNATE );
 8000d18:	2202      	movs	r2, #2
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f000 f8ad 	bl	8000e7c <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO6_PORT ,ECHO6_PIN , UltraSonic6_AF );
 8000d22:	2202      	movs	r2, #2
 8000d24:	2102      	movs	r1, #2
 8000d26:	2002      	movs	r0, #2
 8000d28:	f000 fa90 	bl	800124c <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel6, Both_Edges );
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	2005      	movs	r0, #5
 8000d30:	f7ff faf2 	bl	8000318 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel6 , Ultrasonic_edgeProcessing);
 8000d34:	4909      	ldr	r1, [pc, #36]	; (8000d5c <Ultrasonic_init+0x18c>)
 8000d36:	2005      	movs	r0, #5
 8000d38:	f7ff fcf4 	bl	8000724 <ICU_INT_Enable>

/************* Enable NVIC for Tim 8 & 1 ICU Interrupt **********************/

	NVIC_EnableIRQ(IRQn_TIM8_CC);
 8000d3c:	202e      	movs	r0, #46	; 0x2e
 8000d3e:	f7ff fe11 	bl	8000964 <NVIC_EnableIRQ>
	NVIC_SetPriority(IRQn_TIM8_CC,0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	202e      	movs	r0, #46	; 0x2e
 8000d46:	f7ff fe31 	bl	80009ac <NVIC_SetPriority>

	NVIC_EnableIRQ(IRQn_TIM1_CC);
 8000d4a:	201b      	movs	r0, #27
 8000d4c:	f7ff fe0a 	bl	8000964 <NVIC_EnableIRQ>
	NVIC_SetPriority(IRQn_TIM8_CC,0);
 8000d50:	2100      	movs	r1, #0
 8000d52:	202e      	movs	r0, #46	; 0x2e
 8000d54:	f7ff fe2a 	bl	80009ac <NVIC_SetPriority>

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	08000e29 	.word	0x08000e29

08000d60 <Ultrasonic_Trigger>:
/*
 *  Description: Send the trigger pulse to the ultrasonic
 */

void Ultrasonic_Trigger(DIO_PortID port , DIO_PinID pin , u8 Channel )
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
	UltraSonic_Channel = Channel;
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <Ultrasonic_Trigger+0x4c>)
 8000d74:	797b      	ldrb	r3, [r7, #5]
 8000d76:	7013      	strb	r3, [r2, #0]
	ICU_Control(UltraSonic_Channel , Enable);
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <Ultrasonic_Trigger+0x4c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa7a 	bl	8000278 <ICU_Control>

	DIO_writePin( port ,  pin , LOGIC_HIGH );
 8000d84:	79b9      	ldrb	r1, [r7, #6]
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f952 	bl	8001034 <DIO_writePin>
	sysTick_start(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f000 fc41 	bl	8001618 <sysTick_start>
	DIO_writePin( port ,  pin , LOGIC_LOW );
 8000d96:	79b9      	ldrb	r1, [r7, #6]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f949 	bl	8001034 <DIO_writePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000003c 	.word	0x2000003c

08000db0 <Ultrasonic_readDistance>:

/*
 * Description: Does the distance measurements and return with the distance
 */
u16 Ultrasonic_readDistance(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
	u16 tim ;
	u16 distance ;

	while(flag < 2 );
 8000db6:	bf00      	nop
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <Ultrasonic_readDistance+0x64>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d9fa      	bls.n	8000db8 <Ultrasonic_readDistance+0x8>

	if( t1 > t2)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <Ultrasonic_readDistance+0x68>)
 8000dc4:	881a      	ldrh	r2, [r3, #0]
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <Ultrasonic_readDistance+0x6c>)
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d908      	bls.n	8000de0 <Ultrasonic_readDistance+0x30>
	{
		tim = ( 0xFFFF - t1 ) + t2 ;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <Ultrasonic_readDistance+0x6c>)
 8000dd0:	881a      	ldrh	r2, [r3, #0]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <Ultrasonic_readDistance+0x68>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	80fb      	strh	r3, [r7, #6]
 8000dde:	e005      	b.n	8000dec <Ultrasonic_readDistance+0x3c>
	}
	else
	{
		tim = t2 - t1 ;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <Ultrasonic_readDistance+0x6c>)
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <Ultrasonic_readDistance+0x68>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	80fb      	strh	r3, [r7, #6]
	}

	distance = ( tim / 58 ) ;
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <Ultrasonic_readDistance+0x70>)
 8000df0:	fba2 2303 	umull	r2, r3, r2, r3
 8000df4:	095b      	lsrs	r3, r3, #5
 8000df6:	80bb      	strh	r3, [r7, #4]
	flag = 0;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <Ultrasonic_readDistance+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]

	ICU_Control(UltraSonic_Channel , Disable);
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <Ultrasonic_readDistance+0x74>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2101      	movs	r1, #1
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fa37 	bl	8000278 <ICU_Control>

	return (u16) (distance);
 8000e0a:	88bb      	ldrh	r3, [r7, #4]

}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000034 	.word	0x20000034
 8000e18:	20000040 	.word	0x20000040
 8000e1c:	2000003e 	.word	0x2000003e
 8000e20:	8d3dcb09 	.word	0x8d3dcb09
 8000e24:	2000003c 	.word	0x2000003c

08000e28 <Ultrasonic_edgeProcessing>:


void Ultrasonic_edgeProcessing(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0


	if( flag == 0 )
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <Ultrasonic_edgeProcessing+0x44>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <Ultrasonic_edgeProcessing+0x22>
	{
		ICU_Read(UltraSonic_Channel,&t1);
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <Ultrasonic_edgeProcessing+0x48>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <Ultrasonic_edgeProcessing+0x4c>)
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fc23 	bl	8000688 <ICU_Read>
		flag = 1 ;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <Ultrasonic_edgeProcessing+0x44>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
		ICU_Read(UltraSonic_Channel,&t2);
		flag = 2 ;
		// DIO_togglePin( PORTA_ID , PIN5_ID );			// Internal Led
	}

}
 8000e48:	e00d      	b.n	8000e66 <Ultrasonic_edgeProcessing+0x3e>
	else if( flag == 1 )
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <Ultrasonic_edgeProcessing+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d108      	bne.n	8000e66 <Ultrasonic_edgeProcessing+0x3e>
		ICU_Read(UltraSonic_Channel,&t2);
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <Ultrasonic_edgeProcessing+0x48>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4907      	ldr	r1, [pc, #28]	; (8000e78 <Ultrasonic_edgeProcessing+0x50>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fc14 	bl	8000688 <ICU_Read>
		flag = 2 ;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <Ultrasonic_edgeProcessing+0x44>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000034 	.word	0x20000034
 8000e70:	2000003c 	.word	0x2000003c
 8000e74:	20000040 	.word	0x20000040
 8000e78:	2000003e 	.word	0x2000003e

08000e7c <DIO_setupPinMode>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
STD_ReturnState DIO_setupPinMode(DIO_PortID portID, DIO_PinID pinID, DIO_PinMode pinMode)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	460b      	mov	r3, r1
 8000e88:	71bb      	strb	r3, [r7, #6]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]

	if((portID >= NUM_OF_PORTS) || (pinID >= NUM_OF_PINS_PER_PORT))
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b07      	cmp	r3, #7
 8000e96:	d802      	bhi.n	8000e9e <DIO_setupPinMode+0x22>
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	2b0e      	cmp	r3, #14
 8000e9c:	d902      	bls.n	8000ea4 <DIO_setupPinMode+0x28>
	{
		Ret_Val = E_NOT_OK;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e0b1      	b.n	8001008 <DIO_setupPinMode+0x18c>
	}

	else
	{
		switch(portID)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	f200 80ae 	bhi.w	8001008 <DIO_setupPinMode+0x18c>
 8000eac:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <DIO_setupPinMode+0x38>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000ed5 	.word	0x08000ed5
 8000eb8:	08000eff 	.word	0x08000eff
 8000ebc:	08000f25 	.word	0x08000f25
 8000ec0:	08000f4b 	.word	0x08000f4b
 8000ec4:	08000f71 	.word	0x08000f71
 8000ec8:	08000f97 	.word	0x08000f97
 8000ecc:	08000fbd 	.word	0x08000fbd
 8000ed0:	08000fe3 	.word	0x08000fe3
		{
		case PORTA_ID:
			DIOA_MODER_REG = (DIOA_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000ed4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	79ba      	ldrb	r2, [r7, #6]
 8000edc:	0052      	lsls	r2, r2, #1
 8000ede:	2103      	movs	r1, #3
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	43d2      	mvns	r2, r2
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	7979      	ldrb	r1, [r7, #5]
 8000eea:	79ba      	ldrb	r2, [r7, #6]
 8000eec:	0052      	lsls	r2, r2, #1
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6013      	str	r3, [r2, #0]
			break;
 8000efc:	e084      	b.n	8001008 <DIO_setupPinMode+0x18c>

		case PORTB_ID:
			DIOB_MODER_REG = (DIOB_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <DIO_setupPinMode+0x19c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	0052      	lsls	r2, r2, #1
 8000f06:	2103      	movs	r1, #3
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	43d2      	mvns	r2, r2
 8000f0e:	4013      	ands	r3, r2
 8000f10:	7979      	ldrb	r1, [r7, #5]
 8000f12:	79ba      	ldrb	r2, [r7, #6]
 8000f14:	0052      	lsls	r2, r2, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a3e      	ldr	r2, [pc, #248]	; (8001018 <DIO_setupPinMode+0x19c>)
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6013      	str	r3, [r2, #0]
			break;
 8000f22:	e071      	b.n	8001008 <DIO_setupPinMode+0x18c>

		case PORTC_ID:
			DIOC_MODER_REG = (DIOC_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000f24:	4b3d      	ldr	r3, [pc, #244]	; (800101c <DIO_setupPinMode+0x1a0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	79ba      	ldrb	r2, [r7, #6]
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	43d2      	mvns	r2, r2
 8000f34:	4013      	ands	r3, r2
 8000f36:	7979      	ldrb	r1, [r7, #5]
 8000f38:	79ba      	ldrb	r2, [r7, #6]
 8000f3a:	0052      	lsls	r2, r2, #1
 8000f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f40:	4611      	mov	r1, r2
 8000f42:	4a36      	ldr	r2, [pc, #216]	; (800101c <DIO_setupPinMode+0x1a0>)
 8000f44:	430b      	orrs	r3, r1
 8000f46:	6013      	str	r3, [r2, #0]
			break;
 8000f48:	e05e      	b.n	8001008 <DIO_setupPinMode+0x18c>

		case PORTD_ID:
			DIOD_MODER_REG = (DIOD_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000f4a:	4b35      	ldr	r3, [pc, #212]	; (8001020 <DIO_setupPinMode+0x1a4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	79ba      	ldrb	r2, [r7, #6]
 8000f50:	0052      	lsls	r2, r2, #1
 8000f52:	2103      	movs	r1, #3
 8000f54:	fa01 f202 	lsl.w	r2, r1, r2
 8000f58:	43d2      	mvns	r2, r2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	7979      	ldrb	r1, [r7, #5]
 8000f5e:	79ba      	ldrb	r2, [r7, #6]
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	4611      	mov	r1, r2
 8000f68:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <DIO_setupPinMode+0x1a4>)
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6013      	str	r3, [r2, #0]
			break;
 8000f6e:	e04b      	b.n	8001008 <DIO_setupPinMode+0x18c>

		case PORTE_ID:
			DIOE_MODER_REG = (DIOE_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <DIO_setupPinMode+0x1a8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	79ba      	ldrb	r2, [r7, #6]
 8000f76:	0052      	lsls	r2, r2, #1
 8000f78:	2103      	movs	r1, #3
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	43d2      	mvns	r2, r2
 8000f80:	4013      	ands	r3, r2
 8000f82:	7979      	ldrb	r1, [r7, #5]
 8000f84:	79ba      	ldrb	r2, [r7, #6]
 8000f86:	0052      	lsls	r2, r2, #1
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <DIO_setupPinMode+0x1a8>)
 8000f90:	430b      	orrs	r3, r1
 8000f92:	6013      	str	r3, [r2, #0]
			break;
 8000f94:	e038      	b.n	8001008 <DIO_setupPinMode+0x18c>

		case PORTF_ID:
			DIOF_MODER_REG = (DIOF_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <DIO_setupPinMode+0x1ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	43d2      	mvns	r2, r2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	7979      	ldrb	r1, [r7, #5]
 8000faa:	79ba      	ldrb	r2, [r7, #6]
 8000fac:	0052      	lsls	r2, r2, #1
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <DIO_setupPinMode+0x1ac>)
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	6013      	str	r3, [r2, #0]
			break;
 8000fba:	e025      	b.n	8001008 <DIO_setupPinMode+0x18c>

		case PORTG_ID:
			DIOG_MODER_REG = (DIOG_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <DIO_setupPinMode+0x1b0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	79ba      	ldrb	r2, [r7, #6]
 8000fc2:	0052      	lsls	r2, r2, #1
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	4013      	ands	r3, r2
 8000fce:	7979      	ldrb	r1, [r7, #5]
 8000fd0:	79ba      	ldrb	r2, [r7, #6]
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <DIO_setupPinMode+0x1b0>)
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	6013      	str	r3, [r2, #0]
			break;
 8000fe0:	e012      	b.n	8001008 <DIO_setupPinMode+0x18c>

		case PORTH_ID:
			DIOH_MODER_REG = (DIOH_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <DIO_setupPinMode+0x1b4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	79ba      	ldrb	r2, [r7, #6]
 8000fe8:	0052      	lsls	r2, r2, #1
 8000fea:	2103      	movs	r1, #3
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	7979      	ldrb	r1, [r7, #5]
 8000ff6:	79ba      	ldrb	r2, [r7, #6]
 8000ff8:	0052      	lsls	r2, r2, #1
 8000ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffe:	4611      	mov	r1, r2
 8001000:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <DIO_setupPinMode+0x1b4>)
 8001002:	430b      	orrs	r3, r1
 8001004:	6013      	str	r3, [r2, #0]
			break;
 8001006:	bf00      	nop
		}
	}

	return Ret_Val;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	48000400 	.word	0x48000400
 800101c:	48000800 	.word	0x48000800
 8001020:	48000c00 	.word	0x48000c00
 8001024:	48001000 	.word	0x48001000
 8001028:	48001400 	.word	0x48001400
 800102c:	48001800 	.word	0x48001800
 8001030:	48001c00 	.word	0x48001c00

08001034 <DIO_writePin>:

STD_ReturnState DIO_writePin(DIO_PortID portID, DIO_PinID pinID, DIO_PinLevel pinLevel)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	460b      	mov	r3, r1
 8001040:	71bb      	strb	r3, [r7, #6]
 8001042:	4613      	mov	r3, r2
 8001044:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b07      	cmp	r3, #7
 800104e:	d802      	bhi.n	8001056 <DIO_writePin+0x22>
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	2b0e      	cmp	r3, #14
 8001054:	d902      	bls.n	800105c <DIO_writePin+0x28>
	{
		Ret_Val = E_NOT_OK;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e0df      	b.n	800121c <DIO_writePin+0x1e8>
	}

	else
	{
		switch(portID)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b07      	cmp	r3, #7
 8001060:	f200 80dc 	bhi.w	800121c <DIO_writePin+0x1e8>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <DIO_writePin+0x38>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	0800108d 	.word	0x0800108d
 8001070:	080010bf 	.word	0x080010bf
 8001074:	080010f1 	.word	0x080010f1
 8001078:	08001123 	.word	0x08001123
 800107c:	08001155 	.word	0x08001155
 8001080:	08001187 	.word	0x08001187
 8001084:	080011b9 	.word	0x080011b9
 8001088:	080011eb 	.word	0x080011eb
		{
		case PORTA_ID:
			if(pinLevel == LOGIC_LOW)
 800108c:	797b      	ldrb	r3, [r7, #5]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10a      	bne.n	80010a8 <DIO_writePin+0x74>
			{
				CLEAR_BIT(DIOA_ODR_REG, pinID);
 8001092:	4b66      	ldr	r3, [pc, #408]	; (800122c <DIO_writePin+0x1f8>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	4962      	ldr	r1, [pc, #392]	; (800122c <DIO_writePin+0x1f8>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOA_ODR_REG, pinID);
			}
			break;
 80010a6:	e0b9      	b.n	800121c <DIO_writePin+0x1e8>
				SET_BIT(DIOA_ODR_REG, pinID);
 80010a8:	4b60      	ldr	r3, [pc, #384]	; (800122c <DIO_writePin+0x1f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	79ba      	ldrb	r2, [r7, #6]
 80010ae:	2101      	movs	r1, #1
 80010b0:	fa01 f202 	lsl.w	r2, r1, r2
 80010b4:	4611      	mov	r1, r2
 80010b6:	4a5d      	ldr	r2, [pc, #372]	; (800122c <DIO_writePin+0x1f8>)
 80010b8:	430b      	orrs	r3, r1
 80010ba:	6013      	str	r3, [r2, #0]
			break;
 80010bc:	e0ae      	b.n	800121c <DIO_writePin+0x1e8>

		case PORTB_ID:
			if(pinLevel == LOGIC_LOW)
 80010be:	797b      	ldrb	r3, [r7, #5]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10a      	bne.n	80010da <DIO_writePin+0xa6>
			{
				CLEAR_BIT(DIOB_ODR_REG, pinID);
 80010c4:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <DIO_writePin+0x1fc>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4957      	ldr	r1, [pc, #348]	; (8001230 <DIO_writePin+0x1fc>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOB_ODR_REG, pinID);
			}
			break;
 80010d8:	e0a0      	b.n	800121c <DIO_writePin+0x1e8>
				SET_BIT(DIOB_ODR_REG, pinID);
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <DIO_writePin+0x1fc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	79ba      	ldrb	r2, [r7, #6]
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	4611      	mov	r1, r2
 80010e8:	4a51      	ldr	r2, [pc, #324]	; (8001230 <DIO_writePin+0x1fc>)
 80010ea:	430b      	orrs	r3, r1
 80010ec:	6013      	str	r3, [r2, #0]
			break;
 80010ee:	e095      	b.n	800121c <DIO_writePin+0x1e8>

		case PORTC_ID:
			if(pinLevel == LOGIC_LOW)
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10a      	bne.n	800110c <DIO_writePin+0xd8>
			{
				CLEAR_BIT(DIOC_ODR_REG, pinID);
 80010f6:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <DIO_writePin+0x200>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	79bb      	ldrb	r3, [r7, #6]
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	494b      	ldr	r1, [pc, #300]	; (8001234 <DIO_writePin+0x200>)
 8001106:	4013      	ands	r3, r2
 8001108:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOC_ODR_REG, pinID);
			}
			break;
 800110a:	e087      	b.n	800121c <DIO_writePin+0x1e8>
				SET_BIT(DIOC_ODR_REG, pinID);
 800110c:	4b49      	ldr	r3, [pc, #292]	; (8001234 <DIO_writePin+0x200>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	79ba      	ldrb	r2, [r7, #6]
 8001112:	2101      	movs	r1, #1
 8001114:	fa01 f202 	lsl.w	r2, r1, r2
 8001118:	4611      	mov	r1, r2
 800111a:	4a46      	ldr	r2, [pc, #280]	; (8001234 <DIO_writePin+0x200>)
 800111c:	430b      	orrs	r3, r1
 800111e:	6013      	str	r3, [r2, #0]
			break;
 8001120:	e07c      	b.n	800121c <DIO_writePin+0x1e8>

		case PORTD_ID:
			if(pinLevel == LOGIC_LOW)
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10a      	bne.n	800113e <DIO_writePin+0x10a>
			{
				CLEAR_BIT(DIOD_ODR_REG, pinID);
 8001128:	4b43      	ldr	r3, [pc, #268]	; (8001238 <DIO_writePin+0x204>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	4940      	ldr	r1, [pc, #256]	; (8001238 <DIO_writePin+0x204>)
 8001138:	4013      	ands	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOD_ODR_REG, pinID);
			}
			break;
 800113c:	e06e      	b.n	800121c <DIO_writePin+0x1e8>
				SET_BIT(DIOD_ODR_REG, pinID);
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <DIO_writePin+0x204>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	79ba      	ldrb	r2, [r7, #6]
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	4611      	mov	r1, r2
 800114c:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <DIO_writePin+0x204>)
 800114e:	430b      	orrs	r3, r1
 8001150:	6013      	str	r3, [r2, #0]
			break;
 8001152:	e063      	b.n	800121c <DIO_writePin+0x1e8>

		case PORTE_ID:
			if(pinLevel == LOGIC_LOW)
 8001154:	797b      	ldrb	r3, [r7, #5]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10a      	bne.n	8001170 <DIO_writePin+0x13c>
			{
				CLEAR_BIT(DIOE_ODR_REG, pinID);
 800115a:	4b38      	ldr	r3, [pc, #224]	; (800123c <DIO_writePin+0x208>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	4934      	ldr	r1, [pc, #208]	; (800123c <DIO_writePin+0x208>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOE_ODR_REG, pinID);
			}
			break;
 800116e:	e055      	b.n	800121c <DIO_writePin+0x1e8>
				SET_BIT(DIOE_ODR_REG, pinID);
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <DIO_writePin+0x208>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	79ba      	ldrb	r2, [r7, #6]
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	4611      	mov	r1, r2
 800117e:	4a2f      	ldr	r2, [pc, #188]	; (800123c <DIO_writePin+0x208>)
 8001180:	430b      	orrs	r3, r1
 8001182:	6013      	str	r3, [r2, #0]
			break;
 8001184:	e04a      	b.n	800121c <DIO_writePin+0x1e8>

		case PORTF_ID:
			if(pinLevel == LOGIC_LOW)
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10a      	bne.n	80011a2 <DIO_writePin+0x16e>
			{
				CLEAR_BIT(DIOF_ODR_REG, pinID);
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <DIO_writePin+0x20c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	4929      	ldr	r1, [pc, #164]	; (8001240 <DIO_writePin+0x20c>)
 800119c:	4013      	ands	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOF_ODR_REG, pinID);
			}
			break;
 80011a0:	e03c      	b.n	800121c <DIO_writePin+0x1e8>
				SET_BIT(DIOF_ODR_REG, pinID);
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <DIO_writePin+0x20c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	79ba      	ldrb	r2, [r7, #6]
 80011a8:	2101      	movs	r1, #1
 80011aa:	fa01 f202 	lsl.w	r2, r1, r2
 80011ae:	4611      	mov	r1, r2
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <DIO_writePin+0x20c>)
 80011b2:	430b      	orrs	r3, r1
 80011b4:	6013      	str	r3, [r2, #0]
			break;
 80011b6:	e031      	b.n	800121c <DIO_writePin+0x1e8>

		case PORTG_ID:
			if(pinLevel == LOGIC_LOW)
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10a      	bne.n	80011d4 <DIO_writePin+0x1a0>
			{
				CLEAR_BIT(DIOG_ODR_REG, pinID);
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <DIO_writePin+0x210>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	491d      	ldr	r1, [pc, #116]	; (8001244 <DIO_writePin+0x210>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOG_ODR_REG, pinID);
			}
			break;
 80011d2:	e023      	b.n	800121c <DIO_writePin+0x1e8>
				SET_BIT(DIOG_ODR_REG, pinID);
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <DIO_writePin+0x210>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	4611      	mov	r1, r2
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <DIO_writePin+0x210>)
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6013      	str	r3, [r2, #0]
			break;
 80011e8:	e018      	b.n	800121c <DIO_writePin+0x1e8>

		case PORTH_ID:
			if(pinLevel == LOGIC_LOW)
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10a      	bne.n	8001206 <DIO_writePin+0x1d2>
			{
				CLEAR_BIT(DIOH_ODR_REG, pinID);
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <DIO_writePin+0x214>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4912      	ldr	r1, [pc, #72]	; (8001248 <DIO_writePin+0x214>)
 8001200:	4013      	ands	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOH_ODR_REG, pinID);
			}
			break;
 8001204:	e009      	b.n	800121a <DIO_writePin+0x1e6>
				SET_BIT(DIOH_ODR_REG, pinID);
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <DIO_writePin+0x214>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f202 	lsl.w	r2, r1, r2
 8001212:	4611      	mov	r1, r2
 8001214:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <DIO_writePin+0x214>)
 8001216:	430b      	orrs	r3, r1
 8001218:	6013      	str	r3, [r2, #0]
			break;
 800121a:	bf00      	nop
		}
	}

	return Ret_Val;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	48000014 	.word	0x48000014
 8001230:	48000414 	.word	0x48000414
 8001234:	48000814 	.word	0x48000814
 8001238:	48000c14 	.word	0x48000c14
 800123c:	48001014 	.word	0x48001014
 8001240:	48001414 	.word	0x48001414
 8001244:	48001814 	.word	0x48001814
 8001248:	48001c14 	.word	0x48001c14

0800124c <DIO_setAlternateFunction>:

	return Ret_Val;
}

STD_ReturnState DIO_setAlternateFunction (DIO_PortID portID, DIO_PinID pinID, DIO_AltFuncID altFunID)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	460b      	mov	r3, r1
 8001258:	71bb      	strb	r3, [r7, #6]
 800125a:	4613      	mov	r3, r2
 800125c:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b07      	cmp	r3, #7
 8001266:	d802      	bhi.n	800126e <DIO_setAlternateFunction+0x22>
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2b0e      	cmp	r3, #14
 800126c:	d902      	bls.n	8001274 <DIO_setAlternateFunction+0x28>
	{
		Ret_Val = E_NOT_OK;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e16f      	b.n	8001554 <DIO_setAlternateFunction+0x308>
	}

	else if(pinID >= PIN0_ID && pinID <= PIN7_ID)
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	2b07      	cmp	r3, #7
 8001278:	f200 80b1 	bhi.w	80013de <DIO_setAlternateFunction+0x192>
	{
		switch (portID)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b07      	cmp	r3, #7
 8001280:	f200 8168 	bhi.w	8001554 <DIO_setAlternateFunction+0x308>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <DIO_setAlternateFunction+0x40>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	080012ad 	.word	0x080012ad
 8001290:	080012d3 	.word	0x080012d3
 8001294:	080012f9 	.word	0x080012f9
 8001298:	0800131f 	.word	0x0800131f
 800129c:	08001345 	.word	0x08001345
 80012a0:	0800136b 	.word	0x0800136b
 80012a4:	08001391 	.word	0x08001391
 80012a8:	080013b7 	.word	0x080013b7
		{
		case PORTA_ID:
			DIOA_AFRL_REG = (DIOA_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80012ac:	4bad      	ldr	r3, [pc, #692]	; (8001564 <DIO_setAlternateFunction+0x318>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	79ba      	ldrb	r2, [r7, #6]
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	210f      	movs	r1, #15
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	43d2      	mvns	r2, r2
 80012bc:	4013      	ands	r3, r2
 80012be:	7979      	ldrb	r1, [r7, #5]
 80012c0:	79ba      	ldrb	r2, [r7, #6]
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	4611      	mov	r1, r2
 80012ca:	4aa6      	ldr	r2, [pc, #664]	; (8001564 <DIO_setAlternateFunction+0x318>)
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6013      	str	r3, [r2, #0]
			break;
 80012d0:	e140      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRL_REG = (DIOB_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80012d2:	4ba5      	ldr	r3, [pc, #660]	; (8001568 <DIO_setAlternateFunction+0x31c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	79ba      	ldrb	r2, [r7, #6]
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	210f      	movs	r1, #15
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	4013      	ands	r3, r2
 80012e4:	7979      	ldrb	r1, [r7, #5]
 80012e6:	79ba      	ldrb	r2, [r7, #6]
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	4611      	mov	r1, r2
 80012f0:	4a9d      	ldr	r2, [pc, #628]	; (8001568 <DIO_setAlternateFunction+0x31c>)
 80012f2:	430b      	orrs	r3, r1
 80012f4:	6013      	str	r3, [r2, #0]
			break;
 80012f6:	e12d      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRL_REG = (DIOC_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80012f8:	4b9c      	ldr	r3, [pc, #624]	; (800156c <DIO_setAlternateFunction+0x320>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	79ba      	ldrb	r2, [r7, #6]
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	210f      	movs	r1, #15
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	43d2      	mvns	r2, r2
 8001308:	4013      	ands	r3, r2
 800130a:	7979      	ldrb	r1, [r7, #5]
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	4611      	mov	r1, r2
 8001316:	4a95      	ldr	r2, [pc, #596]	; (800156c <DIO_setAlternateFunction+0x320>)
 8001318:	430b      	orrs	r3, r1
 800131a:	6013      	str	r3, [r2, #0]
			break;
 800131c:	e11a      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRL_REG = (DIOD_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800131e:	4b94      	ldr	r3, [pc, #592]	; (8001570 <DIO_setAlternateFunction+0x324>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	79ba      	ldrb	r2, [r7, #6]
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	210f      	movs	r1, #15
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	43d2      	mvns	r2, r2
 800132e:	4013      	ands	r3, r2
 8001330:	7979      	ldrb	r1, [r7, #5]
 8001332:	79ba      	ldrb	r2, [r7, #6]
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4611      	mov	r1, r2
 800133c:	4a8c      	ldr	r2, [pc, #560]	; (8001570 <DIO_setAlternateFunction+0x324>)
 800133e:	430b      	orrs	r3, r1
 8001340:	6013      	str	r3, [r2, #0]
			break;
 8001342:	e107      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRL_REG = (DIOE_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001344:	4b8b      	ldr	r3, [pc, #556]	; (8001574 <DIO_setAlternateFunction+0x328>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	79ba      	ldrb	r2, [r7, #6]
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	210f      	movs	r1, #15
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	43d2      	mvns	r2, r2
 8001354:	4013      	ands	r3, r2
 8001356:	7979      	ldrb	r1, [r7, #5]
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	4611      	mov	r1, r2
 8001362:	4a84      	ldr	r2, [pc, #528]	; (8001574 <DIO_setAlternateFunction+0x328>)
 8001364:	430b      	orrs	r3, r1
 8001366:	6013      	str	r3, [r2, #0]
			break;
 8001368:	e0f4      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRL_REG = (DIOF_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800136a:	4b83      	ldr	r3, [pc, #524]	; (8001578 <DIO_setAlternateFunction+0x32c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	79ba      	ldrb	r2, [r7, #6]
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	210f      	movs	r1, #15
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	43d2      	mvns	r2, r2
 800137a:	4013      	ands	r3, r2
 800137c:	7979      	ldrb	r1, [r7, #5]
 800137e:	79ba      	ldrb	r2, [r7, #6]
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	4611      	mov	r1, r2
 8001388:	4a7b      	ldr	r2, [pc, #492]	; (8001578 <DIO_setAlternateFunction+0x32c>)
 800138a:	430b      	orrs	r3, r1
 800138c:	6013      	str	r3, [r2, #0]
			break;
 800138e:	e0e1      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRL_REG = (DIOG_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001390:	4b7a      	ldr	r3, [pc, #488]	; (800157c <DIO_setAlternateFunction+0x330>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	79ba      	ldrb	r2, [r7, #6]
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	210f      	movs	r1, #15
 800139a:	fa01 f202 	lsl.w	r2, r1, r2
 800139e:	43d2      	mvns	r2, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	7979      	ldrb	r1, [r7, #5]
 80013a4:	79ba      	ldrb	r2, [r7, #6]
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ac:	4611      	mov	r1, r2
 80013ae:	4a73      	ldr	r2, [pc, #460]	; (800157c <DIO_setAlternateFunction+0x330>)
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6013      	str	r3, [r2, #0]
			break;
 80013b4:	e0ce      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRL_REG = (DIOH_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <DIO_setAlternateFunction+0x334>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	79ba      	ldrb	r2, [r7, #6]
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	210f      	movs	r1, #15
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	43d2      	mvns	r2, r2
 80013c6:	4013      	ands	r3, r2
 80013c8:	7979      	ldrb	r1, [r7, #5]
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4a6a      	ldr	r2, [pc, #424]	; (8001580 <DIO_setAlternateFunction+0x334>)
 80013d6:	430b      	orrs	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
			break;
 80013da:	bf00      	nop
 80013dc:	e0ba      	b.n	8001554 <DIO_setAlternateFunction+0x308>
		}
	}

	else if(pinID >= PIN8_ID && pinID <= PIN15_ID)
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	f240 80b7 	bls.w	8001554 <DIO_setAlternateFunction+0x308>
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	f200 80b3 	bhi.w	8001554 <DIO_setAlternateFunction+0x308>
	{
		pinID = pinID - 8;
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	3b08      	subs	r3, #8
 80013f2:	71bb      	strb	r3, [r7, #6]

		switch (portID)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	f200 80ac 	bhi.w	8001554 <DIO_setAlternateFunction+0x308>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <DIO_setAlternateFunction+0x1b8>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001425 	.word	0x08001425
 8001408:	0800144b 	.word	0x0800144b
 800140c:	08001471 	.word	0x08001471
 8001410:	08001497 	.word	0x08001497
 8001414:	080014bd 	.word	0x080014bd
 8001418:	080014e3 	.word	0x080014e3
 800141c:	08001509 	.word	0x08001509
 8001420:	0800152f 	.word	0x0800152f
		{
		case PORTA_ID:
			DIOA_AFRH_REG = (DIOA_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001424:	4b57      	ldr	r3, [pc, #348]	; (8001584 <DIO_setAlternateFunction+0x338>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	79ba      	ldrb	r2, [r7, #6]
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	210f      	movs	r1, #15
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	43d2      	mvns	r2, r2
 8001434:	4013      	ands	r3, r2
 8001436:	7979      	ldrb	r1, [r7, #5]
 8001438:	79ba      	ldrb	r2, [r7, #6]
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	4611      	mov	r1, r2
 8001442:	4a50      	ldr	r2, [pc, #320]	; (8001584 <DIO_setAlternateFunction+0x338>)
 8001444:	430b      	orrs	r3, r1
 8001446:	6013      	str	r3, [r2, #0]
			break;
 8001448:	e084      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRH_REG = (DIOB_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <DIO_setAlternateFunction+0x33c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	79ba      	ldrb	r2, [r7, #6]
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	210f      	movs	r1, #15
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	43d2      	mvns	r2, r2
 800145a:	4013      	ands	r3, r2
 800145c:	7979      	ldrb	r1, [r7, #5]
 800145e:	79ba      	ldrb	r2, [r7, #6]
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4611      	mov	r1, r2
 8001468:	4a47      	ldr	r2, [pc, #284]	; (8001588 <DIO_setAlternateFunction+0x33c>)
 800146a:	430b      	orrs	r3, r1
 800146c:	6013      	str	r3, [r2, #0]
			break;
 800146e:	e071      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRH_REG = (DIOC_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001470:	4b46      	ldr	r3, [pc, #280]	; (800158c <DIO_setAlternateFunction+0x340>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	79ba      	ldrb	r2, [r7, #6]
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	210f      	movs	r1, #15
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	43d2      	mvns	r2, r2
 8001480:	4013      	ands	r3, r2
 8001482:	7979      	ldrb	r1, [r7, #5]
 8001484:	79ba      	ldrb	r2, [r7, #6]
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	fa01 f202 	lsl.w	r2, r1, r2
 800148c:	4611      	mov	r1, r2
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <DIO_setAlternateFunction+0x340>)
 8001490:	430b      	orrs	r3, r1
 8001492:	6013      	str	r3, [r2, #0]
			break;
 8001494:	e05e      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRH_REG = (DIOD_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <DIO_setAlternateFunction+0x344>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	79ba      	ldrb	r2, [r7, #6]
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	210f      	movs	r1, #15
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	4013      	ands	r3, r2
 80014a8:	7979      	ldrb	r1, [r7, #5]
 80014aa:	79ba      	ldrb	r2, [r7, #6]
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	4611      	mov	r1, r2
 80014b4:	4a36      	ldr	r2, [pc, #216]	; (8001590 <DIO_setAlternateFunction+0x344>)
 80014b6:	430b      	orrs	r3, r1
 80014b8:	6013      	str	r3, [r2, #0]
			break;
 80014ba:	e04b      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRH_REG = (DIOE_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <DIO_setAlternateFunction+0x348>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	79ba      	ldrb	r2, [r7, #6]
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	210f      	movs	r1, #15
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	43d2      	mvns	r2, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	7979      	ldrb	r1, [r7, #5]
 80014d0:	79ba      	ldrb	r2, [r7, #6]
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	4611      	mov	r1, r2
 80014da:	4a2e      	ldr	r2, [pc, #184]	; (8001594 <DIO_setAlternateFunction+0x348>)
 80014dc:	430b      	orrs	r3, r1
 80014de:	6013      	str	r3, [r2, #0]
			break;
 80014e0:	e038      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRH_REG = (DIOF_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <DIO_setAlternateFunction+0x34c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	79ba      	ldrb	r2, [r7, #6]
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	210f      	movs	r1, #15
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	43d2      	mvns	r2, r2
 80014f2:	4013      	ands	r3, r2
 80014f4:	7979      	ldrb	r1, [r7, #5]
 80014f6:	79ba      	ldrb	r2, [r7, #6]
 80014f8:	0092      	lsls	r2, r2, #2
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	4611      	mov	r1, r2
 8001500:	4a25      	ldr	r2, [pc, #148]	; (8001598 <DIO_setAlternateFunction+0x34c>)
 8001502:	430b      	orrs	r3, r1
 8001504:	6013      	str	r3, [r2, #0]
			break;
 8001506:	e025      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRH_REG = (DIOG_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <DIO_setAlternateFunction+0x350>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	79ba      	ldrb	r2, [r7, #6]
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	210f      	movs	r1, #15
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	43d2      	mvns	r2, r2
 8001518:	4013      	ands	r3, r2
 800151a:	7979      	ldrb	r1, [r7, #5]
 800151c:	79ba      	ldrb	r2, [r7, #6]
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	4611      	mov	r1, r2
 8001526:	4a1d      	ldr	r2, [pc, #116]	; (800159c <DIO_setAlternateFunction+0x350>)
 8001528:	430b      	orrs	r3, r1
 800152a:	6013      	str	r3, [r2, #0]
			break;
 800152c:	e012      	b.n	8001554 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRH_REG = (DIOH_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <DIO_setAlternateFunction+0x354>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	79ba      	ldrb	r2, [r7, #6]
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	210f      	movs	r1, #15
 8001538:	fa01 f202 	lsl.w	r2, r1, r2
 800153c:	43d2      	mvns	r2, r2
 800153e:	4013      	ands	r3, r2
 8001540:	7979      	ldrb	r1, [r7, #5]
 8001542:	79ba      	ldrb	r2, [r7, #6]
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	4611      	mov	r1, r2
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <DIO_setAlternateFunction+0x354>)
 800154e:	430b      	orrs	r3, r1
 8001550:	6013      	str	r3, [r2, #0]
			break;
 8001552:	bf00      	nop
		}
	}

	return Ret_Val;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	48000020 	.word	0x48000020
 8001568:	48000420 	.word	0x48000420
 800156c:	48000820 	.word	0x48000820
 8001570:	48000c20 	.word	0x48000c20
 8001574:	48001020 	.word	0x48001020
 8001578:	48001420 	.word	0x48001420
 800157c:	48001820 	.word	0x48001820
 8001580:	48001c20 	.word	0x48001c20
 8001584:	48000024 	.word	0x48000024
 8001588:	48000424 	.word	0x48000424
 800158c:	48000824 	.word	0x48000824
 8001590:	48000c24 	.word	0x48000c24
 8001594:	48001024 	.word	0x48001024
 8001598:	48001424 	.word	0x48001424
 800159c:	48001824 	.word	0x48001824
 80015a0:	48001c24 	.word	0x48001c24

080015a4 <SysTick_Handler>:


static volatile void(*g_callBackPtr)(void) = NULLPTR;

void SysTick_Handler (void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	if(g_callBackPtr != NULLPTR)
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Handler+0x18>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <SysTick_Handler+0x12>
	{
		(*g_callBackPtr)();
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <SysTick_Handler+0x18>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4798      	blx	r3
	}
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000038 	.word	0x20000038

080015c0 <sysTick_init>:

void sysTick_init(systick_clock_t clock, void (*fPtr)(void))
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
	if(fPtr != NULLPTR)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <sysTick_init+0x20>
	{
		CLEAR_BIT(SYSTICK_STK_CTRL_REG, 1);
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <sysTick_init+0x50>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <sysTick_init+0x50>)
 80015d8:	f023 0302 	bic.w	r3, r3, #2
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e008      	b.n	80015f2 <sysTick_init+0x32>
	}
	else
	{
		SET_BIT(SYSTICK_STK_CTRL_REG, 1);
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <sysTick_init+0x50>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <sysTick_init+0x50>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	6013      	str	r3, [r2, #0]
		g_callBackPtr = fPtr;
 80015ec:	4a09      	ldr	r2, [pc, #36]	; (8001614 <sysTick_init+0x54>)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6013      	str	r3, [r2, #0]
	}

	SYSTICK_STK_CTRL_REG |= (clock<<2);
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <sysTick_init+0x50>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4611      	mov	r1, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <sysTick_init+0x50>)
 80015fe:	430b      	orrs	r3, r1
 8001600:	6013      	str	r3, [r2, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010
 8001614:	20000038 	.word	0x20000038

08001618 <sysTick_start>:

void sysTick_start(u32 loadVal)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	SYSTICK_STK_LOAD_REG = loadVal;
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <sysTick_start+0x38>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]

	SET_BIT(SYSTICK_STK_CTRL_REG, 0);
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <sysTick_start+0x3c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <sysTick_start+0x3c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6013      	str	r3, [r2, #0]

	while(CHECK_BIT(SYSTICK_STK_CTRL_REG,16) == 0 )
 8001632:	bf00      	nop
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <sysTick_start+0x3c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f8      	beq.n	8001634 <sysTick_start+0x1c>
	{
		;
	}
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e014 	.word	0xe000e014
 8001654:	e000e010 	.word	0xe000e010

08001658 <__libc_init_array>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	4e0d      	ldr	r6, [pc, #52]	; (8001690 <__libc_init_array+0x38>)
 800165c:	4c0d      	ldr	r4, [pc, #52]	; (8001694 <__libc_init_array+0x3c>)
 800165e:	1ba4      	subs	r4, r4, r6
 8001660:	10a4      	asrs	r4, r4, #2
 8001662:	2500      	movs	r5, #0
 8001664:	42a5      	cmp	r5, r4
 8001666:	d109      	bne.n	800167c <__libc_init_array+0x24>
 8001668:	4e0b      	ldr	r6, [pc, #44]	; (8001698 <__libc_init_array+0x40>)
 800166a:	4c0c      	ldr	r4, [pc, #48]	; (800169c <__libc_init_array+0x44>)
 800166c:	f000 f818 	bl	80016a0 <_init>
 8001670:	1ba4      	subs	r4, r4, r6
 8001672:	10a4      	asrs	r4, r4, #2
 8001674:	2500      	movs	r5, #0
 8001676:	42a5      	cmp	r5, r4
 8001678:	d105      	bne.n	8001686 <__libc_init_array+0x2e>
 800167a:	bd70      	pop	{r4, r5, r6, pc}
 800167c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001680:	4798      	blx	r3
 8001682:	3501      	adds	r5, #1
 8001684:	e7ee      	b.n	8001664 <__libc_init_array+0xc>
 8001686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800168a:	4798      	blx	r3
 800168c:	3501      	adds	r5, #1
 800168e:	e7f2      	b.n	8001676 <__libc_init_array+0x1e>
 8001690:	080016b8 	.word	0x080016b8
 8001694:	080016b8 	.word	0x080016b8
 8001698:	080016b8 	.word	0x080016b8
 800169c:	080016bc 	.word	0x080016bc

080016a0 <_init>:
 80016a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a2:	bf00      	nop
 80016a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a6:	bc08      	pop	{r3}
 80016a8:	469e      	mov	lr, r3
 80016aa:	4770      	bx	lr

080016ac <_fini>:
 80016ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ae:	bf00      	nop
 80016b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b2:	bc08      	pop	{r3}
 80016b4:	469e      	mov	lr, r3
 80016b6:	4770      	bx	lr
