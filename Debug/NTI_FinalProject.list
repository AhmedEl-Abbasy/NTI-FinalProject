
NTI_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b3c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd0  08000cd0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd0  08000cd0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd0  08000cd0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd0  08000cd0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd0  08000cd0  00010cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0000001c  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d42  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000004c2  00000000  00000000  00020d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000180  00000000  00000000  00021250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000118  00000000  00000000  000213d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000055a  00000000  00000000  000214e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000b45  00000000  00000000  00021a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000069d1  00000000  00000000  00022587  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00028f58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000430  00000000  00000000  00028fd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000cb8 	.word	0x08000cb8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08000cb8 	.word	0x08000cb8

080001d4 <ICU_INT_CheckStatus>:

}


STD_ReturnState ICU_INT_CheckStatus(ICU_Channel channel)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState state;

	switch(channel)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b05      	cmp	r3, #5
 80001e2:	d86f      	bhi.n	80002c4 <ICU_INT_CheckStatus+0xf0>
 80001e4:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <ICU_INT_CheckStatus+0x18>)
 80001e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ea:	bf00      	nop
 80001ec:	08000205 	.word	0x08000205
 80001f0:	08000225 	.word	0x08000225
 80001f4:	08000245 	.word	0x08000245
 80001f8:	08000265 	.word	0x08000265
 80001fc:	08000285 	.word	0x08000285
 8000200:	080002a5 	.word	0x080002a5
	{
	   case channel_1:
		   state = CHECK_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 8000204:	4b33      	ldr	r3, [pc, #204]	; (80002d4 <ICU_INT_CheckStatus+0x100>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	085b      	lsrs	r3, r3, #1
 800020a:	b2db      	uxtb	r3, r3
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	73fb      	strb	r3, [r7, #15]
		   if( state == 0 )
 8000212:	7bfb      	ldrb	r3, [r7, #15]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d102      	bne.n	800021e <ICU_INT_CheckStatus+0x4a>
		   	{
		   	   state = RET_NOK;
 8000218:	2301      	movs	r3, #1
 800021a:	73fb      	strb	r3, [r7, #15]
		   	}
		   	else
		   	{
			   state = RET_OK;
			}
	   break;
 800021c:	e052      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
			   state = RET_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	73fb      	strb	r3, [r7, #15]
	   break;
 8000222:	e04f      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
	   case channel_2:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8000224:	4b2b      	ldr	r3, [pc, #172]	; (80002d4 <ICU_INT_CheckStatus+0x100>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	089b      	lsrs	r3, r3, #2
 800022a:	b2db      	uxtb	r3, r3
 800022c:	f003 0301 	and.w	r3, r3, #1
 8000230:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8000232:	7bfb      	ldrb	r3, [r7, #15]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d102      	bne.n	800023e <ICU_INT_CheckStatus+0x6a>
	   	   {
	   		   state = RET_NOK;
 8000238:	2301      	movs	r3, #1
 800023a:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 800023c:	e042      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800023e:	2300      	movs	r3, #0
 8000240:	73fb      	strb	r3, [r7, #15]
	   break;
 8000242:	e03f      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
	   case channel_3:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC3IF_BIT_3 );
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <ICU_INT_CheckStatus+0x100>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	08db      	lsrs	r3, r3, #3
 800024a:	b2db      	uxtb	r3, r3
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8000252:	7bfb      	ldrb	r3, [r7, #15]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d102      	bne.n	800025e <ICU_INT_CheckStatus+0x8a>
	   	   {
	   		   state = RET_NOK;
 8000258:	2301      	movs	r3, #1
 800025a:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 800025c:	e032      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800025e:	2300      	movs	r3, #0
 8000260:	73fb      	strb	r3, [r7, #15]
	   break;
 8000262:	e02f      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
	   case channel_4:
		   state = CHECK_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8000264:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <ICU_INT_CheckStatus+0x104>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	085b      	lsrs	r3, r3, #1
 800026a:	b2db      	uxtb	r3, r3
 800026c:	f003 0301 	and.w	r3, r3, #1
 8000270:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <ICU_INT_CheckStatus+0xaa>
	   	   {
	   		   state = RET_NOK;
 8000278:	2301      	movs	r3, #1
 800027a:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 800027c:	e022      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800027e:	2300      	movs	r3, #0
 8000280:	73fb      	strb	r3, [r7, #15]
	   break;
 8000282:	e01f      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
	   case channel_5:
		   state = CHECK_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <ICU_INT_CheckStatus+0x104>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	089b      	lsrs	r3, r3, #2
 800028a:	b2db      	uxtb	r3, r3
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8000292:	7bfb      	ldrb	r3, [r7, #15]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d102      	bne.n	800029e <ICU_INT_CheckStatus+0xca>
	   	   {
	   		   state = RET_NOK;
 8000298:	2301      	movs	r3, #1
 800029a:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 800029c:	e012      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
	   break;
 80002a2:	e00f      	b.n	80002c4 <ICU_INT_CheckStatus+0xf0>
	   case channel_6:
		   state = CHECK_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <ICU_INT_CheckStatus+0x104>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	08db      	lsrs	r3, r3, #3
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d102      	bne.n	80002be <ICU_INT_CheckStatus+0xea>
	   	   {
	   		   state = RET_NOK;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 80002bc:	e001      	b.n	80002c2 <ICU_INT_CheckStatus+0xee>
			  state = RET_OK;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
	   break;
 80002c2:	bf00      	nop

	}

	return state;
 80002c4:	7bfb      	ldrb	r3, [r7, #15]

}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40013410 	.word	0x40013410
 80002d8:	40012c10 	.word	0x40012c10

080002dc <TIM8_CC_IRQHandler>:
}


//TIM8_CC_IRQHandler
void TIM8_CC_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0

	if ( ICU_INT_CheckStatus(channel_1 ) == RET_OK  )
 80002e0:	2000      	movs	r0, #0
 80002e2:	f7ff ff77 	bl	80001d4 <ICU_INT_CheckStatus>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d10c      	bne.n	8000306 <TIM8_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <TIM8_CC_IRQHandler+0x7c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a19      	ldr	r2, [pc, #100]	; (8000358 <TIM8_CC_IRQHandler+0x7c>)
 80002f2:	f023 0302 	bic.w	r3, r3, #2
 80002f6:	6013      	str	r3, [r2, #0]
		if( Channel_1_CLB_Ptr != (void*)RET_NULLPTR )
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <TIM8_CC_IRQHandler+0x80>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	d002      	beq.n	8000306 <TIM8_CC_IRQHandler+0x2a>
		{
			Channel_1_CLB_Ptr();
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <TIM8_CC_IRQHandler+0x80>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_2 ) == RET_OK  )
 8000306:	2001      	movs	r0, #1
 8000308:	f7ff ff64 	bl	80001d4 <ICU_INT_CheckStatus>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d10c      	bne.n	800032c <TIM8_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <TIM8_CC_IRQHandler+0x7c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a10      	ldr	r2, [pc, #64]	; (8000358 <TIM8_CC_IRQHandler+0x7c>)
 8000318:	f023 0304 	bic.w	r3, r3, #4
 800031c:	6013      	str	r3, [r2, #0]
		if( Channel_2_CLB_Ptr != (void*)RET_NULLPTR )
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <TIM8_CC_IRQHandler+0x84>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b02      	cmp	r3, #2
 8000324:	d002      	beq.n	800032c <TIM8_CC_IRQHandler+0x50>
		{
			Channel_2_CLB_Ptr();
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <TIM8_CC_IRQHandler+0x84>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_3 ) == RET_OK  )
 800032c:	2002      	movs	r0, #2
 800032e:	f7ff ff51 	bl	80001d4 <ICU_INT_CheckStatus>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d10c      	bne.n	8000352 <TIM8_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM8_SR_REG ,CC3IF_BIT_3 );
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <TIM8_CC_IRQHandler+0x7c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <TIM8_CC_IRQHandler+0x7c>)
 800033e:	f023 0308 	bic.w	r3, r3, #8
 8000342:	6013      	str	r3, [r2, #0]
		if( Channel_3_CLB_Ptr != (void*)RET_NULLPTR )
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <TIM8_CC_IRQHandler+0x88>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d002      	beq.n	8000352 <TIM8_CC_IRQHandler+0x76>
		{
			Channel_3_CLB_Ptr();
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <TIM8_CC_IRQHandler+0x88>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4798      	blx	r3
		}
	}

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40013410 	.word	0x40013410
 800035c:	20000000 	.word	0x20000000
 8000360:	20000004 	.word	0x20000004
 8000364:	20000008 	.word	0x20000008

08000368 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	if ( ICU_INT_CheckStatus(channel_4 ) == RET_OK  )
 800036c:	2003      	movs	r0, #3
 800036e:	f7ff ff31 	bl	80001d4 <ICU_INT_CheckStatus>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d10c      	bne.n	8000392 <TIM1_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <TIM1_CC_IRQHandler+0x7c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <TIM1_CC_IRQHandler+0x7c>)
 800037e:	f023 0302 	bic.w	r3, r3, #2
 8000382:	6013      	str	r3, [r2, #0]
		if( Channel_4_CLB_Ptr != (void*)RET_NULLPTR )
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <TIM1_CC_IRQHandler+0x80>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b02      	cmp	r3, #2
 800038a:	d002      	beq.n	8000392 <TIM1_CC_IRQHandler+0x2a>
		{
			Channel_4_CLB_Ptr();
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <TIM1_CC_IRQHandler+0x80>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_5 ) == RET_OK  )
 8000392:	2004      	movs	r0, #4
 8000394:	f7ff ff1e 	bl	80001d4 <ICU_INT_CheckStatus>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d10c      	bne.n	80003b8 <TIM1_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <TIM1_CC_IRQHandler+0x7c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <TIM1_CC_IRQHandler+0x7c>)
 80003a4:	f023 0304 	bic.w	r3, r3, #4
 80003a8:	6013      	str	r3, [r2, #0]
		if( Channel_5_CLB_Ptr != (void*)RET_NULLPTR )
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <TIM1_CC_IRQHandler+0x84>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d002      	beq.n	80003b8 <TIM1_CC_IRQHandler+0x50>
		{
			Channel_5_CLB_Ptr();
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <TIM1_CC_IRQHandler+0x84>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_6 ) == RET_OK  )
 80003b8:	2005      	movs	r0, #5
 80003ba:	f7ff ff0b 	bl	80001d4 <ICU_INT_CheckStatus>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d10c      	bne.n	80003de <TIM1_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <TIM1_CC_IRQHandler+0x7c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a06      	ldr	r2, [pc, #24]	; (80003e4 <TIM1_CC_IRQHandler+0x7c>)
 80003ca:	f023 0308 	bic.w	r3, r3, #8
 80003ce:	6013      	str	r3, [r2, #0]
		if( Channel_6_CLB_Ptr != (void*)RET_NULLPTR )
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <TIM1_CC_IRQHandler+0x88>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d002      	beq.n	80003de <TIM1_CC_IRQHandler+0x76>
		{
			Channel_6_CLB_Ptr();
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <TIM1_CC_IRQHandler+0x88>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4798      	blx	r3
		}
	}
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40012c10 	.word	0x40012c10
 80003e8:	2000000c 	.word	0x2000000c
 80003ec:	20000010 	.word	0x20000010
 80003f0:	20000014 	.word	0x20000014

080003f4 <PWM_Init>:

#include "pwm.h"


void PWM_Init(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

	TIM2_PSC_REG = ( 800 - 1 ) ;			// tick = 100 micro sec
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <PWM_Init+0x64>)
 80003fa:	f240 321f 	movw	r2, #799	; 0x31f
 80003fe:	601a      	str	r2, [r3, #0]
	TIM2_ARR_REG = ( 100 - 1 ) ;			// reload evrey 10 mili sec  ==> freq = 10 mili sec
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <PWM_Init+0x68>)
 8000402:	2263      	movs	r2, #99	; 0x63
 8000404:	601a      	str	r2, [r3, #0]
	TIM2_CNT_REG = 0;
 8000406:	4b16      	ldr	r3, [pc, #88]	; (8000460 <PWM_Init+0x6c>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
	TIM2_CCMR1_REG |= WriteValue(6,OC1M_BIT_4_5_6);		//011
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <PWM_Init+0x70>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a14      	ldr	r2, [pc, #80]	; (8000464 <PWM_Init+0x70>)
 8000412:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000416:	6013      	str	r3, [r2, #0]
	TIM2_CCMR1_REG |= WriteValue(6,OC2M_BIT_12_13_14);	//011
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <PWM_Init+0x70>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <PWM_Init+0x70>)
 800041e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000422:	6013      	str	r3, [r2, #0]

	SET_BIT(TIM2_CCMR1_REG,OC1PE_BIT_3);
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <PWM_Init+0x70>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <PWM_Init+0x70>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6013      	str	r3, [r2, #0]
	SET_BIT(TIM2_CCMR1_REG,OC2PE_BIT_11);
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <PWM_Init+0x70>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <PWM_Init+0x70>)
 8000436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800043a:	6013      	str	r3, [r2, #0]

    SET_BIT(TIM2_CR1_REG,ARPE_BIT_7);
 800043c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044a:	6013      	str	r3, [r2, #0]

}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40000028 	.word	0x40000028
 800045c:	4000002c 	.word	0x4000002c
 8000460:	40000024 	.word	0x40000024
 8000464:	40000018 	.word	0x40000018

08000468 <PWM_Start>:

void PWM_Start(PWM_Channel  channel , u8 Duty)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	460a      	mov	r2, r1
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
	switch(channel )
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d002      	beq.n	8000484 <PWM_Start+0x1c>
 800047e:	2b01      	cmp	r3, #1
 8000480:	d016      	beq.n	80004b0 <PWM_Start+0x48>
 8000482:	e026      	b.n	80004d2 <PWM_Start+0x6a>
	{
    CLEAR_BIT(TIM2_CR1_REG,CEN_BIT_0);			// disable the timer
	case channel1:

		CLEAR_BIT(TIM2_CCER_REG , CC1E_BIT_0 );		// disable the channel
 8000484:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <PWM_Start+0x88>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a19      	ldr	r2, [pc, #100]	; (80004f0 <PWM_Start+0x88>)
 800048a:	f023 0301 	bic.w	r3, r3, #1
 800048e:	6013      	str	r3, [r2, #0]
		if(Duty == 0)
 8000490:	79bb      	ldrb	r3, [r7, #6]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <PWM_Start+0x32>
			Duty = 1;
 8000496:	2301      	movs	r3, #1
 8000498:	71bb      	strb	r3, [r7, #6]
		TIM2_CCR1_REG = ( ( Duty * 1 ) - 1 );
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <PWM_Start+0x8c>)
 80004a0:	601a      	str	r2, [r3, #0]
		SET_BIT(TIM2_CCER_REG , CC1E_BIT_0);		//enable the channel
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <PWM_Start+0x88>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <PWM_Start+0x88>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]

	break;
 80004ae:	e010      	b.n	80004d2 <PWM_Start+0x6a>
	case channel2:

		CLEAR_BIT(TIM2_CCER_REG , CC2E_BIT_4 );
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <PWM_Start+0x88>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <PWM_Start+0x88>)
 80004b6:	f023 0310 	bic.w	r3, r3, #16
 80004ba:	6013      	str	r3, [r2, #0]
		TIM2_CCR2_REG = ( ( Duty * 1 ) - 1 );
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	1e5a      	subs	r2, r3, #1
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <PWM_Start+0x90>)
 80004c2:	601a      	str	r2, [r3, #0]
		SET_BIT(TIM2_CCER_REG , CC2E_BIT_4);
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <PWM_Start+0x88>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <PWM_Start+0x88>)
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	6013      	str	r3, [r2, #0]

	break;
 80004d0:	bf00      	nop
	}
    SET_BIT(TIM2_CR1_REG,CEN_BIT_0);		//enable the timer
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6013      	str	r3, [r2, #0]

}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40000020 	.word	0x40000020
 80004f4:	40000034 	.word	0x40000034
 80004f8:	40000038 	.word	0x40000038

080004fc <DIO_setupPinMode>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
STD_ReturnState DIO_setupPinMode(DIO_PortID portID, DIO_PinID pinID, DIO_PinMode pinMode)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	460b      	mov	r3, r1
 8000508:	71bb      	strb	r3, [r7, #6]
 800050a:	4613      	mov	r3, r2
 800050c:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]

	if((portID >= NUM_OF_PORTS) || (pinID >= NUM_OF_PINS_PER_PORT))
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b07      	cmp	r3, #7
 8000516:	d802      	bhi.n	800051e <DIO_setupPinMode+0x22>
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2b0e      	cmp	r3, #14
 800051c:	d902      	bls.n	8000524 <DIO_setupPinMode+0x28>
	{
		Ret_Val = RET_NOK;
 800051e:	2301      	movs	r3, #1
 8000520:	73fb      	strb	r3, [r7, #15]
 8000522:	e0b1      	b.n	8000688 <DIO_setupPinMode+0x18c>
	}

	else
	{
		switch(portID)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b07      	cmp	r3, #7
 8000528:	f200 80ae 	bhi.w	8000688 <DIO_setupPinMode+0x18c>
 800052c:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <DIO_setupPinMode+0x38>)
 800052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000532:	bf00      	nop
 8000534:	08000555 	.word	0x08000555
 8000538:	0800057f 	.word	0x0800057f
 800053c:	080005a5 	.word	0x080005a5
 8000540:	080005cb 	.word	0x080005cb
 8000544:	080005f1 	.word	0x080005f1
 8000548:	08000617 	.word	0x08000617
 800054c:	0800063d 	.word	0x0800063d
 8000550:	08000663 	.word	0x08000663
		{
		case PORTA_ID:
			DIOA_MODER_REG = (DIOA_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	0052      	lsls	r2, r2, #1
 800055e:	2103      	movs	r1, #3
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	43d2      	mvns	r2, r2
 8000566:	4013      	ands	r3, r2
 8000568:	7979      	ldrb	r1, [r7, #5]
 800056a:	79ba      	ldrb	r2, [r7, #6]
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	fa01 f202 	lsl.w	r2, r1, r2
 8000572:	4611      	mov	r1, r2
 8000574:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000578:	430b      	orrs	r3, r1
 800057a:	6013      	str	r3, [r2, #0]
			break;
 800057c:	e084      	b.n	8000688 <DIO_setupPinMode+0x18c>

		case PORTB_ID:
			DIOB_MODER_REG = (DIOB_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 800057e:	4b46      	ldr	r3, [pc, #280]	; (8000698 <DIO_setupPinMode+0x19c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	79ba      	ldrb	r2, [r7, #6]
 8000584:	0052      	lsls	r2, r2, #1
 8000586:	2103      	movs	r1, #3
 8000588:	fa01 f202 	lsl.w	r2, r1, r2
 800058c:	43d2      	mvns	r2, r2
 800058e:	4013      	ands	r3, r2
 8000590:	7979      	ldrb	r1, [r7, #5]
 8000592:	79ba      	ldrb	r2, [r7, #6]
 8000594:	0052      	lsls	r2, r2, #1
 8000596:	fa01 f202 	lsl.w	r2, r1, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a3e      	ldr	r2, [pc, #248]	; (8000698 <DIO_setupPinMode+0x19c>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6013      	str	r3, [r2, #0]
			break;
 80005a2:	e071      	b.n	8000688 <DIO_setupPinMode+0x18c>

		case PORTC_ID:
			DIOC_MODER_REG = (DIOC_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80005a4:	4b3d      	ldr	r3, [pc, #244]	; (800069c <DIO_setupPinMode+0x1a0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	0052      	lsls	r2, r2, #1
 80005ac:	2103      	movs	r1, #3
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	43d2      	mvns	r2, r2
 80005b4:	4013      	ands	r3, r2
 80005b6:	7979      	ldrb	r1, [r7, #5]
 80005b8:	79ba      	ldrb	r2, [r7, #6]
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	fa01 f202 	lsl.w	r2, r1, r2
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a36      	ldr	r2, [pc, #216]	; (800069c <DIO_setupPinMode+0x1a0>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6013      	str	r3, [r2, #0]
			break;
 80005c8:	e05e      	b.n	8000688 <DIO_setupPinMode+0x18c>

		case PORTD_ID:
			DIOD_MODER_REG = (DIOD_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <DIO_setupPinMode+0x1a4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	79ba      	ldrb	r2, [r7, #6]
 80005d0:	0052      	lsls	r2, r2, #1
 80005d2:	2103      	movs	r1, #3
 80005d4:	fa01 f202 	lsl.w	r2, r1, r2
 80005d8:	43d2      	mvns	r2, r2
 80005da:	4013      	ands	r3, r2
 80005dc:	7979      	ldrb	r1, [r7, #5]
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	0052      	lsls	r2, r2, #1
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <DIO_setupPinMode+0x1a4>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6013      	str	r3, [r2, #0]
			break;
 80005ee:	e04b      	b.n	8000688 <DIO_setupPinMode+0x18c>

		case PORTE_ID:
			DIOE_MODER_REG = (DIOE_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <DIO_setupPinMode+0x1a8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	79ba      	ldrb	r2, [r7, #6]
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	2103      	movs	r1, #3
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	43d2      	mvns	r2, r2
 8000600:	4013      	ands	r3, r2
 8000602:	7979      	ldrb	r1, [r7, #5]
 8000604:	79ba      	ldrb	r2, [r7, #6]
 8000606:	0052      	lsls	r2, r2, #1
 8000608:	fa01 f202 	lsl.w	r2, r1, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <DIO_setupPinMode+0x1a8>)
 8000610:	430b      	orrs	r3, r1
 8000612:	6013      	str	r3, [r2, #0]
			break;
 8000614:	e038      	b.n	8000688 <DIO_setupPinMode+0x18c>

		case PORTF_ID:
			DIOF_MODER_REG = (DIOF_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <DIO_setupPinMode+0x1ac>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	79ba      	ldrb	r2, [r7, #6]
 800061c:	0052      	lsls	r2, r2, #1
 800061e:	2103      	movs	r1, #3
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	43d2      	mvns	r2, r2
 8000626:	4013      	ands	r3, r2
 8000628:	7979      	ldrb	r1, [r7, #5]
 800062a:	79ba      	ldrb	r2, [r7, #6]
 800062c:	0052      	lsls	r2, r2, #1
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	4611      	mov	r1, r2
 8000634:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <DIO_setupPinMode+0x1ac>)
 8000636:	430b      	orrs	r3, r1
 8000638:	6013      	str	r3, [r2, #0]
			break;
 800063a:	e025      	b.n	8000688 <DIO_setupPinMode+0x18c>

		case PORTG_ID:
			DIOG_MODER_REG = (DIOG_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <DIO_setupPinMode+0x1b0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	79ba      	ldrb	r2, [r7, #6]
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	2103      	movs	r1, #3
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	43d2      	mvns	r2, r2
 800064c:	4013      	ands	r3, r2
 800064e:	7979      	ldrb	r1, [r7, #5]
 8000650:	79ba      	ldrb	r2, [r7, #6]
 8000652:	0052      	lsls	r2, r2, #1
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <DIO_setupPinMode+0x1b0>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
			break;
 8000660:	e012      	b.n	8000688 <DIO_setupPinMode+0x18c>

		case PORTH_ID:
			DIOH_MODER_REG = (DIOH_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <DIO_setupPinMode+0x1b4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	79ba      	ldrb	r2, [r7, #6]
 8000668:	0052      	lsls	r2, r2, #1
 800066a:	2103      	movs	r1, #3
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	43d2      	mvns	r2, r2
 8000672:	4013      	ands	r3, r2
 8000674:	7979      	ldrb	r1, [r7, #5]
 8000676:	79ba      	ldrb	r2, [r7, #6]
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4611      	mov	r1, r2
 8000680:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <DIO_setupPinMode+0x1b4>)
 8000682:	430b      	orrs	r3, r1
 8000684:	6013      	str	r3, [r2, #0]
			break;
 8000686:	bf00      	nop
		}
	}

	return Ret_Val;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	48000400 	.word	0x48000400
 800069c:	48000800 	.word	0x48000800
 80006a0:	48000c00 	.word	0x48000c00
 80006a4:	48001000 	.word	0x48001000
 80006a8:	48001400 	.word	0x48001400
 80006ac:	48001800 	.word	0x48001800
 80006b0:	48001c00 	.word	0x48001c00

080006b4 <DIO_setAlternateFunction>:

	return Ret_Val;
}

STD_ReturnState DIO_setAlternateFunction (DIO_PortID portID, DIO_PinID pinID, DIO_AltFuncID altFunID)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	460b      	mov	r3, r1
 80006c0:	71bb      	strb	r3, [r7, #6]
 80006c2:	4613      	mov	r3, r2
 80006c4:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b07      	cmp	r3, #7
 80006ce:	d802      	bhi.n	80006d6 <DIO_setAlternateFunction+0x22>
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	2b0e      	cmp	r3, #14
 80006d4:	d902      	bls.n	80006dc <DIO_setAlternateFunction+0x28>
	{
		Ret_Val = RET_NOK;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e16f      	b.n	80009bc <DIO_setAlternateFunction+0x308>
	}

	else if(pinID >= PIN0_ID && pinID <= PIN7_ID)
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	f200 80b1 	bhi.w	8000846 <DIO_setAlternateFunction+0x192>
	{
		switch (portID)
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	f200 8168 	bhi.w	80009bc <DIO_setAlternateFunction+0x308>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <DIO_setAlternateFunction+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000715 	.word	0x08000715
 80006f8:	0800073b 	.word	0x0800073b
 80006fc:	08000761 	.word	0x08000761
 8000700:	08000787 	.word	0x08000787
 8000704:	080007ad 	.word	0x080007ad
 8000708:	080007d3 	.word	0x080007d3
 800070c:	080007f9 	.word	0x080007f9
 8000710:	0800081f 	.word	0x0800081f
		{
		case PORTA_ID:
			DIOA_AFRL_REG = (DIOA_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000714:	4bad      	ldr	r3, [pc, #692]	; (80009cc <DIO_setAlternateFunction+0x318>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	79ba      	ldrb	r2, [r7, #6]
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	210f      	movs	r1, #15
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	43d2      	mvns	r2, r2
 8000724:	4013      	ands	r3, r2
 8000726:	7979      	ldrb	r1, [r7, #5]
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4aa6      	ldr	r2, [pc, #664]	; (80009cc <DIO_setAlternateFunction+0x318>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
			break;
 8000738:	e140      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRL_REG = (DIOB_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800073a:	4ba5      	ldr	r3, [pc, #660]	; (80009d0 <DIO_setAlternateFunction+0x31c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	0092      	lsls	r2, r2, #2
 8000742:	210f      	movs	r1, #15
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	43d2      	mvns	r2, r2
 800074a:	4013      	ands	r3, r2
 800074c:	7979      	ldrb	r1, [r7, #5]
 800074e:	79ba      	ldrb	r2, [r7, #6]
 8000750:	0092      	lsls	r2, r2, #2
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4611      	mov	r1, r2
 8000758:	4a9d      	ldr	r2, [pc, #628]	; (80009d0 <DIO_setAlternateFunction+0x31c>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6013      	str	r3, [r2, #0]
			break;
 800075e:	e12d      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRL_REG = (DIOC_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000760:	4b9c      	ldr	r3, [pc, #624]	; (80009d4 <DIO_setAlternateFunction+0x320>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	79ba      	ldrb	r2, [r7, #6]
 8000766:	0092      	lsls	r2, r2, #2
 8000768:	210f      	movs	r1, #15
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	43d2      	mvns	r2, r2
 8000770:	4013      	ands	r3, r2
 8000772:	7979      	ldrb	r1, [r7, #5]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	0092      	lsls	r2, r2, #2
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a95      	ldr	r2, [pc, #596]	; (80009d4 <DIO_setAlternateFunction+0x320>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6013      	str	r3, [r2, #0]
			break;
 8000784:	e11a      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRL_REG = (DIOD_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000786:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <DIO_setAlternateFunction+0x324>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	79ba      	ldrb	r2, [r7, #6]
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	210f      	movs	r1, #15
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	43d2      	mvns	r2, r2
 8000796:	4013      	ands	r3, r2
 8000798:	7979      	ldrb	r1, [r7, #5]
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	0092      	lsls	r2, r2, #2
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a8c      	ldr	r2, [pc, #560]	; (80009d8 <DIO_setAlternateFunction+0x324>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6013      	str	r3, [r2, #0]
			break;
 80007aa:	e107      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRL_REG = (DIOE_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80007ac:	4b8b      	ldr	r3, [pc, #556]	; (80009dc <DIO_setAlternateFunction+0x328>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	79ba      	ldrb	r2, [r7, #6]
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	210f      	movs	r1, #15
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	43d2      	mvns	r2, r2
 80007bc:	4013      	ands	r3, r2
 80007be:	7979      	ldrb	r1, [r7, #5]
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a84      	ldr	r2, [pc, #528]	; (80009dc <DIO_setAlternateFunction+0x328>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	6013      	str	r3, [r2, #0]
			break;
 80007d0:	e0f4      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRL_REG = (DIOF_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80007d2:	4b83      	ldr	r3, [pc, #524]	; (80009e0 <DIO_setAlternateFunction+0x32c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	79ba      	ldrb	r2, [r7, #6]
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	210f      	movs	r1, #15
 80007dc:	fa01 f202 	lsl.w	r2, r1, r2
 80007e0:	43d2      	mvns	r2, r2
 80007e2:	4013      	ands	r3, r2
 80007e4:	7979      	ldrb	r1, [r7, #5]
 80007e6:	79ba      	ldrb	r2, [r7, #6]
 80007e8:	0092      	lsls	r2, r2, #2
 80007ea:	fa01 f202 	lsl.w	r2, r1, r2
 80007ee:	4611      	mov	r1, r2
 80007f0:	4a7b      	ldr	r2, [pc, #492]	; (80009e0 <DIO_setAlternateFunction+0x32c>)
 80007f2:	430b      	orrs	r3, r1
 80007f4:	6013      	str	r3, [r2, #0]
			break;
 80007f6:	e0e1      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRL_REG = (DIOG_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80007f8:	4b7a      	ldr	r3, [pc, #488]	; (80009e4 <DIO_setAlternateFunction+0x330>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	79ba      	ldrb	r2, [r7, #6]
 80007fe:	0092      	lsls	r2, r2, #2
 8000800:	210f      	movs	r1, #15
 8000802:	fa01 f202 	lsl.w	r2, r1, r2
 8000806:	43d2      	mvns	r2, r2
 8000808:	4013      	ands	r3, r2
 800080a:	7979      	ldrb	r1, [r7, #5]
 800080c:	79ba      	ldrb	r2, [r7, #6]
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	4611      	mov	r1, r2
 8000816:	4a73      	ldr	r2, [pc, #460]	; (80009e4 <DIO_setAlternateFunction+0x330>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6013      	str	r3, [r2, #0]
			break;
 800081c:	e0ce      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRL_REG = (DIOH_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800081e:	4b72      	ldr	r3, [pc, #456]	; (80009e8 <DIO_setAlternateFunction+0x334>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	79ba      	ldrb	r2, [r7, #6]
 8000824:	0092      	lsls	r2, r2, #2
 8000826:	210f      	movs	r1, #15
 8000828:	fa01 f202 	lsl.w	r2, r1, r2
 800082c:	43d2      	mvns	r2, r2
 800082e:	4013      	ands	r3, r2
 8000830:	7979      	ldrb	r1, [r7, #5]
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	4611      	mov	r1, r2
 800083c:	4a6a      	ldr	r2, [pc, #424]	; (80009e8 <DIO_setAlternateFunction+0x334>)
 800083e:	430b      	orrs	r3, r1
 8000840:	6013      	str	r3, [r2, #0]
			break;
 8000842:	bf00      	nop
 8000844:	e0ba      	b.n	80009bc <DIO_setAlternateFunction+0x308>
		}
	}

	else if(pinID >= PIN8_ID && pinID <= PIN15_ID)
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	2b07      	cmp	r3, #7
 800084a:	f240 80b7 	bls.w	80009bc <DIO_setAlternateFunction+0x308>
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	f200 80b3 	bhi.w	80009bc <DIO_setAlternateFunction+0x308>
	{
		pinID = pinID - 8;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	3b08      	subs	r3, #8
 800085a:	71bb      	strb	r3, [r7, #6]

		switch (portID)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b07      	cmp	r3, #7
 8000860:	f200 80ac 	bhi.w	80009bc <DIO_setAlternateFunction+0x308>
 8000864:	a201      	add	r2, pc, #4	; (adr r2, 800086c <DIO_setAlternateFunction+0x1b8>)
 8000866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086a:	bf00      	nop
 800086c:	0800088d 	.word	0x0800088d
 8000870:	080008b3 	.word	0x080008b3
 8000874:	080008d9 	.word	0x080008d9
 8000878:	080008ff 	.word	0x080008ff
 800087c:	08000925 	.word	0x08000925
 8000880:	0800094b 	.word	0x0800094b
 8000884:	08000971 	.word	0x08000971
 8000888:	08000997 	.word	0x08000997
		{
		case PORTA_ID:
			DIOA_AFRH_REG = (DIOA_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800088c:	4b57      	ldr	r3, [pc, #348]	; (80009ec <DIO_setAlternateFunction+0x338>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	79ba      	ldrb	r2, [r7, #6]
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	210f      	movs	r1, #15
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	43d2      	mvns	r2, r2
 800089c:	4013      	ands	r3, r2
 800089e:	7979      	ldrb	r1, [r7, #5]
 80008a0:	79ba      	ldrb	r2, [r7, #6]
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a50      	ldr	r2, [pc, #320]	; (80009ec <DIO_setAlternateFunction+0x338>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
			break;
 80008b0:	e084      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRH_REG = (DIOB_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80008b2:	4b4f      	ldr	r3, [pc, #316]	; (80009f0 <DIO_setAlternateFunction+0x33c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	210f      	movs	r1, #15
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	4013      	ands	r3, r2
 80008c4:	7979      	ldrb	r1, [r7, #5]
 80008c6:	79ba      	ldrb	r2, [r7, #6]
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	fa01 f202 	lsl.w	r2, r1, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4a47      	ldr	r2, [pc, #284]	; (80009f0 <DIO_setAlternateFunction+0x33c>)
 80008d2:	430b      	orrs	r3, r1
 80008d4:	6013      	str	r3, [r2, #0]
			break;
 80008d6:	e071      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRH_REG = (DIOC_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80008d8:	4b46      	ldr	r3, [pc, #280]	; (80009f4 <DIO_setAlternateFunction+0x340>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	79ba      	ldrb	r2, [r7, #6]
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	210f      	movs	r1, #15
 80008e2:	fa01 f202 	lsl.w	r2, r1, r2
 80008e6:	43d2      	mvns	r2, r2
 80008e8:	4013      	ands	r3, r2
 80008ea:	7979      	ldrb	r1, [r7, #5]
 80008ec:	79ba      	ldrb	r2, [r7, #6]
 80008ee:	0092      	lsls	r2, r2, #2
 80008f0:	fa01 f202 	lsl.w	r2, r1, r2
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a3f      	ldr	r2, [pc, #252]	; (80009f4 <DIO_setAlternateFunction+0x340>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6013      	str	r3, [r2, #0]
			break;
 80008fc:	e05e      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRH_REG = (DIOD_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <DIO_setAlternateFunction+0x344>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	79ba      	ldrb	r2, [r7, #6]
 8000904:	0092      	lsls	r2, r2, #2
 8000906:	210f      	movs	r1, #15
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	43d2      	mvns	r2, r2
 800090e:	4013      	ands	r3, r2
 8000910:	7979      	ldrb	r1, [r7, #5]
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	4611      	mov	r1, r2
 800091c:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <DIO_setAlternateFunction+0x344>)
 800091e:	430b      	orrs	r3, r1
 8000920:	6013      	str	r3, [r2, #0]
			break;
 8000922:	e04b      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRH_REG = (DIOE_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000924:	4b35      	ldr	r3, [pc, #212]	; (80009fc <DIO_setAlternateFunction+0x348>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	79ba      	ldrb	r2, [r7, #6]
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	210f      	movs	r1, #15
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	43d2      	mvns	r2, r2
 8000934:	4013      	ands	r3, r2
 8000936:	7979      	ldrb	r1, [r7, #5]
 8000938:	79ba      	ldrb	r2, [r7, #6]
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a2e      	ldr	r2, [pc, #184]	; (80009fc <DIO_setAlternateFunction+0x348>)
 8000944:	430b      	orrs	r3, r1
 8000946:	6013      	str	r3, [r2, #0]
			break;
 8000948:	e038      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRH_REG = (DIOF_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <DIO_setAlternateFunction+0x34c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	79ba      	ldrb	r2, [r7, #6]
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	210f      	movs	r1, #15
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	43d2      	mvns	r2, r2
 800095a:	4013      	ands	r3, r2
 800095c:	7979      	ldrb	r1, [r7, #5]
 800095e:	79ba      	ldrb	r2, [r7, #6]
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	fa01 f202 	lsl.w	r2, r1, r2
 8000966:	4611      	mov	r1, r2
 8000968:	4a25      	ldr	r2, [pc, #148]	; (8000a00 <DIO_setAlternateFunction+0x34c>)
 800096a:	430b      	orrs	r3, r1
 800096c:	6013      	str	r3, [r2, #0]
			break;
 800096e:	e025      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRH_REG = (DIOG_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <DIO_setAlternateFunction+0x350>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	79ba      	ldrb	r2, [r7, #6]
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	210f      	movs	r1, #15
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	43d2      	mvns	r2, r2
 8000980:	4013      	ands	r3, r2
 8000982:	7979      	ldrb	r1, [r7, #5]
 8000984:	79ba      	ldrb	r2, [r7, #6]
 8000986:	0092      	lsls	r2, r2, #2
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <DIO_setAlternateFunction+0x350>)
 8000990:	430b      	orrs	r3, r1
 8000992:	6013      	str	r3, [r2, #0]
			break;
 8000994:	e012      	b.n	80009bc <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRH_REG = (DIOH_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <DIO_setAlternateFunction+0x354>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	79ba      	ldrb	r2, [r7, #6]
 800099c:	0092      	lsls	r2, r2, #2
 800099e:	210f      	movs	r1, #15
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	4013      	ands	r3, r2
 80009a8:	7979      	ldrb	r1, [r7, #5]
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <DIO_setAlternateFunction+0x354>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6013      	str	r3, [r2, #0]
			break;
 80009ba:	bf00      	nop
		}
	}

	return Ret_Val;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	48000020 	.word	0x48000020
 80009d0:	48000420 	.word	0x48000420
 80009d4:	48000820 	.word	0x48000820
 80009d8:	48000c20 	.word	0x48000c20
 80009dc:	48001020 	.word	0x48001020
 80009e0:	48001420 	.word	0x48001420
 80009e4:	48001820 	.word	0x48001820
 80009e8:	48001c20 	.word	0x48001c20
 80009ec:	48000024 	.word	0x48000024
 80009f0:	48000424 	.word	0x48000424
 80009f4:	48000824 	.word	0x48000824
 80009f8:	48000c24 	.word	0x48000c24
 80009fc:	48001024 	.word	0x48001024
 8000a00:	48001424 	.word	0x48001424
 8000a04:	48001824 	.word	0x48001824
 8000a08:	48001c24 	.word	0x48001c24

08000a0c <rcc_setSystemClk>:
#include "rcc_reg.h"
#include "bit_math.h"
#include "rcc.h"


void rcc_setSystemClk(rcc_sysClk_t sysClk){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	switch(sysClk){
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d017      	beq.n	8000a4c <rcc_setSystemClk+0x40>
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d02a      	beq.n	8000a76 <rcc_setSystemClk+0x6a>
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d000      	beq.n	8000a26 <rcc_setSystemClk+0x1a>
		/* select PLL as sys clock*/
		RCC_CFGR_REG|=PLL_SW;
		break;

	}
}
 8000a24:	e03c      	b.n	8000aa0 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSION_BIT);
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSION_READY_FLAG_BIT)==0);
 8000a32:	bf00      	nop
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	085b      	lsrs	r3, r3, #1
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f8      	beq.n	8000a34 <rcc_setSystemClk+0x28>
		RCC_CFGR_REG|=HSI_SW;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <rcc_setSystemClk+0xa4>)
 8000a44:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <rcc_setSystemClk+0xa4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6013      	str	r3, [r2, #0]
		break;
 8000a4a:	e029      	b.n	8000aa0 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSEON_BIT);
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a16      	ldr	r2, [pc, #88]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a56:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSEON_READY_FLAG_BIT)==0);
 8000a58:	bf00      	nop
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	0c5b      	lsrs	r3, r3, #17
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0f8      	beq.n	8000a5a <rcc_setSystemClk+0x4e>
		RCC_CFGR_REG|=HSE_SW;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <rcc_setSystemClk+0xa4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <rcc_setSystemClk+0xa4>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]
		break;
 8000a74:	e014      	b.n	8000aa0 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,PLLON_BIT);
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a80:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,PLLON_READY_FLAG_BIT)==0);
 8000a82:	bf00      	nop
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <rcc_setSystemClk+0xa0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	0e5b      	lsrs	r3, r3, #25
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f8      	beq.n	8000a84 <rcc_setSystemClk+0x78>
		RCC_CFGR_REG|=PLL_SW;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <rcc_setSystemClk+0xa4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <rcc_setSystemClk+0xa4>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6013      	str	r3, [r2, #0]
		break;
 8000a9e:	bf00      	nop
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021004 	.word	0x40021004

08000ab4 <rcc_enablePeriClk>:
void rcc_enablePeriClk(rcc_busId_t busId , u8 periId ){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
	switch(busId){
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d00f      	beq.n	8000aea <rcc_enablePeriClk+0x36>
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d018      	beq.n	8000b00 <rcc_enablePeriClk+0x4c>
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d000      	beq.n	8000ad4 <rcc_enablePeriClk+0x20>
	case APB2:
		SET_BIT(RCC_APB2ENR_REG,periId);

		break;
	}
}
 8000ad2:	e020      	b.n	8000b16 <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_AHBENR_REG,periId);
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <rcc_enablePeriClk+0x70>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <rcc_enablePeriClk+0x70>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6013      	str	r3, [r2, #0]
		break;
 8000ae8:	e015      	b.n	8000b16 <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB1ENR_REG,periId);
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <rcc_enablePeriClk+0x74>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	79ba      	ldrb	r2, [r7, #6]
 8000af0:	2101      	movs	r1, #1
 8000af2:	fa01 f202 	lsl.w	r2, r1, r2
 8000af6:	4611      	mov	r1, r2
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <rcc_enablePeriClk+0x74>)
 8000afa:	430b      	orrs	r3, r1
 8000afc:	6013      	str	r3, [r2, #0]
		break;
 8000afe:	e00a      	b.n	8000b16 <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB2ENR_REG,periId);
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <rcc_enablePeriClk+0x78>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	2101      	movs	r1, #1
 8000b08:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <rcc_enablePeriClk+0x78>)
 8000b10:	430b      	orrs	r3, r1
 8000b12:	6013      	str	r3, [r2, #0]
		break;
 8000b14:	bf00      	nop
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021014 	.word	0x40021014
 8000b28:	4002101c 	.word	0x4002101c
 8000b2c:	40021018 	.word	0x40021018

08000b30 <SysTick_Handler>:


static volatile void(*g_callBackPtr)(void) = (void*)RET_NULLPTR;

void SysTick_Handler (void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	if(g_callBackPtr != (void*)RET_NULLPTR)
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SysTick_Handler+0x18>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d002      	beq.n	8000b42 <SysTick_Handler+0x12>
	{
		(*g_callBackPtr)();
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <SysTick_Handler+0x18>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4798      	blx	r3
	}
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000018 	.word	0x20000018

08000b4c <sysTick_init>:

void sysTick_init(systick_clock_t clock, void (*fPtr)(void))
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
	if(fPtr != (void*)RET_NULLPTR)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d006      	beq.n	8000b6c <sysTick_init+0x20>
	{
		CLEAR_BIT(SYSTICK_STK_CTRL_REG, 1);
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <sysTick_init+0x50>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <sysTick_init+0x50>)
 8000b64:	f023 0302 	bic.w	r3, r3, #2
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e008      	b.n	8000b7e <sysTick_init+0x32>
	}
	else
	{
		SET_BIT(SYSTICK_STK_CTRL_REG, 1);
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <sysTick_init+0x50>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <sysTick_init+0x50>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6013      	str	r3, [r2, #0]
		g_callBackPtr = fPtr;
 8000b78:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <sysTick_init+0x54>)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	6013      	str	r3, [r2, #0]
	}

	SYSTICK_STK_CTRL_REG |= (clock<<2);
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <sysTick_init+0x50>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	79fa      	ldrb	r2, [r7, #7]
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <sysTick_init+0x50>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e010 	.word	0xe000e010
 8000ba0:	20000018 	.word	0x20000018

08000ba4 <main>:
#include "sysTick.h"
#include "ultrasonic.h"
#include "pwm.h"

int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	u16 read1,read2;
	rcc_setSystemClk(HSI);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff ff2e 	bl	8000a0c <rcc_setSystemClk>
	rcc_enablePeriClk(APB2,TIM8_EN);
 8000bb0:	210d      	movs	r1, #13
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff ff7e 	bl	8000ab4 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB2,TIM1_EN);
 8000bb8:	210b      	movs	r1, #11
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff ff7a 	bl	8000ab4 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB1,TIM2_EN);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff ff76 	bl	8000ab4 <rcc_enablePeriClk>


	rcc_enablePeriClk(AHB,IOPA_EN);
 8000bc8:	2111      	movs	r1, #17
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff72 	bl	8000ab4 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPB_EN);
 8000bd0:	2112      	movs	r1, #18
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff ff6e 	bl	8000ab4 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPC_EN);
 8000bd8:	2113      	movs	r1, #19
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ff6a 	bl	8000ab4 <rcc_enablePeriClk>


	sysTick_init(AHB_8,(void*)RET_NULLPTR);
 8000be0:	2102      	movs	r1, #2
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ffb2 	bl	8000b4c <sysTick_init>

	//Ultrasonic_init();

	// A0 F1, A15 F1 , A5 F1

	DIO_setupPinMode( PORTA_ID ,PIN0_ID , PIN_ALTERNATE );
 8000be8:	2202      	movs	r2, #2
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fc85 	bl	80004fc <DIO_setupPinMode>
	DIO_setAlternateFunction(PORTA_ID ,PIN0_ID , AF1 );
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fd5c 	bl	80006b4 <DIO_setAlternateFunction>

	PWM_Init();
 8000bfc:	f7ff fbfa 	bl	80003f4 <PWM_Init>
	PWM_Start(channel1, 0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fc30 	bl	8000468 <PWM_Start>
	read1 = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	80fb      	strh	r3, [r7, #6]
	PWM_Start(channel1, 100);
 8000c0c:	2164      	movs	r1, #100	; 0x64
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fc2a 	bl	8000468 <PWM_Start>
	read1 = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	80fb      	strh	r3, [r7, #6]
//
//		Ultrasonic_Trigger( TRIGGER1_PORT , TRIGGER1_PIN , UltraSonic_Channel1 );
//		read2 = Ultrasonic_readDistance();
//		sysTick_start(500000);

		if(read1 !=0)
 8000c18:	e7fe      	b.n	8000c18 <main+0x74>
	...

08000c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c4a:	f000 f811 	bl	8000c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c4e:	f7ff ffa9 	bl	8000ba4 <main>

08000c52 <LoopForever>:

LoopForever:
  b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   r0, =_estack
 8000c54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c60:	08000cd8 	.word	0x08000cd8
  ldr r2, =_sbss
 8000c64:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c68:	20000038 	.word	0x20000038

08000c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_2_IRQHandler>
	...

08000c70 <__libc_init_array>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	4e0d      	ldr	r6, [pc, #52]	; (8000ca8 <__libc_init_array+0x38>)
 8000c74:	4c0d      	ldr	r4, [pc, #52]	; (8000cac <__libc_init_array+0x3c>)
 8000c76:	1ba4      	subs	r4, r4, r6
 8000c78:	10a4      	asrs	r4, r4, #2
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	42a5      	cmp	r5, r4
 8000c7e:	d109      	bne.n	8000c94 <__libc_init_array+0x24>
 8000c80:	4e0b      	ldr	r6, [pc, #44]	; (8000cb0 <__libc_init_array+0x40>)
 8000c82:	4c0c      	ldr	r4, [pc, #48]	; (8000cb4 <__libc_init_array+0x44>)
 8000c84:	f000 f818 	bl	8000cb8 <_init>
 8000c88:	1ba4      	subs	r4, r4, r6
 8000c8a:	10a4      	asrs	r4, r4, #2
 8000c8c:	2500      	movs	r5, #0
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d105      	bne.n	8000c9e <__libc_init_array+0x2e>
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c98:	4798      	blx	r3
 8000c9a:	3501      	adds	r5, #1
 8000c9c:	e7ee      	b.n	8000c7c <__libc_init_array+0xc>
 8000c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ca2:	4798      	blx	r3
 8000ca4:	3501      	adds	r5, #1
 8000ca6:	e7f2      	b.n	8000c8e <__libc_init_array+0x1e>
 8000ca8:	08000cd0 	.word	0x08000cd0
 8000cac:	08000cd0 	.word	0x08000cd0
 8000cb0:	08000cd0 	.word	0x08000cd0
 8000cb4:	08000cd4 	.word	0x08000cd4

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr
