
NTI_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000197c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001b1c  08001b1c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001b1c  08001b1c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b1c  08001b1c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b1c  08001b1c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b1c  08001b1c  00011b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b20  08001b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000000b4  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f55  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000bbf  00000000  00000000  00023fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000003f0  00000000  00000000  00024b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000348  00000000  00000000  00024f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001021  00000000  00000000  00025298  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002772  00000000  00000000  000262b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012610  00000000  00000000  00028a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003b03b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000dac  00000000  00000000  0003b0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001b04 	.word	0x08001b04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08001b04 	.word	0x08001b04

080001e0 <Ultrasonic_init>:

/*
 * Description: initialization Function of the Ultrasonic driver
 */
void Ultrasonic_init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0

	DIO_setupPinMode( PORTA_ID , PIN5_ID , PIN_OUTPUT );
 80001e4:	2201      	movs	r2, #1
 80001e6:	2105      	movs	r1, #5
 80001e8:	2000      	movs	r0, #0
 80001ea:	f000 fda5 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( PORTA_ID , PIN5_ID , LOGIC_LOW );
 80001ee:	2200      	movs	r2, #0
 80001f0:	2105      	movs	r1, #5
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fe7c 	bl	8000ef0 <DIO_writePin>


	/*****	Init all ICU Channels 1,2,3,4,5,6 *********/

	ICU_Init();
 80001f8:	f000 f948 	bl	800048c <ICU_Init>

	/**********  Channel   1   *********************************/

	DIO_setupPinMode( TRIGGER1_PORT , TRIGGER1_PIN , PIN_OUTPUT );
 80001fc:	2201      	movs	r2, #1
 80001fe:	2100      	movs	r1, #0
 8000200:	2000      	movs	r0, #0
 8000202:	f000 fd99 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( TRIGGER1_PORT ,  TRIGGER1_PIN , LOGIC_LOW );
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	2000      	movs	r0, #0
 800020c:	f000 fe70 	bl	8000ef0 <DIO_writePin>

	DIO_setupPinMode( ECHO1_PORT , ECHO1_PIN , PIN_ALTERNATE );
 8000210:	2202      	movs	r2, #2
 8000212:	2106      	movs	r1, #6
 8000214:	2002      	movs	r0, #2
 8000216:	f000 fd8f 	bl	8000d38 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO1_PORT ,ECHO1_PIN , UltraSonic1_AF );
 800021a:	2204      	movs	r2, #4
 800021c:	2106      	movs	r1, #6
 800021e:	2002      	movs	r0, #2
 8000220:	f000 ff7a 	bl	8001118 <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel1, Both_Edges );
 8000224:	2102      	movs	r1, #2
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f9d4 	bl	80005d4 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel1 , Ultrasonic_edgeProcessing );
 800022c:	494f      	ldr	r1, [pc, #316]	; (800036c <Ultrasonic_init+0x18c>)
 800022e:	2000      	movs	r0, #0
 8000230:	f000 fbd6 	bl	80009e0 <ICU_INT_Enable>

	/**********  Channel   2   *********************************/

	DIO_setupPinMode( TRIGGER2_PORT , TRIGGER2_PIN , PIN_OUTPUT );
 8000234:	2201      	movs	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fd7d 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( TRIGGER2_PORT ,  TRIGGER2_PIN , LOGIC_LOW );
 800023e:	2200      	movs	r2, #0
 8000240:	2101      	movs	r1, #1
 8000242:	2000      	movs	r0, #0
 8000244:	f000 fe54 	bl	8000ef0 <DIO_writePin>

	DIO_setupPinMode( ECHO2_PORT , ECHO2_PIN , PIN_ALTERNATE );
 8000248:	2202      	movs	r2, #2
 800024a:	2107      	movs	r1, #7
 800024c:	2002      	movs	r0, #2
 800024e:	f000 fd73 	bl	8000d38 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO2_PORT ,ECHO2_PIN , UltraSonic2_AF );
 8000252:	2204      	movs	r2, #4
 8000254:	2107      	movs	r1, #7
 8000256:	2002      	movs	r0, #2
 8000258:	f000 ff5e 	bl	8001118 <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel2, Both_Edges );
 800025c:	2102      	movs	r1, #2
 800025e:	2001      	movs	r0, #1
 8000260:	f000 f9b8 	bl	80005d4 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel2 , Ultrasonic_edgeProcessing);
 8000264:	4941      	ldr	r1, [pc, #260]	; (800036c <Ultrasonic_init+0x18c>)
 8000266:	2001      	movs	r0, #1
 8000268:	f000 fbba 	bl	80009e0 <ICU_INT_Enable>

	/**********  Channel   3   *********************************/

	DIO_setupPinMode( TRIGGER3_PORT , TRIGGER3_PIN , PIN_OUTPUT );
 800026c:	2201      	movs	r2, #1
 800026e:	2104      	movs	r1, #4
 8000270:	2000      	movs	r0, #0
 8000272:	f000 fd61 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( TRIGGER3_PORT ,  TRIGGER3_PIN , LOGIC_LOW );
 8000276:	2200      	movs	r2, #0
 8000278:	2104      	movs	r1, #4
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fe38 	bl	8000ef0 <DIO_writePin>

	DIO_setupPinMode( ECHO3_PORT , ECHO3_PIN , PIN_ALTERNATE );
 8000280:	2202      	movs	r2, #2
 8000282:	2108      	movs	r1, #8
 8000284:	2002      	movs	r0, #2
 8000286:	f000 fd57 	bl	8000d38 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO3_PORT ,ECHO3_PIN , UltraSonic3_AF );
 800028a:	2204      	movs	r2, #4
 800028c:	2108      	movs	r1, #8
 800028e:	2002      	movs	r0, #2
 8000290:	f000 ff42 	bl	8001118 <DIO_setAlternateFunction>


	ICU_SelectEdge(UltraSonic_Channel3, Both_Edges );
 8000294:	2102      	movs	r1, #2
 8000296:	2002      	movs	r0, #2
 8000298:	f000 f99c 	bl	80005d4 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel3 , Ultrasonic_edgeProcessing);
 800029c:	4933      	ldr	r1, [pc, #204]	; (800036c <Ultrasonic_init+0x18c>)
 800029e:	2002      	movs	r0, #2
 80002a0:	f000 fb9e 	bl	80009e0 <ICU_INT_Enable>

	/**********  Channel   4   *********************************/

	DIO_setupPinMode( TRIGGER4_PORT , TRIGGER4_PIN , PIN_OUTPUT );
 80002a4:	2201      	movs	r2, #1
 80002a6:	2100      	movs	r1, #0
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fd45 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( TRIGGER4_PORT ,  TRIGGER4_PIN , LOGIC_LOW );
 80002ae:	2200      	movs	r2, #0
 80002b0:	2100      	movs	r1, #0
 80002b2:	2001      	movs	r0, #1
 80002b4:	f000 fe1c 	bl	8000ef0 <DIO_writePin>

	DIO_setupPinMode( ECHO4_PORT , ECHO4_PIN , PIN_ALTERNATE );
 80002b8:	2202      	movs	r2, #2
 80002ba:	2100      	movs	r1, #0
 80002bc:	2002      	movs	r0, #2
 80002be:	f000 fd3b 	bl	8000d38 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO4_PORT ,ECHO4_PIN , UltraSonic4_AF );
 80002c2:	2202      	movs	r2, #2
 80002c4:	2100      	movs	r1, #0
 80002c6:	2002      	movs	r0, #2
 80002c8:	f000 ff26 	bl	8001118 <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel4, Both_Edges );
 80002cc:	2102      	movs	r1, #2
 80002ce:	2003      	movs	r0, #3
 80002d0:	f000 f980 	bl	80005d4 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel4 , Ultrasonic_edgeProcessing);
 80002d4:	4925      	ldr	r1, [pc, #148]	; (800036c <Ultrasonic_init+0x18c>)
 80002d6:	2003      	movs	r0, #3
 80002d8:	f000 fb82 	bl	80009e0 <ICU_INT_Enable>

	/**********  Channel   5   *********************************/

	DIO_setupPinMode( TRIGGER5_PORT , TRIGGER5_PIN , PIN_OUTPUT );
 80002dc:	2201      	movs	r2, #1
 80002de:	2101      	movs	r1, #1
 80002e0:	2005      	movs	r0, #5
 80002e2:	f000 fd29 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( TRIGGER5_PORT ,  TRIGGER5_PIN , LOGIC_LOW );
 80002e6:	2200      	movs	r2, #0
 80002e8:	2101      	movs	r1, #1
 80002ea:	2005      	movs	r0, #5
 80002ec:	f000 fe00 	bl	8000ef0 <DIO_writePin>

	DIO_setupPinMode( ECHO5_PORT , ECHO5_PIN , PIN_ALTERNATE );
 80002f0:	2202      	movs	r2, #2
 80002f2:	2101      	movs	r1, #1
 80002f4:	2002      	movs	r0, #2
 80002f6:	f000 fd1f 	bl	8000d38 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO5_PORT ,ECHO5_PIN , UltraSonic5_AF );
 80002fa:	2202      	movs	r2, #2
 80002fc:	2101      	movs	r1, #1
 80002fe:	2002      	movs	r0, #2
 8000300:	f000 ff0a 	bl	8001118 <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel5, Both_Edges );
 8000304:	2102      	movs	r1, #2
 8000306:	2004      	movs	r0, #4
 8000308:	f000 f964 	bl	80005d4 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel5 , Ultrasonic_edgeProcessing);
 800030c:	4917      	ldr	r1, [pc, #92]	; (800036c <Ultrasonic_init+0x18c>)
 800030e:	2004      	movs	r0, #4
 8000310:	f000 fb66 	bl	80009e0 <ICU_INT_Enable>

	/**********  Channel   6   *********************************/

	DIO_setupPinMode( TRIGGER6_PORT , TRIGGER6_PIN , PIN_OUTPUT );
 8000314:	2201      	movs	r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	2005      	movs	r0, #5
 800031a:	f000 fd0d 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( TRIGGER6_PORT ,  TRIGGER6_PIN , LOGIC_LOW );
 800031e:	2200      	movs	r2, #0
 8000320:	2101      	movs	r1, #1
 8000322:	2005      	movs	r0, #5
 8000324:	f000 fde4 	bl	8000ef0 <DIO_writePin>

	DIO_setupPinMode( ECHO6_PORT , ECHO6_PIN , PIN_ALTERNATE );
 8000328:	2202      	movs	r2, #2
 800032a:	2102      	movs	r1, #2
 800032c:	2002      	movs	r0, #2
 800032e:	f000 fd03 	bl	8000d38 <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO6_PORT ,ECHO6_PIN , UltraSonic6_AF );
 8000332:	2202      	movs	r2, #2
 8000334:	2102      	movs	r1, #2
 8000336:	2002      	movs	r0, #2
 8000338:	f000 feee 	bl	8001118 <DIO_setAlternateFunction>

	ICU_SelectEdge(UltraSonic_Channel6, Both_Edges );
 800033c:	2102      	movs	r1, #2
 800033e:	2005      	movs	r0, #5
 8000340:	f000 f948 	bl	80005d4 <ICU_SelectEdge>
	ICU_INT_Enable(UltraSonic_Channel6 , Ultrasonic_edgeProcessing);
 8000344:	4909      	ldr	r1, [pc, #36]	; (800036c <Ultrasonic_init+0x18c>)
 8000346:	2005      	movs	r0, #5
 8000348:	f000 fb4a 	bl	80009e0 <ICU_INT_Enable>

/************* Enable NVIC for Tim 8 & 1 ICU Interrupt **********************/

	NVIC_EnableIRQ(IRQn_TIM8_CC);
 800034c:	202e      	movs	r0, #46	; 0x2e
 800034e:	f000 fc67 	bl	8000c20 <NVIC_EnableIRQ>
	NVIC_SetPriority(IRQn_TIM8_CC,0);
 8000352:	2100      	movs	r1, #0
 8000354:	202e      	movs	r0, #46	; 0x2e
 8000356:	f000 fc87 	bl	8000c68 <NVIC_SetPriority>

	NVIC_EnableIRQ(IRQn_TIM1_CC);
 800035a:	201b      	movs	r0, #27
 800035c:	f000 fc60 	bl	8000c20 <NVIC_EnableIRQ>
	NVIC_SetPriority(IRQn_TIM8_CC,0);
 8000360:	2100      	movs	r1, #0
 8000362:	202e      	movs	r0, #46	; 0x2e
 8000364:	f000 fc80 	bl	8000c68 <NVIC_SetPriority>

}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	08000439 	.word	0x08000439

08000370 <Ultrasonic_Trigger>:
/*
 *  Description: Send the trigger pulse to the ultrasonic
 */

void Ultrasonic_Trigger(DIO_PortID port , DIO_PinID pin , u8 Channel )
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
 800037a:	460b      	mov	r3, r1
 800037c:	71bb      	strb	r3, [r7, #6]
 800037e:	4613      	mov	r3, r2
 8000380:	717b      	strb	r3, [r7, #5]
	UltraSonic_Channel = Channel;
 8000382:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <Ultrasonic_Trigger+0x4c>)
 8000384:	797b      	ldrb	r3, [r7, #5]
 8000386:	7013      	strb	r3, [r2, #0]
	ICU_Control(UltraSonic_Channel , Enable);
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <Ultrasonic_Trigger+0x4c>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f8ce 	bl	8000530 <ICU_Control>

	DIO_writePin( port ,  pin , LOGIC_HIGH );
 8000394:	79b9      	ldrb	r1, [r7, #6]
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2201      	movs	r2, #1
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fda8 	bl	8000ef0 <DIO_writePin>
	TIM6_Delay(10);
 80003a0:	200a      	movs	r0, #10
 80003a2:	f000 fc9d 	bl	8000ce0 <TIM6_Delay>
	DIO_writePin( port ,  pin , LOGIC_LOW );
 80003a6:	79b9      	ldrb	r1, [r7, #6]
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	2200      	movs	r2, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fd9f 	bl	8000ef0 <DIO_writePin>

}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200000c8 	.word	0x200000c8

080003c0 <Ultrasonic_readDistance>:

/*
 * Description: Does the distance measurements and return with the distance
 */
u16 Ultrasonic_readDistance(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	u16 tim ;
	u16 distance ;

	while(flag < 2 );
 80003c6:	bf00      	nop
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <Ultrasonic_readDistance+0x64>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d9fa      	bls.n	80003c8 <Ultrasonic_readDistance+0x8>

	if( t1 > t2)
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <Ultrasonic_readDistance+0x68>)
 80003d4:	881a      	ldrh	r2, [r3, #0]
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <Ultrasonic_readDistance+0x6c>)
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d908      	bls.n	80003f0 <Ultrasonic_readDistance+0x30>
	{
		tim = ( 0xFFFF - t1 ) + t2 ;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <Ultrasonic_readDistance+0x6c>)
 80003e0:	881a      	ldrh	r2, [r3, #0]
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <Ultrasonic_readDistance+0x68>)
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	3b01      	subs	r3, #1
 80003ec:	80fb      	strh	r3, [r7, #6]
 80003ee:	e005      	b.n	80003fc <Ultrasonic_readDistance+0x3c>
	}
	else
	{
		tim = t2 - t1 ;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <Ultrasonic_readDistance+0x6c>)
 80003f2:	881a      	ldrh	r2, [r3, #0]
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <Ultrasonic_readDistance+0x68>)
 80003f6:	881b      	ldrh	r3, [r3, #0]
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	80fb      	strh	r3, [r7, #6]
	}

	distance = ( tim / 58 ) ;
 80003fc:	88fb      	ldrh	r3, [r7, #6]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <Ultrasonic_readDistance+0x70>)
 8000400:	fba2 2303 	umull	r2, r3, r2, r3
 8000404:	095b      	lsrs	r3, r3, #5
 8000406:	80bb      	strh	r3, [r7, #4]
	flag = 0;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <Ultrasonic_readDistance+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]

	ICU_Control(UltraSonic_Channel , Disable);
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <Ultrasonic_readDistance+0x74>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2101      	movs	r1, #1
 8000414:	4618      	mov	r0, r3
 8000416:	f000 f88b 	bl	8000530 <ICU_Control>

	return (u16) (distance);
 800041a:	88bb      	ldrh	r3, [r7, #4]

}
 800041c:	4618      	mov	r0, r3
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000038 	.word	0x20000038
 8000428:	200000cc 	.word	0x200000cc
 800042c:	200000ca 	.word	0x200000ca
 8000430:	8d3dcb09 	.word	0x8d3dcb09
 8000434:	200000c8 	.word	0x200000c8

08000438 <Ultrasonic_edgeProcessing>:


void Ultrasonic_edgeProcessing(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0


	if( flag == 0 )
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <Ultrasonic_edgeProcessing+0x44>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d109      	bne.n	800045a <Ultrasonic_edgeProcessing+0x22>
	{
		ICU_Read(UltraSonic_Channel,&t1);
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <Ultrasonic_edgeProcessing+0x48>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	490e      	ldr	r1, [pc, #56]	; (8000484 <Ultrasonic_edgeProcessing+0x4c>)
 800044c:	4618      	mov	r0, r3
 800044e:	f000 fa79 	bl	8000944 <ICU_Read>
		flag = 1 ;
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <Ultrasonic_edgeProcessing+0x44>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
		ICU_Read(UltraSonic_Channel,&t2);
		flag = 2 ;
		// DIO_togglePin( PORTA_ID , PIN5_ID );			// Internal Led
	}

}
 8000458:	e00d      	b.n	8000476 <Ultrasonic_edgeProcessing+0x3e>
	else if( flag == 1 )
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <Ultrasonic_edgeProcessing+0x44>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	2b01      	cmp	r3, #1
 8000462:	d108      	bne.n	8000476 <Ultrasonic_edgeProcessing+0x3e>
		ICU_Read(UltraSonic_Channel,&t2);
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <Ultrasonic_edgeProcessing+0x48>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4907      	ldr	r1, [pc, #28]	; (8000488 <Ultrasonic_edgeProcessing+0x50>)
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fa6a 	bl	8000944 <ICU_Read>
		flag = 2 ;
 8000470:	4b02      	ldr	r3, [pc, #8]	; (800047c <Ultrasonic_edgeProcessing+0x44>)
 8000472:	2202      	movs	r2, #2
 8000474:	701a      	strb	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000038 	.word	0x20000038
 8000480:	200000c8 	.word	0x200000c8
 8000484:	200000cc 	.word	0x200000cc
 8000488:	200000ca 	.word	0x200000ca

0800048c <ICU_Init>:




void ICU_Init(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	}
#endif

	  /************   Channels 1,2,3 Tim 8 as ICU  ***************/

	  TIM8_CCMR1_REG |= WriteValue(1,CC1S_BIT_0_1); //01: CC1 channel is configured as input, IC1 is mapped on TI1
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <ICU_Init+0x84>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1e      	ldr	r2, [pc, #120]	; (8000510 <ICU_Init+0x84>)
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	6013      	str	r3, [r2, #0]
	  TIM8_CCMR1_REG |= WriteValue(1,CC2S_BIT_8_9); //01: CC2 channel is configured as input, IC2 is mapped on TI2
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <ICU_Init+0x84>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <ICU_Init+0x84>)
 80004a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a6:	6013      	str	r3, [r2, #0]
	  TIM8_CCMR2_REG |= WriteValue(1,CC3S_BIT_0_1); //01: CC3 channel is configured as input, IC3 is mapped on TI3
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <ICU_Init+0x88>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a19      	ldr	r2, [pc, #100]	; (8000514 <ICU_Init+0x88>)
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]

	  /************   Channels 4,5,6 Tim 1 as ICU  ***************/

	  TIM1_CCMR1_REG |= WriteValue(1,CC1S_BIT_0_1);   //01: CC1 channel is configured as input, IC1 is mapped on TI1
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <ICU_Init+0x8c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a17      	ldr	r2, [pc, #92]	; (8000518 <ICU_Init+0x8c>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]
	  TIM1_CCMR1_REG |= WriteValue(1,CC2S_BIT_8_9);   //01: CC2 channel is configured as input, IC2 is mapped on TI2
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <ICU_Init+0x8c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a14      	ldr	r2, [pc, #80]	; (8000518 <ICU_Init+0x8c>)
 80004c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ca:	6013      	str	r3, [r2, #0]
	  TIM1_CCMR2_REG |= WriteValue(1,CC3S_BIT_0_1);   //01: CC3 channel is configured as input, IC3 is mapped on TI3
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <ICU_Init+0x90>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a12      	ldr	r2, [pc, #72]	; (800051c <ICU_Init+0x90>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]

	  /*************  Enable Tim8 with 8 Prescaler so tick time is 1 micro sec Sys Clk is 8 M ====> HSI *******/

	  TIM8_PSC_REG = 7;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <ICU_Init+0x94>)
 80004da:	2207      	movs	r2, #7
 80004dc:	801a      	strh	r2, [r3, #0]
	  SET_BIT(TIM8_CR1_REG,CEN_BIT_0);
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <ICU_Init+0x98>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <ICU_Init+0x98>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	8013      	strh	r3, [r2, #0]
	  /*************  Enable Tim1 with 8 Prescaler so tick time is 1 micro sec Sys Clk is 8 M ====> HSI *******/

      TIM1_PSC_REG = 7;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <ICU_Init+0x9c>)
 80004f0:	2207      	movs	r2, #7
 80004f2:	801a      	strh	r2, [r3, #0]
      SET_BIT(TIM1_CR1_REG,CEN_BIT_0);
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <ICU_Init+0xa0>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	4a0c      	ldr	r2, [pc, #48]	; (800052c <ICU_Init+0xa0>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	b29b      	uxth	r3, r3
 8000502:	8013      	strh	r3, [r2, #0]

}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40013418 	.word	0x40013418
 8000514:	4001341c 	.word	0x4001341c
 8000518:	40012c18 	.word	0x40012c18
 800051c:	40012c1c 	.word	0x40012c1c
 8000520:	40013428 	.word	0x40013428
 8000524:	40013400 	.word	0x40013400
 8000528:	40012c28 	.word	0x40012c28
 800052c:	40012c00 	.word	0x40012c00

08000530 <ICU_Control>:

void ICU_Control(ICU_Channel channel ,  u8 control)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	460a      	mov	r2, r1
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	4613      	mov	r3, r2
 800053e:	71bb      	strb	r3, [r7, #6]
	switch(control)
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <ICU_Control+0x1c>
 8000546:	2b01      	cmp	r3, #1
 8000548:	d01c      	beq.n	8000584 <ICU_Control+0x54>
	break;


	}

}
 800054a:	e039      	b.n	80005c0 <ICU_Control+0x90>
		if( channel < channel_4 )
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b02      	cmp	r3, #2
 8000550:	d80b      	bhi.n	800056a <ICU_Control+0x3a>
			SET_BIT(TIM8_CCER_REG , ( channel * 4 ) );
 8000552:	4b1e      	ldr	r3, [pc, #120]	; (80005cc <ICU_Control+0x9c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	79fa      	ldrb	r2, [r7, #7]
 8000558:	0092      	lsls	r2, r2, #2
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <ICU_Control+0x9c>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
	break;
 8000568:	e02a      	b.n	80005c0 <ICU_Control+0x90>
			SET_BIT(TIM1_CCER_REG , ( ( channel - 3 ) * 4 ) );
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <ICU_Control+0xa0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	3a03      	subs	r2, #3
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	2101      	movs	r1, #1
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <ICU_Control+0xa0>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6013      	str	r3, [r2, #0]
	break;
 8000582:	e01d      	b.n	80005c0 <ICU_Control+0x90>
		if( channel < channel_4 )
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d80c      	bhi.n	80005a4 <ICU_Control+0x74>
			CLEAR_BIT(TIM8_CCER_REG , ( channel * 4 ) );
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <ICU_Control+0x9c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	0092      	lsls	r2, r2, #2
 8000592:	2101      	movs	r1, #1
 8000594:	fa01 f202 	lsl.w	r2, r1, r2
 8000598:	43d2      	mvns	r2, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <ICU_Control+0x9c>)
 800059e:	400b      	ands	r3, r1
 80005a0:	6013      	str	r3, [r2, #0]
	break;
 80005a2:	e00c      	b.n	80005be <ICU_Control+0x8e>
			CLEAR_BIT(TIM1_CCER_REG , ( ( channel - 3 ) * 4 ) );
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <ICU_Control+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	3a03      	subs	r2, #3
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	2101      	movs	r1, #1
 80005b0:	fa01 f202 	lsl.w	r2, r1, r2
 80005b4:	43d2      	mvns	r2, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <ICU_Control+0xa0>)
 80005ba:	400b      	ands	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
	break;
 80005be:	bf00      	nop
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	40013420 	.word	0x40013420
 80005d0:	40012c20 	.word	0x40012c20

080005d4 <ICU_SelectEdge>:


void ICU_SelectEdge(ICU_Channel channel,ICU_Edge edge)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	460a      	mov	r2, r1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	f200 811e 	bhi.w	8000828 <ICU_SelectEdge+0x254>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <ICU_SelectEdge+0x20>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	0800060d 	.word	0x0800060d
 80005f8:	08000667 	.word	0x08000667
 80005fc:	080006c1 	.word	0x080006c1
 8000600:	0800071b 	.word	0x0800071b
 8000604:	08000775 	.word	0x08000775
 8000608:	080007cf 	.word	0x080007cf
	{
	  case channel_1:
		  	   if( edge == RISING )
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d10c      	bne.n	800062c <ICU_SelectEdge+0x58>
		  	  	{
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 8000612:	4b88      	ldr	r3, [pc, #544]	; (8000834 <ICU_SelectEdge+0x260>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a87      	ldr	r2, [pc, #540]	; (8000834 <ICU_SelectEdge+0x260>)
 8000618:	f023 0302 	bic.w	r3, r3, #2
 800061c:	6013      	str	r3, [r2, #0]
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 800061e:	4b85      	ldr	r3, [pc, #532]	; (8000834 <ICU_SelectEdge+0x260>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a84      	ldr	r2, [pc, #528]	; (8000834 <ICU_SelectEdge+0x260>)
 8000624:	f023 0308 	bic.w	r3, r3, #8
 8000628:	6013      	str	r3, [r2, #0]
		  	  	else
		  	  	{
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
		  	  	}
	  break;
 800062a:	e0fd      	b.n	8000828 <ICU_SelectEdge+0x254>
		  	  	else if (edge == FALLING )
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d10c      	bne.n	800064c <ICU_SelectEdge+0x78>
		  	  	  	  SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 8000632:	4b80      	ldr	r3, [pc, #512]	; (8000834 <ICU_SelectEdge+0x260>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a7f      	ldr	r2, [pc, #508]	; (8000834 <ICU_SelectEdge+0x260>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6013      	str	r3, [r2, #0]
		  	  	  	  CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 800063e:	4b7d      	ldr	r3, [pc, #500]	; (8000834 <ICU_SelectEdge+0x260>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a7c      	ldr	r2, [pc, #496]	; (8000834 <ICU_SelectEdge+0x260>)
 8000644:	f023 0308 	bic.w	r3, r3, #8
 8000648:	6013      	str	r3, [r2, #0]
	  break;
 800064a:	e0ed      	b.n	8000828 <ICU_SelectEdge+0x254>
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 800064c:	4b79      	ldr	r3, [pc, #484]	; (8000834 <ICU_SelectEdge+0x260>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a78      	ldr	r2, [pc, #480]	; (8000834 <ICU_SelectEdge+0x260>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6013      	str	r3, [r2, #0]
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 8000658:	4b76      	ldr	r3, [pc, #472]	; (8000834 <ICU_SelectEdge+0x260>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a75      	ldr	r2, [pc, #468]	; (8000834 <ICU_SelectEdge+0x260>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6013      	str	r3, [r2, #0]
	  break;
 8000664:	e0e0      	b.n	8000828 <ICU_SelectEdge+0x254>
	  case channel_2:
	  	  	  if( edge == RISING )
 8000666:	79bb      	ldrb	r3, [r7, #6]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10c      	bne.n	8000686 <ICU_SelectEdge+0xb2>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 800066c:	4b71      	ldr	r3, [pc, #452]	; (8000834 <ICU_SelectEdge+0x260>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a70      	ldr	r2, [pc, #448]	; (8000834 <ICU_SelectEdge+0x260>)
 8000672:	f023 0320 	bic.w	r3, r3, #32
 8000676:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 8000678:	4b6e      	ldr	r3, [pc, #440]	; (8000834 <ICU_SelectEdge+0x260>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a6d      	ldr	r2, [pc, #436]	; (8000834 <ICU_SelectEdge+0x260>)
 800067e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000682:	6013      	str	r3, [r2, #0]
	  	     else
	  	     {
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
	  	     }
	  break;
 8000684:	e0d0      	b.n	8000828 <ICU_SelectEdge+0x254>
	  	     else if (edge == FALLING )
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10c      	bne.n	80006a6 <ICU_SelectEdge+0xd2>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 800068c:	4b69      	ldr	r3, [pc, #420]	; (8000834 <ICU_SelectEdge+0x260>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a68      	ldr	r2, [pc, #416]	; (8000834 <ICU_SelectEdge+0x260>)
 8000692:	f043 0320 	orr.w	r3, r3, #32
 8000696:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 8000698:	4b66      	ldr	r3, [pc, #408]	; (8000834 <ICU_SelectEdge+0x260>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a65      	ldr	r2, [pc, #404]	; (8000834 <ICU_SelectEdge+0x260>)
 800069e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006a2:	6013      	str	r3, [r2, #0]
	  break;
 80006a4:	e0c0      	b.n	8000828 <ICU_SelectEdge+0x254>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 80006a6:	4b63      	ldr	r3, [pc, #396]	; (8000834 <ICU_SelectEdge+0x260>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a62      	ldr	r2, [pc, #392]	; (8000834 <ICU_SelectEdge+0x260>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	6013      	str	r3, [r2, #0]
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 80006b2:	4b60      	ldr	r3, [pc, #384]	; (8000834 <ICU_SelectEdge+0x260>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a5f      	ldr	r2, [pc, #380]	; (8000834 <ICU_SelectEdge+0x260>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6013      	str	r3, [r2, #0]
	  break;
 80006be:	e0b3      	b.n	8000828 <ICU_SelectEdge+0x254>
	  case channel_3:
	  	  	  if( edge == RISING )
 80006c0:	79bb      	ldrb	r3, [r7, #6]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d10c      	bne.n	80006e0 <ICU_SelectEdge+0x10c>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 80006c6:	4b5b      	ldr	r3, [pc, #364]	; (8000834 <ICU_SelectEdge+0x260>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a5a      	ldr	r2, [pc, #360]	; (8000834 <ICU_SelectEdge+0x260>)
 80006cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006d0:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 80006d2:	4b58      	ldr	r3, [pc, #352]	; (8000834 <ICU_SelectEdge+0x260>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a57      	ldr	r2, [pc, #348]	; (8000834 <ICU_SelectEdge+0x260>)
 80006d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006dc:	6013      	str	r3, [r2, #0]
		  	  else
		  	  {
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
		  	  }
	  break;
 80006de:	e0a3      	b.n	8000828 <ICU_SelectEdge+0x254>
		  	  else if (edge == FALLING )
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10c      	bne.n	8000700 <ICU_SelectEdge+0x12c>
	  	  		  SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <ICU_SelectEdge+0x260>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a52      	ldr	r2, [pc, #328]	; (8000834 <ICU_SelectEdge+0x260>)
 80006ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f0:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 80006f2:	4b50      	ldr	r3, [pc, #320]	; (8000834 <ICU_SelectEdge+0x260>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a4f      	ldr	r2, [pc, #316]	; (8000834 <ICU_SelectEdge+0x260>)
 80006f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80006fc:	6013      	str	r3, [r2, #0]
	  break;
 80006fe:	e093      	b.n	8000828 <ICU_SelectEdge+0x254>
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 8000700:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <ICU_SelectEdge+0x260>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a4b      	ldr	r2, [pc, #300]	; (8000834 <ICU_SelectEdge+0x260>)
 8000706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070a:	6013      	str	r3, [r2, #0]
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <ICU_SelectEdge+0x260>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a48      	ldr	r2, [pc, #288]	; (8000834 <ICU_SelectEdge+0x260>)
 8000712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000716:	6013      	str	r3, [r2, #0]
	  break;
 8000718:	e086      	b.n	8000828 <ICU_SelectEdge+0x254>
	  case channel_4:
	  	   if( edge == RISING )
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d10c      	bne.n	800073a <ICU_SelectEdge+0x166>
	  	  	{
	  		      CLEAR_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 8000720:	4b45      	ldr	r3, [pc, #276]	; (8000838 <ICU_SelectEdge+0x264>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a44      	ldr	r2, [pc, #272]	; (8000838 <ICU_SelectEdge+0x264>)
 8000726:	f023 0302 	bic.w	r3, r3, #2
 800072a:	6013      	str	r3, [r2, #0]
	  		      CLEAR_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <ICU_SelectEdge+0x264>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a41      	ldr	r2, [pc, #260]	; (8000838 <ICU_SelectEdge+0x264>)
 8000732:	f023 0308 	bic.w	r3, r3, #8
 8000736:	6013      	str	r3, [r2, #0]
	  	  	else
	  	  	{
	  	  		 SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
	  	  		 SET_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
	  	  	}
	  break;
 8000738:	e076      	b.n	8000828 <ICU_SelectEdge+0x254>
	  	  	else if (edge == FALLING )
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10c      	bne.n	800075a <ICU_SelectEdge+0x186>
	  	  	  	  SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 8000740:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <ICU_SelectEdge+0x264>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a3c      	ldr	r2, [pc, #240]	; (8000838 <ICU_SelectEdge+0x264>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	6013      	str	r3, [r2, #0]
	  	  	  	  CLEAR_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 800074c:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <ICU_SelectEdge+0x264>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a39      	ldr	r2, [pc, #228]	; (8000838 <ICU_SelectEdge+0x264>)
 8000752:	f023 0308 	bic.w	r3, r3, #8
 8000756:	6013      	str	r3, [r2, #0]
	  break;
 8000758:	e066      	b.n	8000828 <ICU_SelectEdge+0x254>
	  	  		 SET_BIT(TIM1_CCER_REG,CC1P_BIT_1);
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <ICU_SelectEdge+0x264>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a36      	ldr	r2, [pc, #216]	; (8000838 <ICU_SelectEdge+0x264>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6013      	str	r3, [r2, #0]
	  	  		 SET_BIT(TIM1_CCER_REG,CC1NP_BIT_3);
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <ICU_SelectEdge+0x264>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a33      	ldr	r2, [pc, #204]	; (8000838 <ICU_SelectEdge+0x264>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6013      	str	r3, [r2, #0]
	  break;
 8000772:	e059      	b.n	8000828 <ICU_SelectEdge+0x254>
	  case channel_5:
  	  	  if( edge == RISING )
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d10c      	bne.n	8000794 <ICU_SelectEdge+0x1c0>
  	  	  {
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <ICU_SelectEdge+0x264>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <ICU_SelectEdge+0x264>)
 8000780:	f023 0320 	bic.w	r3, r3, #32
 8000784:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <ICU_SelectEdge+0x264>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <ICU_SelectEdge+0x264>)
 800078c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000790:	6013      	str	r3, [r2, #0]
  	     else
  	     {
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
  	  		  SET_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
  	     }
	  break;
 8000792:	e049      	b.n	8000828 <ICU_SelectEdge+0x254>
  	     else if (edge == FALLING )
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10c      	bne.n	80007b4 <ICU_SelectEdge+0x1e0>
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <ICU_SelectEdge+0x264>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a26      	ldr	r2, [pc, #152]	; (8000838 <ICU_SelectEdge+0x264>)
 80007a0:	f043 0320 	orr.w	r3, r3, #32
 80007a4:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <ICU_SelectEdge+0x264>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a23      	ldr	r2, [pc, #140]	; (8000838 <ICU_SelectEdge+0x264>)
 80007ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007b0:	6013      	str	r3, [r2, #0]
	  break;
 80007b2:	e039      	b.n	8000828 <ICU_SelectEdge+0x254>
  	  		  SET_BIT(TIM1_CCER_REG,CC2P_BIT_5);
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <ICU_SelectEdge+0x264>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <ICU_SelectEdge+0x264>)
 80007ba:	f043 0320 	orr.w	r3, r3, #32
 80007be:	6013      	str	r3, [r2, #0]
  	  		  SET_BIT(TIM1_CCER_REG,CC2NP_BIT_7);
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <ICU_SelectEdge+0x264>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <ICU_SelectEdge+0x264>)
 80007c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ca:	6013      	str	r3, [r2, #0]
	  break;
 80007cc:	e02c      	b.n	8000828 <ICU_SelectEdge+0x254>
	  case channel_6:
  	  	  if( edge == RISING )
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d10c      	bne.n	80007ee <ICU_SelectEdge+0x21a>
  	  	  {
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <ICU_SelectEdge+0x264>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <ICU_SelectEdge+0x264>)
 80007da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007de:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <ICU_SelectEdge+0x264>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a14      	ldr	r2, [pc, #80]	; (8000838 <ICU_SelectEdge+0x264>)
 80007e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007ea:	6013      	str	r3, [r2, #0]
	  	  else
	  	  {
	  		 SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
	  		 SET_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
	  	  }
	  break;
 80007ec:	e01b      	b.n	8000826 <ICU_SelectEdge+0x252>
	  	  else if (edge == FALLING )
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d10c      	bne.n	800080e <ICU_SelectEdge+0x23a>
  	  		  SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <ICU_SelectEdge+0x264>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <ICU_SelectEdge+0x264>)
 80007fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fe:	6013      	str	r3, [r2, #0]
  	  		  CLEAR_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <ICU_SelectEdge+0x264>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <ICU_SelectEdge+0x264>)
 8000806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800080a:	6013      	str	r3, [r2, #0]
	  break;
 800080c:	e00b      	b.n	8000826 <ICU_SelectEdge+0x252>
	  		 SET_BIT(TIM1_CCER_REG,CC3P_BIT_9);
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <ICU_SelectEdge+0x264>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <ICU_SelectEdge+0x264>)
 8000814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000818:	6013      	str	r3, [r2, #0]
	  		 SET_BIT(TIM1_CCER_REG,CC3NP_BIT_11);
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <ICU_SelectEdge+0x264>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a06      	ldr	r2, [pc, #24]	; (8000838 <ICU_SelectEdge+0x264>)
 8000820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000824:	6013      	str	r3, [r2, #0]
	  break;
 8000826:	bf00      	nop
	}



}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40013420 	.word	0x40013420
 8000838:	40012c20 	.word	0x40012c20

0800083c <ICU_INT_CheckStatus>:


STD_ReturnState ICU_INT_CheckStatus(ICU_Channel channel)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState state;

	switch(channel)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b05      	cmp	r3, #5
 800084a:	d86f      	bhi.n	800092c <ICU_INT_CheckStatus+0xf0>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <ICU_INT_CheckStatus+0x18>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	0800086d 	.word	0x0800086d
 8000858:	0800088d 	.word	0x0800088d
 800085c:	080008ad 	.word	0x080008ad
 8000860:	080008cd 	.word	0x080008cd
 8000864:	080008ed 	.word	0x080008ed
 8000868:	0800090d 	.word	0x0800090d
	{
	   case channel_1:
		   state = CHECK_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 800086c:	4b33      	ldr	r3, [pc, #204]	; (800093c <ICU_INT_CheckStatus+0x100>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
		   if( state == 0 )
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <ICU_INT_CheckStatus+0x4a>
		   	{
		   	   state = RET_NOK;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
		   	}
		   	else
		   	{
			   state = RET_OK;
			}
	   break;
 8000884:	e052      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
			   state = RET_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
	   break;
 800088a:	e04f      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
	   case channel_2:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <ICU_INT_CheckStatus+0x100>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	089b      	lsrs	r3, r3, #2
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <ICU_INT_CheckStatus+0x6a>
	   	   {
	   		   state = RET_NOK;
 80008a0:	2301      	movs	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 80008a4:	e042      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
	   break;
 80008aa:	e03f      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
	   case channel_3:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC3IF_BIT_3 );
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <ICU_INT_CheckStatus+0x100>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	08db      	lsrs	r3, r3, #3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <ICU_INT_CheckStatus+0x8a>
	   	   {
	   		   state = RET_NOK;
 80008c0:	2301      	movs	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 80008c4:	e032      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
	   break;
 80008ca:	e02f      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
	   case channel_4:
		   state = CHECK_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <ICU_INT_CheckStatus+0x104>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <ICU_INT_CheckStatus+0xaa>
	   	   {
	   		   state = RET_NOK;
 80008e0:	2301      	movs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 80008e4:	e022      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
	   break;
 80008ea:	e01f      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
	   case channel_5:
		   state = CHECK_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <ICU_INT_CheckStatus+0x104>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <ICU_INT_CheckStatus+0xca>
	   	   {
	   		   state = RET_NOK;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8000904:	e012      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
			  state = RET_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
	   break;
 800090a:	e00f      	b.n	800092c <ICU_INT_CheckStatus+0xf0>
	   case channel_6:
		   state = CHECK_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <ICU_INT_CheckStatus+0x104>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <ICU_INT_CheckStatus+0xea>
	   	   {
	   		   state = RET_NOK;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = RET_OK;
	   	   }

	   break;
 8000924:	e001      	b.n	800092a <ICU_INT_CheckStatus+0xee>
			  state = RET_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
	   break;
 800092a:	bf00      	nop

	}

	return state;
 800092c:	7bfb      	ldrb	r3, [r7, #15]

}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40013410 	.word	0x40013410
 8000940:	40012c10 	.word	0x40012c10

08000944 <ICU_Read>:


void ICU_Read(ICU_Channel channel,u16 * read_ptr )
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]

	switch(channel)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b05      	cmp	r3, #5
 8000954:	d832      	bhi.n	80009bc <ICU_Read+0x78>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <ICU_Read+0x18>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	08000975 	.word	0x08000975
 8000960:	08000981 	.word	0x08000981
 8000964:	0800098d 	.word	0x0800098d
 8000968:	08000999 	.word	0x08000999
 800096c:	080009a5 	.word	0x080009a5
 8000970:	080009b1 	.word	0x080009b1
	{
	  case channel_1:
		  * read_ptr = TIM8_CCR1_REG;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <ICU_Read+0x84>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29a      	uxth	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	801a      	strh	r2, [r3, #0]
	  break;
 800097e:	e01d      	b.n	80009bc <ICU_Read+0x78>
	  case channel_2:
		  * read_ptr = TIM8_CCR2_REG;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <ICU_Read+0x88>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b29a      	uxth	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	801a      	strh	r2, [r3, #0]
	  break;
 800098a:	e017      	b.n	80009bc <ICU_Read+0x78>
	  case channel_3:
		  * read_ptr = TIM8_CCR3_REG;
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <ICU_Read+0x8c>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	b29a      	uxth	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	801a      	strh	r2, [r3, #0]
	  break;
 8000996:	e011      	b.n	80009bc <ICU_Read+0x78>
	  case channel_4:
		  * read_ptr = TIM1_CCR1_REG;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <ICU_Read+0x90>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	b29a      	uxth	r2, r3
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	801a      	strh	r2, [r3, #0]
	  break;
 80009a2:	e00b      	b.n	80009bc <ICU_Read+0x78>
	  case channel_5:
		  * read_ptr = TIM1_CCR2_REG;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <ICU_Read+0x94>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	801a      	strh	r2, [r3, #0]
	  break;
 80009ae:	e005      	b.n	80009bc <ICU_Read+0x78>
	  case channel_6:
		  * read_ptr = TIM1_CCR3_REG;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <ICU_Read+0x98>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	801a      	strh	r2, [r3, #0]
	  break;
 80009ba:	bf00      	nop
	}

}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	40013434 	.word	0x40013434
 80009cc:	40013438 	.word	0x40013438
 80009d0:	4001343c 	.word	0x4001343c
 80009d4:	40012c34 	.word	0x40012c34
 80009d8:	40012c38 	.word	0x40012c38
 80009dc:	40012c3c 	.word	0x40012c3c

080009e0 <ICU_INT_Enable>:


void ICU_INT_Enable(ICU_Channel channel,void(*ptr)(void))
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
	switch(channel)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b05      	cmp	r3, #5
 80009f0:	d873      	bhi.n	8000ada <ICU_INT_Enable+0xfa>
 80009f2:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <ICU_INT_Enable+0x18>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000a11 	.word	0x08000a11
 80009fc:	08000a2f 	.word	0x08000a2f
 8000a00:	08000a4d 	.word	0x08000a4d
 8000a04:	08000a6b 	.word	0x08000a6b
 8000a08:	08000a89 	.word	0x08000a89
 8000a0c:	08000aa7 	.word	0x08000aa7
	{
	  case channel_1:
	    	SET_BIT(TIM8_DIER_REG,CC1IE_BIT_1);
 8000a10:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <ICU_INT_Enable+0x108>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4a34      	ldr	r2, [pc, #208]	; (8000ae8 <ICU_INT_Enable+0x108>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	8013      	strh	r3, [r2, #0]
	    	if(ptr != (void*)RET_NULLPTR)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d04e      	beq.n	8000ac4 <ICU_INT_Enable+0xe4>
	    	{
	    		Channel_1_CLB_Ptr = ptr;
 8000a26:	4a31      	ldr	r2, [pc, #196]	; (8000aec <ICU_INT_Enable+0x10c>)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000a2c:	e04a      	b.n	8000ac4 <ICU_INT_Enable+0xe4>
	  case channel_2:
		   SET_BIT(TIM8_DIER_REG,CC2IE_BIT_2);
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <ICU_INT_Enable+0x108>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	4a2c      	ldr	r2, [pc, #176]	; (8000ae8 <ICU_INT_Enable+0x108>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	8013      	strh	r3, [r2, #0]
	    	if(ptr != (void*)RET_NULLPTR)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d041      	beq.n	8000ac8 <ICU_INT_Enable+0xe8>
	    	{
	    		Channel_2_CLB_Ptr = ptr;
 8000a44:	4a2a      	ldr	r2, [pc, #168]	; (8000af0 <ICU_INT_Enable+0x110>)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000a4a:	e03d      	b.n	8000ac8 <ICU_INT_Enable+0xe8>
	  case channel_3:
		   SET_BIT(TIM8_DIER_REG,CC3IE_BIT_3);
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <ICU_INT_Enable+0x108>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <ICU_INT_Enable+0x108>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d034      	beq.n	8000acc <ICU_INT_Enable+0xec>
	    	{
	    		Channel_3_CLB_Ptr = ptr;
 8000a62:	4a24      	ldr	r2, [pc, #144]	; (8000af4 <ICU_INT_Enable+0x114>)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000a68:	e030      	b.n	8000acc <ICU_INT_Enable+0xec>
	  case channel_4:
		   SET_BIT(TIM1_DIER_REG,CC1IE_BIT_1);
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <ICU_INT_Enable+0x118>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <ICU_INT_Enable+0x118>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d027      	beq.n	8000ad0 <ICU_INT_Enable+0xf0>
	    	{
	    		Channel_4_CLB_Ptr = ptr;
 8000a80:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <ICU_INT_Enable+0x11c>)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000a86:	e023      	b.n	8000ad0 <ICU_INT_Enable+0xf0>
	  case channel_5:
		   SET_BIT(TIM1_DIER_REG,CC2IE_BIT_2);
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <ICU_INT_Enable+0x118>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <ICU_INT_Enable+0x118>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d01a      	beq.n	8000ad4 <ICU_INT_Enable+0xf4>
	    	{
	    		Channel_5_CLB_Ptr = ptr;
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <ICU_INT_Enable+0x120>)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000aa4:	e016      	b.n	8000ad4 <ICU_INT_Enable+0xf4>
	  case channel_6:
		   SET_BIT(TIM1_DIER_REG,CC3IE_BIT_3);
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <ICU_INT_Enable+0x118>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <ICU_INT_Enable+0x118>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	8013      	strh	r3, [r2, #0]
	    	if( ptr != (void*)RET_NULLPTR)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d00d      	beq.n	8000ad8 <ICU_INT_Enable+0xf8>
	    	{
	    		Channel_6_CLB_Ptr = ptr;
 8000abc:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <ICU_INT_Enable+0x124>)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 8000ac2:	e009      	b.n	8000ad8 <ICU_INT_Enable+0xf8>
	  break;
 8000ac4:	bf00      	nop
 8000ac6:	e008      	b.n	8000ada <ICU_INT_Enable+0xfa>
	  break;
 8000ac8:	bf00      	nop
 8000aca:	e006      	b.n	8000ada <ICU_INT_Enable+0xfa>
	  break;
 8000acc:	bf00      	nop
 8000ace:	e004      	b.n	8000ada <ICU_INT_Enable+0xfa>
	  break;
 8000ad0:	bf00      	nop
 8000ad2:	e002      	b.n	8000ada <ICU_INT_Enable+0xfa>
	  break;
 8000ad4:	bf00      	nop
 8000ad6:	e000      	b.n	8000ada <ICU_INT_Enable+0xfa>
	  break;
 8000ad8:	bf00      	nop


	}

}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	4001340c 	.word	0x4001340c
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000004 	.word	0x20000004
 8000af4:	20000008 	.word	0x20000008
 8000af8:	40012c0c 	.word	0x40012c0c
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	20000010 	.word	0x20000010
 8000b04:	20000014 	.word	0x20000014

08000b08 <TIM8_CC_IRQHandler>:
}


//TIM8_CC_IRQHandler
void TIM8_CC_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

	if ( ICU_INT_CheckStatus(channel_1 ) == RET_OK  )
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fe95 	bl	800083c <ICU_INT_CheckStatus>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10c      	bne.n	8000b32 <TIM8_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <TIM8_CC_IRQHandler+0x7c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <TIM8_CC_IRQHandler+0x7c>)
 8000b1e:	f023 0302 	bic.w	r3, r3, #2
 8000b22:	6013      	str	r3, [r2, #0]
		if( Channel_1_CLB_Ptr != (void*)RET_NULLPTR )
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <TIM8_CC_IRQHandler+0x80>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d002      	beq.n	8000b32 <TIM8_CC_IRQHandler+0x2a>
		{
			Channel_1_CLB_Ptr();
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <TIM8_CC_IRQHandler+0x80>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_2 ) == RET_OK  )
 8000b32:	2001      	movs	r0, #1
 8000b34:	f7ff fe82 	bl	800083c <ICU_INT_CheckStatus>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10c      	bne.n	8000b58 <TIM8_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <TIM8_CC_IRQHandler+0x7c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <TIM8_CC_IRQHandler+0x7c>)
 8000b44:	f023 0304 	bic.w	r3, r3, #4
 8000b48:	6013      	str	r3, [r2, #0]
		if( Channel_2_CLB_Ptr != (void*)RET_NULLPTR )
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <TIM8_CC_IRQHandler+0x84>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d002      	beq.n	8000b58 <TIM8_CC_IRQHandler+0x50>
		{
			Channel_2_CLB_Ptr();
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <TIM8_CC_IRQHandler+0x84>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_3 ) == RET_OK  )
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f7ff fe6f 	bl	800083c <ICU_INT_CheckStatus>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10c      	bne.n	8000b7e <TIM8_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM8_SR_REG ,CC3IF_BIT_3 );
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <TIM8_CC_IRQHandler+0x7c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <TIM8_CC_IRQHandler+0x7c>)
 8000b6a:	f023 0308 	bic.w	r3, r3, #8
 8000b6e:	6013      	str	r3, [r2, #0]
		if( Channel_3_CLB_Ptr != (void*)RET_NULLPTR )
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <TIM8_CC_IRQHandler+0x88>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d002      	beq.n	8000b7e <TIM8_CC_IRQHandler+0x76>
		{
			Channel_3_CLB_Ptr();
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <TIM8_CC_IRQHandler+0x88>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4798      	blx	r3
		}
	}

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013410 	.word	0x40013410
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	20000008 	.word	0x20000008

08000b94 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	if ( ICU_INT_CheckStatus(channel_4 ) == RET_OK  )
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f7ff fe4f 	bl	800083c <ICU_INT_CheckStatus>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10c      	bne.n	8000bbe <TIM1_CC_IRQHandler+0x2a>
	{
		CLEAR_BIT( TIM1_SR_REG , CC1IF_BIT_1 );
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <TIM1_CC_IRQHandler+0x7c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <TIM1_CC_IRQHandler+0x7c>)
 8000baa:	f023 0302 	bic.w	r3, r3, #2
 8000bae:	6013      	str	r3, [r2, #0]
		if( Channel_4_CLB_Ptr != (void*)RET_NULLPTR )
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <TIM1_CC_IRQHandler+0x80>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d002      	beq.n	8000bbe <TIM1_CC_IRQHandler+0x2a>
		{
			Channel_4_CLB_Ptr();
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <TIM1_CC_IRQHandler+0x80>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_5 ) == RET_OK  )
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f7ff fe3c 	bl	800083c <ICU_INT_CheckStatus>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10c      	bne.n	8000be4 <TIM1_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM1_SR_REG , CC2IF_BIT_2 );
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <TIM1_CC_IRQHandler+0x7c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <TIM1_CC_IRQHandler+0x7c>)
 8000bd0:	f023 0304 	bic.w	r3, r3, #4
 8000bd4:	6013      	str	r3, [r2, #0]
		if( Channel_5_CLB_Ptr != (void*)RET_NULLPTR )
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <TIM1_CC_IRQHandler+0x84>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d002      	beq.n	8000be4 <TIM1_CC_IRQHandler+0x50>
		{
			Channel_5_CLB_Ptr();
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <TIM1_CC_IRQHandler+0x84>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4798      	blx	r3
		}
	}

	if ( ICU_INT_CheckStatus(channel_6 ) == RET_OK  )
 8000be4:	2005      	movs	r0, #5
 8000be6:	f7ff fe29 	bl	800083c <ICU_INT_CheckStatus>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10c      	bne.n	8000c0a <TIM1_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM1_SR_REG , CC3IF_BIT_3 );
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <TIM1_CC_IRQHandler+0x7c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <TIM1_CC_IRQHandler+0x7c>)
 8000bf6:	f023 0308 	bic.w	r3, r3, #8
 8000bfa:	6013      	str	r3, [r2, #0]
		if( Channel_6_CLB_Ptr != (void*)RET_NULLPTR )
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <TIM1_CC_IRQHandler+0x88>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d002      	beq.n	8000c0a <TIM1_CC_IRQHandler+0x76>
		{
			Channel_6_CLB_Ptr();
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <TIM1_CC_IRQHandler+0x88>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4798      	blx	r3
		}
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012c10 	.word	0x40012c10
 8000c14:	2000000c 	.word	0x2000000c
 8000c18:	20000010 	.word	0x20000010
 8000c1c:	20000014 	.word	0x20000014

08000c20 <NVIC_EnableIRQ>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b490      	push	{r4, r7}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState Ret_Val = RET_NOK;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
	if((u8)IRQn >= 0)
	{
		NVIC_ISER->ISER[(IRQn / 32)] |= (1 << (IRQn % 32));
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <NVIC_EnableIRQ+0x44>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	b2d8      	uxtb	r0, r3
 8000c36:	4603      	mov	r3, r0
 8000c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	f002 021f 	and.w	r2, r2, #31
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	4614      	mov	r4, r2
 8000c4a:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <NVIC_EnableIRQ+0x44>)
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	4323      	orrs	r3, r4
 8000c50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		Ret_Val = RET_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
	}
	return Ret_Val;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc90      	pop	{r4, r7}
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <NVIC_SetPriority>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState NVIC_SetPriority(IRQn_Type IRQn,u32 priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState Ret_Val = RET_NOK;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
	if(IRQn >=0)
	{
		NVIC_IPR->IPR[(u32)IRQn] = (u8)(priority <<4)	&(u32)0xff;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4906      	ldr	r1, [pc, #24]	; (8000c98 <NVIC_SetPriority+0x30>)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	54ca      	strb	r2, [r1, r3]
		Ret_Val = RET_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
	}
	return Ret_Val;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e400 	.word	0xe000e400

08000c9c <TIM6_Init>:
 * Parameters (in) : parameterName   Parameter Description
 * Return value:   : Std_ReturnType  E_OK
 *                                    E_NOT_OK
 *******************************************************************************/
void TIM6_Init(u16 prescaler)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]
	/*Auto-reload pre-load enable*/
	SET_BIT(TIM6_CR1_REG, ARPE_BIT_7);
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <TIM6_Init+0x3c>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <TIM6_Init+0x3c>)
 8000cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	8013      	strh	r3, [r2, #0]


	SET_BIT(TIM6_CR1_REG, OPM_BIT_3);
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <TIM6_Init+0x3c>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <TIM6_Init+0x3c>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	8013      	strh	r3, [r2, #0]
	/*Set pre-scaler*/
	TIM6_PSC_REG = prescaler;
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <TIM6_Init+0x40>)
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	8013      	strh	r3, [r2, #0]

}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40001000 	.word	0x40001000
 8000cdc:	40001028 	.word	0x40001028

08000ce0 <TIM6_Delay>:
 * Parameters (in) : parameterName   Parameter Description
 * Return value:   : Std_ReturnType  E_OK
 *                                    E_NOT_OK
 *******************************************************************************/
void TIM6_Delay (u16 loadVal)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
	/*Set auto-reload value*/
	TIM6_ARR_REG = loadVal;
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <TIM6_Delay+0x4c>)
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	8013      	strh	r3, [r2, #0]

	/*Start the counter*/
	SET_BIT(TIM6_CR1_REG, CEN_BIT_0);
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <TIM6_Delay+0x50>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <TIM6_Delay+0x50>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	8013      	strh	r3, [r2, #0]

	/*Polling on the flag*/
	while(CHECK_BIT(TIM6_SR_REG, UIF_BIT_0) == STD_LOW);
 8000d00:	bf00      	nop
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <TIM6_Delay+0x54>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f8      	beq.n	8000d02 <TIM6_Delay+0x22>

	/*Clear flag by software*/
	CLEAR_BIT(TIM6_SR_REG, UIF_BIT_0);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <TIM6_Delay+0x54>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <TIM6_Delay+0x54>)
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	8013      	strh	r3, [r2, #0]

}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	4000102c 	.word	0x4000102c
 8000d30:	40001000 	.word	0x40001000
 8000d34:	40001010 	.word	0x40001010

08000d38 <DIO_setupPinMode>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
STD_ReturnState DIO_setupPinMode(DIO_PortID portID, DIO_PinID pinID, DIO_PinMode pinMode)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
 8000d42:	460b      	mov	r3, r1
 8000d44:	71bb      	strb	r3, [r7, #6]
 8000d46:	4613      	mov	r3, r2
 8000d48:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]

	if((portID >= NUM_OF_PORTS) || (pinID >= NUM_OF_PINS_PER_PORT))
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	d802      	bhi.n	8000d5a <DIO_setupPinMode+0x22>
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	2b0e      	cmp	r3, #14
 8000d58:	d902      	bls.n	8000d60 <DIO_setupPinMode+0x28>
	{
		Ret_Val = RET_NOK;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e0b1      	b.n	8000ec4 <DIO_setupPinMode+0x18c>
	}

	else
	{
		switch(portID)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b07      	cmp	r3, #7
 8000d64:	f200 80ae 	bhi.w	8000ec4 <DIO_setupPinMode+0x18c>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <DIO_setupPinMode+0x38>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d91 	.word	0x08000d91
 8000d74:	08000dbb 	.word	0x08000dbb
 8000d78:	08000de1 	.word	0x08000de1
 8000d7c:	08000e07 	.word	0x08000e07
 8000d80:	08000e2d 	.word	0x08000e2d
 8000d84:	08000e53 	.word	0x08000e53
 8000d88:	08000e79 	.word	0x08000e79
 8000d8c:	08000e9f 	.word	0x08000e9f
		{
		case PORTA_ID:
			DIOA_MODER_REG = (DIOA_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000d90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	0052      	lsls	r2, r2, #1
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	4013      	ands	r3, r2
 8000da4:	7979      	ldrb	r1, [r7, #5]
 8000da6:	79ba      	ldrb	r2, [r7, #6]
 8000da8:	0052      	lsls	r2, r2, #1
 8000daa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dae:	4611      	mov	r1, r2
 8000db0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
			break;
 8000db8:	e084      	b.n	8000ec4 <DIO_setupPinMode+0x18c>

		case PORTB_ID:
			DIOB_MODER_REG = (DIOB_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000dba:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <DIO_setupPinMode+0x19c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	79ba      	ldrb	r2, [r7, #6]
 8000dc0:	0052      	lsls	r2, r2, #1
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc8:	43d2      	mvns	r2, r2
 8000dca:	4013      	ands	r3, r2
 8000dcc:	7979      	ldrb	r1, [r7, #5]
 8000dce:	79ba      	ldrb	r2, [r7, #6]
 8000dd0:	0052      	lsls	r2, r2, #1
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4a3e      	ldr	r2, [pc, #248]	; (8000ed4 <DIO_setupPinMode+0x19c>)
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	6013      	str	r3, [r2, #0]
			break;
 8000dde:	e071      	b.n	8000ec4 <DIO_setupPinMode+0x18c>

		case PORTC_ID:
			DIOC_MODER_REG = (DIOC_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <DIO_setupPinMode+0x1a0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	79ba      	ldrb	r2, [r7, #6]
 8000de6:	0052      	lsls	r2, r2, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	43d2      	mvns	r2, r2
 8000df0:	4013      	ands	r3, r2
 8000df2:	7979      	ldrb	r1, [r7, #5]
 8000df4:	79ba      	ldrb	r2, [r7, #6]
 8000df6:	0052      	lsls	r2, r2, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4a36      	ldr	r2, [pc, #216]	; (8000ed8 <DIO_setupPinMode+0x1a0>)
 8000e00:	430b      	orrs	r3, r1
 8000e02:	6013      	str	r3, [r2, #0]
			break;
 8000e04:	e05e      	b.n	8000ec4 <DIO_setupPinMode+0x18c>

		case PORTD_ID:
			DIOD_MODER_REG = (DIOD_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000e06:	4b35      	ldr	r3, [pc, #212]	; (8000edc <DIO_setupPinMode+0x1a4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	79ba      	ldrb	r2, [r7, #6]
 8000e0c:	0052      	lsls	r2, r2, #1
 8000e0e:	2103      	movs	r1, #3
 8000e10:	fa01 f202 	lsl.w	r2, r1, r2
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	4013      	ands	r3, r2
 8000e18:	7979      	ldrb	r1, [r7, #5]
 8000e1a:	79ba      	ldrb	r2, [r7, #6]
 8000e1c:	0052      	lsls	r2, r2, #1
 8000e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e22:	4611      	mov	r1, r2
 8000e24:	4a2d      	ldr	r2, [pc, #180]	; (8000edc <DIO_setupPinMode+0x1a4>)
 8000e26:	430b      	orrs	r3, r1
 8000e28:	6013      	str	r3, [r2, #0]
			break;
 8000e2a:	e04b      	b.n	8000ec4 <DIO_setupPinMode+0x18c>

		case PORTE_ID:
			DIOE_MODER_REG = (DIOE_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <DIO_setupPinMode+0x1a8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	79ba      	ldrb	r2, [r7, #6]
 8000e32:	0052      	lsls	r2, r2, #1
 8000e34:	2103      	movs	r1, #3
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	43d2      	mvns	r2, r2
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	7979      	ldrb	r1, [r7, #5]
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	4611      	mov	r1, r2
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <DIO_setupPinMode+0x1a8>)
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6013      	str	r3, [r2, #0]
			break;
 8000e50:	e038      	b.n	8000ec4 <DIO_setupPinMode+0x18c>

		case PORTF_ID:
			DIOF_MODER_REG = (DIOF_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <DIO_setupPinMode+0x1ac>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	0052      	lsls	r2, r2, #1
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	43d2      	mvns	r2, r2
 8000e62:	4013      	ands	r3, r2
 8000e64:	7979      	ldrb	r1, [r7, #5]
 8000e66:	79ba      	ldrb	r2, [r7, #6]
 8000e68:	0052      	lsls	r2, r2, #1
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <DIO_setupPinMode+0x1ac>)
 8000e72:	430b      	orrs	r3, r1
 8000e74:	6013      	str	r3, [r2, #0]
			break;
 8000e76:	e025      	b.n	8000ec4 <DIO_setupPinMode+0x18c>

		case PORTG_ID:
			DIOG_MODER_REG = (DIOG_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <DIO_setupPinMode+0x1b0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	79ba      	ldrb	r2, [r7, #6]
 8000e7e:	0052      	lsls	r2, r2, #1
 8000e80:	2103      	movs	r1, #3
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	43d2      	mvns	r2, r2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	7979      	ldrb	r1, [r7, #5]
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	0052      	lsls	r2, r2, #1
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	4611      	mov	r1, r2
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <DIO_setupPinMode+0x1b0>)
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6013      	str	r3, [r2, #0]
			break;
 8000e9c:	e012      	b.n	8000ec4 <DIO_setupPinMode+0x18c>

		case PORTH_ID:
			DIOH_MODER_REG = (DIOH_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <DIO_setupPinMode+0x1b4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	79ba      	ldrb	r2, [r7, #6]
 8000ea4:	0052      	lsls	r2, r2, #1
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	43d2      	mvns	r2, r2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	7979      	ldrb	r1, [r7, #5]
 8000eb2:	79ba      	ldrb	r2, [r7, #6]
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <DIO_setupPinMode+0x1b4>)
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6013      	str	r3, [r2, #0]
			break;
 8000ec2:	bf00      	nop
		}
	}

	return Ret_Val;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	48000400 	.word	0x48000400
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	48000c00 	.word	0x48000c00
 8000ee0:	48001000 	.word	0x48001000
 8000ee4:	48001400 	.word	0x48001400
 8000ee8:	48001800 	.word	0x48001800
 8000eec:	48001c00 	.word	0x48001c00

08000ef0 <DIO_writePin>:

STD_ReturnState DIO_writePin(DIO_PortID portID, DIO_PinID pinID, DIO_PinLevel pinLevel)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	460b      	mov	r3, r1
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b07      	cmp	r3, #7
 8000f0a:	d802      	bhi.n	8000f12 <DIO_writePin+0x22>
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	2b0e      	cmp	r3, #14
 8000f10:	d902      	bls.n	8000f18 <DIO_writePin+0x28>
	{
		Ret_Val = RET_NOK;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e0e7      	b.n	80010e8 <DIO_writePin+0x1f8>
	}

	else
	{
		switch(portID)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b07      	cmp	r3, #7
 8000f1c:	f200 80e4 	bhi.w	80010e8 <DIO_writePin+0x1f8>
 8000f20:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <DIO_writePin+0x38>)
 8000f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f26:	bf00      	nop
 8000f28:	08000f49 	.word	0x08000f49
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000fb1 	.word	0x08000fb1
 8000f34:	08000fe5 	.word	0x08000fe5
 8000f38:	08001019 	.word	0x08001019
 8000f3c:	0800104d 	.word	0x0800104d
 8000f40:	08001081 	.word	0x08001081
 8000f44:	080010b5 	.word	0x080010b5
		{
		case PORTA_ID:
			if(pinLevel == LOGIC_LOW)
 8000f48:	797b      	ldrb	r3, [r7, #5]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10b      	bne.n	8000f66 <DIO_writePin+0x76>
			{
				CLEAR_BIT(DIOA_ODR_REG, pinID);
 8000f4e:	4b6a      	ldr	r3, [pc, #424]	; (80010f8 <DIO_writePin+0x208>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	79ba      	ldrb	r2, [r7, #6]
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	43d2      	mvns	r2, r2
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4a66      	ldr	r2, [pc, #408]	; (80010f8 <DIO_writePin+0x208>)
 8000f60:	400b      	ands	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOA_ODR_REG, pinID);
			}
			break;
 8000f64:	e0c0      	b.n	80010e8 <DIO_writePin+0x1f8>
				SET_BIT(DIOA_ODR_REG, pinID);
 8000f66:	4b64      	ldr	r3, [pc, #400]	; (80010f8 <DIO_writePin+0x208>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	79ba      	ldrb	r2, [r7, #6]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4611      	mov	r1, r2
 8000f74:	4a60      	ldr	r2, [pc, #384]	; (80010f8 <DIO_writePin+0x208>)
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6013      	str	r3, [r2, #0]
			break;
 8000f7a:	e0b5      	b.n	80010e8 <DIO_writePin+0x1f8>

		case PORTB_ID:
			if(pinLevel == LOGIC_LOW)
 8000f7c:	797b      	ldrb	r3, [r7, #5]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10b      	bne.n	8000f9a <DIO_writePin+0xaa>
			{
				CLEAR_BIT(DIOB_ODR_REG, pinID);
 8000f82:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <DIO_writePin+0x20c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	79ba      	ldrb	r2, [r7, #6]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	43d2      	mvns	r2, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <DIO_writePin+0x20c>)
 8000f94:	400b      	ands	r3, r1
 8000f96:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOB_ODR_REG, pinID);
			}
			break;
 8000f98:	e0a6      	b.n	80010e8 <DIO_writePin+0x1f8>
				SET_BIT(DIOB_ODR_REG, pinID);
 8000f9a:	4b58      	ldr	r3, [pc, #352]	; (80010fc <DIO_writePin+0x20c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4a54      	ldr	r2, [pc, #336]	; (80010fc <DIO_writePin+0x20c>)
 8000faa:	430b      	orrs	r3, r1
 8000fac:	6013      	str	r3, [r2, #0]
			break;
 8000fae:	e09b      	b.n	80010e8 <DIO_writePin+0x1f8>

		case PORTC_ID:
			if(pinLevel == LOGIC_LOW)
 8000fb0:	797b      	ldrb	r3, [r7, #5]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10b      	bne.n	8000fce <DIO_writePin+0xde>
			{
				CLEAR_BIT(DIOC_ODR_REG, pinID);
 8000fb6:	4b52      	ldr	r3, [pc, #328]	; (8001100 <DIO_writePin+0x210>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	79ba      	ldrb	r2, [r7, #6]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	43d2      	mvns	r2, r2
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a4e      	ldr	r2, [pc, #312]	; (8001100 <DIO_writePin+0x210>)
 8000fc8:	400b      	ands	r3, r1
 8000fca:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOC_ODR_REG, pinID);
			}
			break;
 8000fcc:	e08c      	b.n	80010e8 <DIO_writePin+0x1f8>
				SET_BIT(DIOC_ODR_REG, pinID);
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <DIO_writePin+0x210>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	79ba      	ldrb	r2, [r7, #6]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4a48      	ldr	r2, [pc, #288]	; (8001100 <DIO_writePin+0x210>)
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	6013      	str	r3, [r2, #0]
			break;
 8000fe2:	e081      	b.n	80010e8 <DIO_writePin+0x1f8>

		case PORTD_ID:
			if(pinLevel == LOGIC_LOW)
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10b      	bne.n	8001002 <DIO_writePin+0x112>
			{
				CLEAR_BIT(DIOD_ODR_REG, pinID);
 8000fea:	4b46      	ldr	r3, [pc, #280]	; (8001104 <DIO_writePin+0x214>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	79ba      	ldrb	r2, [r7, #6]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	43d2      	mvns	r2, r2
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4a42      	ldr	r2, [pc, #264]	; (8001104 <DIO_writePin+0x214>)
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOD_ODR_REG, pinID);
			}
			break;
 8001000:	e072      	b.n	80010e8 <DIO_writePin+0x1f8>
				SET_BIT(DIOD_ODR_REG, pinID);
 8001002:	4b40      	ldr	r3, [pc, #256]	; (8001104 <DIO_writePin+0x214>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	79ba      	ldrb	r2, [r7, #6]
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	4611      	mov	r1, r2
 8001010:	4a3c      	ldr	r2, [pc, #240]	; (8001104 <DIO_writePin+0x214>)
 8001012:	430b      	orrs	r3, r1
 8001014:	6013      	str	r3, [r2, #0]
			break;
 8001016:	e067      	b.n	80010e8 <DIO_writePin+0x1f8>

		case PORTE_ID:
			if(pinLevel == LOGIC_LOW)
 8001018:	797b      	ldrb	r3, [r7, #5]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10b      	bne.n	8001036 <DIO_writePin+0x146>
			{
				CLEAR_BIT(DIOE_ODR_REG, pinID);
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <DIO_writePin+0x218>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	79ba      	ldrb	r2, [r7, #6]
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	43d2      	mvns	r2, r2
 800102c:	4611      	mov	r1, r2
 800102e:	4a36      	ldr	r2, [pc, #216]	; (8001108 <DIO_writePin+0x218>)
 8001030:	400b      	ands	r3, r1
 8001032:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOE_ODR_REG, pinID);
			}
			break;
 8001034:	e058      	b.n	80010e8 <DIO_writePin+0x1f8>
				SET_BIT(DIOE_ODR_REG, pinID);
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <DIO_writePin+0x218>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	79ba      	ldrb	r2, [r7, #6]
 800103c:	2101      	movs	r1, #1
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	4611      	mov	r1, r2
 8001044:	4a30      	ldr	r2, [pc, #192]	; (8001108 <DIO_writePin+0x218>)
 8001046:	430b      	orrs	r3, r1
 8001048:	6013      	str	r3, [r2, #0]
			break;
 800104a:	e04d      	b.n	80010e8 <DIO_writePin+0x1f8>

		case PORTF_ID:
			if(pinLevel == LOGIC_LOW)
 800104c:	797b      	ldrb	r3, [r7, #5]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10b      	bne.n	800106a <DIO_writePin+0x17a>
			{
				CLEAR_BIT(DIOF_ODR_REG, pinID);
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <DIO_writePin+0x21c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	79ba      	ldrb	r2, [r7, #6]
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	43d2      	mvns	r2, r2
 8001060:	4611      	mov	r1, r2
 8001062:	4a2a      	ldr	r2, [pc, #168]	; (800110c <DIO_writePin+0x21c>)
 8001064:	400b      	ands	r3, r1
 8001066:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOF_ODR_REG, pinID);
			}
			break;
 8001068:	e03e      	b.n	80010e8 <DIO_writePin+0x1f8>
				SET_BIT(DIOF_ODR_REG, pinID);
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <DIO_writePin+0x21c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	79ba      	ldrb	r2, [r7, #6]
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	4611      	mov	r1, r2
 8001078:	4a24      	ldr	r2, [pc, #144]	; (800110c <DIO_writePin+0x21c>)
 800107a:	430b      	orrs	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
			break;
 800107e:	e033      	b.n	80010e8 <DIO_writePin+0x1f8>

		case PORTG_ID:
			if(pinLevel == LOGIC_LOW)
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10b      	bne.n	800109e <DIO_writePin+0x1ae>
			{
				CLEAR_BIT(DIOG_ODR_REG, pinID);
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <DIO_writePin+0x220>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	79ba      	ldrb	r2, [r7, #6]
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	43d2      	mvns	r2, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <DIO_writePin+0x220>)
 8001098:	400b      	ands	r3, r1
 800109a:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOG_ODR_REG, pinID);
			}
			break;
 800109c:	e024      	b.n	80010e8 <DIO_writePin+0x1f8>
				SET_BIT(DIOG_ODR_REG, pinID);
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <DIO_writePin+0x220>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	79ba      	ldrb	r2, [r7, #6]
 80010a4:	2101      	movs	r1, #1
 80010a6:	fa01 f202 	lsl.w	r2, r1, r2
 80010aa:	4611      	mov	r1, r2
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <DIO_writePin+0x220>)
 80010ae:	430b      	orrs	r3, r1
 80010b0:	6013      	str	r3, [r2, #0]
			break;
 80010b2:	e019      	b.n	80010e8 <DIO_writePin+0x1f8>

		case PORTH_ID:
			if(pinLevel == LOGIC_LOW)
 80010b4:	797b      	ldrb	r3, [r7, #5]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10b      	bne.n	80010d2 <DIO_writePin+0x1e2>
			{
				CLEAR_BIT(DIOH_ODR_REG, pinID);
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <DIO_writePin+0x224>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	79ba      	ldrb	r2, [r7, #6]
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	43d2      	mvns	r2, r2
 80010c8:	4611      	mov	r1, r2
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <DIO_writePin+0x224>)
 80010cc:	400b      	ands	r3, r1
 80010ce:	6013      	str	r3, [r2, #0]
			}
			else
			{
				SET_BIT(DIOH_ODR_REG, pinID);
			}
			break;
 80010d0:	e009      	b.n	80010e6 <DIO_writePin+0x1f6>
				SET_BIT(DIOH_ODR_REG, pinID);
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <DIO_writePin+0x224>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	79ba      	ldrb	r2, [r7, #6]
 80010d8:	2101      	movs	r1, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	4611      	mov	r1, r2
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <DIO_writePin+0x224>)
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6013      	str	r3, [r2, #0]
			break;
 80010e6:	bf00      	nop
		}
	}

	return Ret_Val;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	48000014 	.word	0x48000014
 80010fc:	48000414 	.word	0x48000414
 8001100:	48000814 	.word	0x48000814
 8001104:	48000c14 	.word	0x48000c14
 8001108:	48001014 	.word	0x48001014
 800110c:	48001414 	.word	0x48001414
 8001110:	48001814 	.word	0x48001814
 8001114:	48001c14 	.word	0x48001c14

08001118 <DIO_setAlternateFunction>:

	return Ret_Val;
}

STD_ReturnState DIO_setAlternateFunction (DIO_PortID portID, DIO_PinID pinID, DIO_AltFuncID altFunID)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	460b      	mov	r3, r1
 8001124:	71bb      	strb	r3, [r7, #6]
 8001126:	4613      	mov	r3, r2
 8001128:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = RET_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b07      	cmp	r3, #7
 8001132:	d802      	bhi.n	800113a <DIO_setAlternateFunction+0x22>
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	2b0e      	cmp	r3, #14
 8001138:	d902      	bls.n	8001140 <DIO_setAlternateFunction+0x28>
	{
		Ret_Val = RET_NOK;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e16f      	b.n	8001420 <DIO_setAlternateFunction+0x308>
	}

	else if(pinID >= PIN0_ID && pinID <= PIN7_ID)
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	2b07      	cmp	r3, #7
 8001144:	f200 80b1 	bhi.w	80012aa <DIO_setAlternateFunction+0x192>
	{
		switch (portID)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b07      	cmp	r3, #7
 800114c:	f200 8168 	bhi.w	8001420 <DIO_setAlternateFunction+0x308>
 8001150:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <DIO_setAlternateFunction+0x40>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001179 	.word	0x08001179
 800115c:	0800119f 	.word	0x0800119f
 8001160:	080011c5 	.word	0x080011c5
 8001164:	080011eb 	.word	0x080011eb
 8001168:	08001211 	.word	0x08001211
 800116c:	08001237 	.word	0x08001237
 8001170:	0800125d 	.word	0x0800125d
 8001174:	08001283 	.word	0x08001283
		{
		case PORTA_ID:
			DIOA_AFRL_REG = (DIOA_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001178:	4bad      	ldr	r3, [pc, #692]	; (8001430 <DIO_setAlternateFunction+0x318>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	210f      	movs	r1, #15
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	43d2      	mvns	r2, r2
 8001188:	4013      	ands	r3, r2
 800118a:	7979      	ldrb	r1, [r7, #5]
 800118c:	79ba      	ldrb	r2, [r7, #6]
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4611      	mov	r1, r2
 8001196:	4aa6      	ldr	r2, [pc, #664]	; (8001430 <DIO_setAlternateFunction+0x318>)
 8001198:	430b      	orrs	r3, r1
 800119a:	6013      	str	r3, [r2, #0]
			break;
 800119c:	e140      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRL_REG = (DIOB_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800119e:	4ba5      	ldr	r3, [pc, #660]	; (8001434 <DIO_setAlternateFunction+0x31c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	79ba      	ldrb	r2, [r7, #6]
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	210f      	movs	r1, #15
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	4013      	ands	r3, r2
 80011b0:	7979      	ldrb	r1, [r7, #5]
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	4611      	mov	r1, r2
 80011bc:	4a9d      	ldr	r2, [pc, #628]	; (8001434 <DIO_setAlternateFunction+0x31c>)
 80011be:	430b      	orrs	r3, r1
 80011c0:	6013      	str	r3, [r2, #0]
			break;
 80011c2:	e12d      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRL_REG = (DIOC_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80011c4:	4b9c      	ldr	r3, [pc, #624]	; (8001438 <DIO_setAlternateFunction+0x320>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	79ba      	ldrb	r2, [r7, #6]
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	210f      	movs	r1, #15
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	43d2      	mvns	r2, r2
 80011d4:	4013      	ands	r3, r2
 80011d6:	7979      	ldrb	r1, [r7, #5]
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	4611      	mov	r1, r2
 80011e2:	4a95      	ldr	r2, [pc, #596]	; (8001438 <DIO_setAlternateFunction+0x320>)
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6013      	str	r3, [r2, #0]
			break;
 80011e8:	e11a      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRL_REG = (DIOD_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80011ea:	4b94      	ldr	r3, [pc, #592]	; (800143c <DIO_setAlternateFunction+0x324>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	79ba      	ldrb	r2, [r7, #6]
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	210f      	movs	r1, #15
 80011f4:	fa01 f202 	lsl.w	r2, r1, r2
 80011f8:	43d2      	mvns	r2, r2
 80011fa:	4013      	ands	r3, r2
 80011fc:	7979      	ldrb	r1, [r7, #5]
 80011fe:	79ba      	ldrb	r2, [r7, #6]
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
 8001206:	4611      	mov	r1, r2
 8001208:	4a8c      	ldr	r2, [pc, #560]	; (800143c <DIO_setAlternateFunction+0x324>)
 800120a:	430b      	orrs	r3, r1
 800120c:	6013      	str	r3, [r2, #0]
			break;
 800120e:	e107      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRL_REG = (DIOE_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001210:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <DIO_setAlternateFunction+0x328>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	79ba      	ldrb	r2, [r7, #6]
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	210f      	movs	r1, #15
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	43d2      	mvns	r2, r2
 8001220:	4013      	ands	r3, r2
 8001222:	7979      	ldrb	r1, [r7, #5]
 8001224:	79ba      	ldrb	r2, [r7, #6]
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	4611      	mov	r1, r2
 800122e:	4a84      	ldr	r2, [pc, #528]	; (8001440 <DIO_setAlternateFunction+0x328>)
 8001230:	430b      	orrs	r3, r1
 8001232:	6013      	str	r3, [r2, #0]
			break;
 8001234:	e0f4      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRL_REG = (DIOF_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001236:	4b83      	ldr	r3, [pc, #524]	; (8001444 <DIO_setAlternateFunction+0x32c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	79ba      	ldrb	r2, [r7, #6]
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	210f      	movs	r1, #15
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	43d2      	mvns	r2, r2
 8001246:	4013      	ands	r3, r2
 8001248:	7979      	ldrb	r1, [r7, #5]
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	4611      	mov	r1, r2
 8001254:	4a7b      	ldr	r2, [pc, #492]	; (8001444 <DIO_setAlternateFunction+0x32c>)
 8001256:	430b      	orrs	r3, r1
 8001258:	6013      	str	r3, [r2, #0]
			break;
 800125a:	e0e1      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRL_REG = (DIOG_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800125c:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <DIO_setAlternateFunction+0x330>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	79ba      	ldrb	r2, [r7, #6]
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	210f      	movs	r1, #15
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	43d2      	mvns	r2, r2
 800126c:	4013      	ands	r3, r2
 800126e:	7979      	ldrb	r1, [r7, #5]
 8001270:	79ba      	ldrb	r2, [r7, #6]
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	4611      	mov	r1, r2
 800127a:	4a73      	ldr	r2, [pc, #460]	; (8001448 <DIO_setAlternateFunction+0x330>)
 800127c:	430b      	orrs	r3, r1
 800127e:	6013      	str	r3, [r2, #0]
			break;
 8001280:	e0ce      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRL_REG = (DIOH_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001282:	4b72      	ldr	r3, [pc, #456]	; (800144c <DIO_setAlternateFunction+0x334>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	79ba      	ldrb	r2, [r7, #6]
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	210f      	movs	r1, #15
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	43d2      	mvns	r2, r2
 8001292:	4013      	ands	r3, r2
 8001294:	7979      	ldrb	r1, [r7, #5]
 8001296:	79ba      	ldrb	r2, [r7, #6]
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	4611      	mov	r1, r2
 80012a0:	4a6a      	ldr	r2, [pc, #424]	; (800144c <DIO_setAlternateFunction+0x334>)
 80012a2:	430b      	orrs	r3, r1
 80012a4:	6013      	str	r3, [r2, #0]
			break;
 80012a6:	bf00      	nop
 80012a8:	e0ba      	b.n	8001420 <DIO_setAlternateFunction+0x308>
		}
	}

	else if(pinID >= PIN8_ID && pinID <= PIN15_ID)
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	2b07      	cmp	r3, #7
 80012ae:	f240 80b7 	bls.w	8001420 <DIO_setAlternateFunction+0x308>
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	f200 80b3 	bhi.w	8001420 <DIO_setAlternateFunction+0x308>
	{
		pinID = pinID - 8;
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	3b08      	subs	r3, #8
 80012be:	71bb      	strb	r3, [r7, #6]

		switch (portID)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	f200 80ac 	bhi.w	8001420 <DIO_setAlternateFunction+0x308>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <DIO_setAlternateFunction+0x1b8>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	080012f1 	.word	0x080012f1
 80012d4:	08001317 	.word	0x08001317
 80012d8:	0800133d 	.word	0x0800133d
 80012dc:	08001363 	.word	0x08001363
 80012e0:	08001389 	.word	0x08001389
 80012e4:	080013af 	.word	0x080013af
 80012e8:	080013d5 	.word	0x080013d5
 80012ec:	080013fb 	.word	0x080013fb
		{
		case PORTA_ID:
			DIOA_AFRH_REG = (DIOA_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80012f0:	4b57      	ldr	r3, [pc, #348]	; (8001450 <DIO_setAlternateFunction+0x338>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	210f      	movs	r1, #15
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	43d2      	mvns	r2, r2
 8001300:	4013      	ands	r3, r2
 8001302:	7979      	ldrb	r1, [r7, #5]
 8001304:	79ba      	ldrb	r2, [r7, #6]
 8001306:	0092      	lsls	r2, r2, #2
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	4611      	mov	r1, r2
 800130e:	4a50      	ldr	r2, [pc, #320]	; (8001450 <DIO_setAlternateFunction+0x338>)
 8001310:	430b      	orrs	r3, r1
 8001312:	6013      	str	r3, [r2, #0]
			break;
 8001314:	e084      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRH_REG = (DIOB_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001316:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <DIO_setAlternateFunction+0x33c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	79ba      	ldrb	r2, [r7, #6]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	210f      	movs	r1, #15
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	43d2      	mvns	r2, r2
 8001326:	4013      	ands	r3, r2
 8001328:	7979      	ldrb	r1, [r7, #5]
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	4611      	mov	r1, r2
 8001334:	4a47      	ldr	r2, [pc, #284]	; (8001454 <DIO_setAlternateFunction+0x33c>)
 8001336:	430b      	orrs	r3, r1
 8001338:	6013      	str	r3, [r2, #0]
			break;
 800133a:	e071      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRH_REG = (DIOC_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800133c:	4b46      	ldr	r3, [pc, #280]	; (8001458 <DIO_setAlternateFunction+0x340>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	210f      	movs	r1, #15
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	43d2      	mvns	r2, r2
 800134c:	4013      	ands	r3, r2
 800134e:	7979      	ldrb	r1, [r7, #5]
 8001350:	79ba      	ldrb	r2, [r7, #6]
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	fa01 f202 	lsl.w	r2, r1, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4a3f      	ldr	r2, [pc, #252]	; (8001458 <DIO_setAlternateFunction+0x340>)
 800135c:	430b      	orrs	r3, r1
 800135e:	6013      	str	r3, [r2, #0]
			break;
 8001360:	e05e      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRH_REG = (DIOD_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <DIO_setAlternateFunction+0x344>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	79ba      	ldrb	r2, [r7, #6]
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	210f      	movs	r1, #15
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	43d2      	mvns	r2, r2
 8001372:	4013      	ands	r3, r2
 8001374:	7979      	ldrb	r1, [r7, #5]
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	4611      	mov	r1, r2
 8001380:	4a36      	ldr	r2, [pc, #216]	; (800145c <DIO_setAlternateFunction+0x344>)
 8001382:	430b      	orrs	r3, r1
 8001384:	6013      	str	r3, [r2, #0]
			break;
 8001386:	e04b      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRH_REG = (DIOE_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <DIO_setAlternateFunction+0x348>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	79ba      	ldrb	r2, [r7, #6]
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	210f      	movs	r1, #15
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	43d2      	mvns	r2, r2
 8001398:	4013      	ands	r3, r2
 800139a:	7979      	ldrb	r1, [r7, #5]
 800139c:	79ba      	ldrb	r2, [r7, #6]
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4611      	mov	r1, r2
 80013a6:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <DIO_setAlternateFunction+0x348>)
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6013      	str	r3, [r2, #0]
			break;
 80013ac:	e038      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRH_REG = (DIOF_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <DIO_setAlternateFunction+0x34c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	79ba      	ldrb	r2, [r7, #6]
 80013b4:	0092      	lsls	r2, r2, #2
 80013b6:	210f      	movs	r1, #15
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	43d2      	mvns	r2, r2
 80013be:	4013      	ands	r3, r2
 80013c0:	7979      	ldrb	r1, [r7, #5]
 80013c2:	79ba      	ldrb	r2, [r7, #6]
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	4611      	mov	r1, r2
 80013cc:	4a25      	ldr	r2, [pc, #148]	; (8001464 <DIO_setAlternateFunction+0x34c>)
 80013ce:	430b      	orrs	r3, r1
 80013d0:	6013      	str	r3, [r2, #0]
			break;
 80013d2:	e025      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRH_REG = (DIOG_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <DIO_setAlternateFunction+0x350>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	210f      	movs	r1, #15
 80013de:	fa01 f202 	lsl.w	r2, r1, r2
 80013e2:	43d2      	mvns	r2, r2
 80013e4:	4013      	ands	r3, r2
 80013e6:	7979      	ldrb	r1, [r7, #5]
 80013e8:	79ba      	ldrb	r2, [r7, #6]
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	4611      	mov	r1, r2
 80013f2:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <DIO_setAlternateFunction+0x350>)
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6013      	str	r3, [r2, #0]
			break;
 80013f8:	e012      	b.n	8001420 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRH_REG = (DIOH_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <DIO_setAlternateFunction+0x354>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	79ba      	ldrb	r2, [r7, #6]
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	210f      	movs	r1, #15
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	43d2      	mvns	r2, r2
 800140a:	4013      	ands	r3, r2
 800140c:	7979      	ldrb	r1, [r7, #5]
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	4611      	mov	r1, r2
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <DIO_setAlternateFunction+0x354>)
 800141a:	430b      	orrs	r3, r1
 800141c:	6013      	str	r3, [r2, #0]
			break;
 800141e:	bf00      	nop
		}
	}

	return Ret_Val;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	48000020 	.word	0x48000020
 8001434:	48000420 	.word	0x48000420
 8001438:	48000820 	.word	0x48000820
 800143c:	48000c20 	.word	0x48000c20
 8001440:	48001020 	.word	0x48001020
 8001444:	48001420 	.word	0x48001420
 8001448:	48001820 	.word	0x48001820
 800144c:	48001c20 	.word	0x48001c20
 8001450:	48000024 	.word	0x48000024
 8001454:	48000424 	.word	0x48000424
 8001458:	48000824 	.word	0x48000824
 800145c:	48000c24 	.word	0x48000c24
 8001460:	48001024 	.word	0x48001024
 8001464:	48001424 	.word	0x48001424
 8001468:	48001824 	.word	0x48001824
 800146c:	48001c24 	.word	0x48001c24

08001470 <rcc_setSystemClk>:
#include "rcc_reg.h"
#include "bit_math.h"
#include "rcc.h"


void rcc_setSystemClk(rcc_sysClk_t sysClk){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	switch(sysClk){
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d017      	beq.n	80014b0 <rcc_setSystemClk+0x40>
 8001480:	2b02      	cmp	r3, #2
 8001482:	d02a      	beq.n	80014da <rcc_setSystemClk+0x6a>
 8001484:	2b00      	cmp	r3, #0
 8001486:	d000      	beq.n	800148a <rcc_setSystemClk+0x1a>
		/* select PLL as sys clock*/
		RCC_CFGR_REG|=PLL_SW;
		break;

	}
}
 8001488:	e03c      	b.n	8001504 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSION_BIT);
 800148a:	4b21      	ldr	r3, [pc, #132]	; (8001510 <rcc_setSystemClk+0xa0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <rcc_setSystemClk+0xa0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSION_READY_FLAG_BIT)==0);
 8001496:	bf00      	nop
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <rcc_setSystemClk+0xa0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f8      	beq.n	8001498 <rcc_setSystemClk+0x28>
		RCC_CFGR_REG|=HSI_SW;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <rcc_setSystemClk+0xa4>)
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <rcc_setSystemClk+0xa4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6013      	str	r3, [r2, #0]
		break;
 80014ae:	e029      	b.n	8001504 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSEON_BIT);
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <rcc_setSystemClk+0xa0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a16      	ldr	r2, [pc, #88]	; (8001510 <rcc_setSystemClk+0xa0>)
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSEON_READY_FLAG_BIT)==0);
 80014bc:	bf00      	nop
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <rcc_setSystemClk+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0c5b      	lsrs	r3, r3, #17
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f8      	beq.n	80014be <rcc_setSystemClk+0x4e>
		RCC_CFGR_REG|=HSE_SW;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <rcc_setSystemClk+0xa4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a10      	ldr	r2, [pc, #64]	; (8001514 <rcc_setSystemClk+0xa4>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
		break;
 80014d8:	e014      	b.n	8001504 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,PLLON_BIT);
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <rcc_setSystemClk+0xa0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <rcc_setSystemClk+0xa0>)
 80014e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e4:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,PLLON_READY_FLAG_BIT)==0);
 80014e6:	bf00      	nop
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <rcc_setSystemClk+0xa0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	0e5b      	lsrs	r3, r3, #25
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f8      	beq.n	80014e8 <rcc_setSystemClk+0x78>
		RCC_CFGR_REG|=PLL_SW;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <rcc_setSystemClk+0xa4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <rcc_setSystemClk+0xa4>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6013      	str	r3, [r2, #0]
		break;
 8001502:	bf00      	nop
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000
 8001514:	40021004 	.word	0x40021004

08001518 <rcc_enablePeriClk>:
void rcc_enablePeriClk(rcc_busId_t busId , u8 periId ){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	460a      	mov	r2, r1
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	4613      	mov	r3, r2
 8001526:	71bb      	strb	r3, [r7, #6]
	switch(busId){
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d00f      	beq.n	800154e <rcc_enablePeriClk+0x36>
 800152e:	2b02      	cmp	r3, #2
 8001530:	d018      	beq.n	8001564 <rcc_enablePeriClk+0x4c>
 8001532:	2b00      	cmp	r3, #0
 8001534:	d000      	beq.n	8001538 <rcc_enablePeriClk+0x20>
	case APB2:
		SET_BIT(RCC_APB2ENR_REG,periId);

		break;
	}
}
 8001536:	e020      	b.n	800157a <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_AHBENR_REG,periId);
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <rcc_enablePeriClk+0x70>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	79ba      	ldrb	r2, [r7, #6]
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f202 	lsl.w	r2, r1, r2
 8001544:	4611      	mov	r1, r2
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <rcc_enablePeriClk+0x70>)
 8001548:	430b      	orrs	r3, r1
 800154a:	6013      	str	r3, [r2, #0]
		break;
 800154c:	e015      	b.n	800157a <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB1ENR_REG,periId);
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <rcc_enablePeriClk+0x74>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	79ba      	ldrb	r2, [r7, #6]
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <rcc_enablePeriClk+0x74>)
 800155e:	430b      	orrs	r3, r1
 8001560:	6013      	str	r3, [r2, #0]
		break;
 8001562:	e00a      	b.n	800157a <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB2ENR_REG,periId);
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <rcc_enablePeriClk+0x78>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	79ba      	ldrb	r2, [r7, #6]
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	4611      	mov	r1, r2
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <rcc_enablePeriClk+0x78>)
 8001574:	430b      	orrs	r3, r1
 8001576:	6013      	str	r3, [r2, #0]
		break;
 8001578:	bf00      	nop
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021014 	.word	0x40021014
 800158c:	4002101c 	.word	0x4002101c
 8001590:	40021018 	.word	0x40021018

08001594 <sysTick_init>:
		(*g_callBackPtr)();
	}
}*/

void sysTick_init(systick_clock_t clock, void (*fPtr)(void))
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
	if(fPtr != (void*)RET_NULLPTR)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d006      	beq.n	80015b4 <sysTick_init+0x20>
	{
		CLEAR_BIT(SYSTICK_STK_CTRL_REG, 1);
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <sysTick_init+0x50>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <sysTick_init+0x50>)
 80015ac:	f023 0302 	bic.w	r3, r3, #2
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e008      	b.n	80015c6 <sysTick_init+0x32>
	}
	else
	{
		SET_BIT(SYSTICK_STK_CTRL_REG, 1);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <sysTick_init+0x50>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <sysTick_init+0x50>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	6013      	str	r3, [r2, #0]
		g_callBackPtr = fPtr;
 80015c0:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <sysTick_init+0x54>)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6013      	str	r3, [r2, #0]
	}

	SYSTICK_STK_CTRL_REG |= (clock<<2);
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <sysTick_init+0x50>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4611      	mov	r1, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <sysTick_init+0x50>)
 80015d2:	430b      	orrs	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010
 80015e8:	20000018 	.word	0x20000018

080015ec <sysTick_start>:

void sysTick_start(u32 loadVal)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	SYSTICK_STK_LOAD_REG = loadVal;
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <sysTick_start+0x38>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]

	SET_BIT(SYSTICK_STK_CTRL_REG, 0);
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <sysTick_start+0x3c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <sysTick_start+0x3c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]

	while(CHECK_BIT(SYSTICK_STK_CTRL_REG,16) == 0 )
 8001606:	bf00      	nop
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <sysTick_start+0x3c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f8      	beq.n	8001608 <sysTick_start+0x1c>
	{
		;
	}
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e014 	.word	0xe000e014
 8001628:	e000e010 	.word	0xe000e010

0800162c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001636:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <xTaskIncrementTick+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 80cc 	bne.w	80017d8 <xTaskIncrementTick+0x1ac>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001640:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <xTaskIncrementTick+0x1c4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001648:	4a69      	ldr	r2, [pc, #420]	; (80017f0 <xTaskIncrementTick+0x1c4>)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11f      	bne.n	8001694 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001654:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <xTaskIncrementTick+0x1c8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <xTaskIncrementTick+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001662:	f383 8811 	msr	BASEPRI, r3
 8001666:	f3bf 8f6f 	isb	sy
 800166a:	f3bf 8f4f 	dsb	sy
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	e7fe      	b.n	8001670 <xTaskIncrementTick+0x44>
 8001672:	4b60      	ldr	r3, [pc, #384]	; (80017f4 <xTaskIncrementTick+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <xTaskIncrementTick+0x1cc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a5d      	ldr	r2, [pc, #372]	; (80017f4 <xTaskIncrementTick+0x1c8>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4a5d      	ldr	r2, [pc, #372]	; (80017f8 <xTaskIncrementTick+0x1cc>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <xTaskIncrementTick+0x1d0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <xTaskIncrementTick+0x1d0>)
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	f000 f918 	bl	80018c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <xTaskIncrementTick+0x1d4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a3a      	ldr	r2, [r7, #32]
 800169a:	429a      	cmp	r2, r3
 800169c:	f0c0 80a1 	bcc.w	80017e2 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016a0:	4b54      	ldr	r3, [pc, #336]	; (80017f4 <xTaskIncrementTick+0x1c8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d104      	bne.n	80016b4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016aa:	4b55      	ldr	r3, [pc, #340]	; (8001800 <xTaskIncrementTick+0x1d4>)
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	601a      	str	r2, [r3, #0]
                    break;
 80016b2:	e096      	b.n	80017e2 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <xTaskIncrementTick+0x1c8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d203      	bcs.n	80016d4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <xTaskIncrementTick+0x1d4>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80016d2:	e086      	b.n	80017e2 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	68d2      	ldr	r2, [r2, #12]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	6892      	ldr	r2, [r2, #8]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	3304      	adds	r3, #4
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d103      	bne.n	8001702 <xTaskIncrementTick+0xd6>
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01e      	beq.n	8001758 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	6a12      	ldr	r2, [r2, #32]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	69d2      	ldr	r2, [r2, #28]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3318      	adds	r3, #24
 800173c:	429a      	cmp	r2, r3
 800173e:	d103      	bne.n	8001748 <xTaskIncrementTick+0x11c>
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6a1a      	ldr	r2, [r3, #32]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	2201      	movs	r2, #1
 800175e:	409a      	lsls	r2, r3
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <xTaskIncrementTick+0x1d8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4313      	orrs	r3, r2
 8001766:	4a27      	ldr	r2, [pc, #156]	; (8001804 <xTaskIncrementTick+0x1d8>)
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	4926      	ldr	r1, [pc, #152]	; (8001808 <xTaskIncrementTick+0x1dc>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	3304      	adds	r3, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	3204      	adds	r2, #4
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	1d1a      	adds	r2, r3, #4
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4a16      	ldr	r2, [pc, #88]	; (8001808 <xTaskIncrementTick+0x1dc>)
 80017ae:	441a      	add	r2, r3
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <xTaskIncrementTick+0x1dc>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1c59      	adds	r1, r3, #1
 80017c8:	480f      	ldr	r0, [pc, #60]	; (8001808 <xTaskIncrementTick+0x1dc>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4403      	add	r3, r0
 80017d4:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017d6:	e763      	b.n	80016a0 <xTaskIncrementTick+0x74>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <xTaskIncrementTick+0x1e0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <xTaskIncrementTick+0x1e0>)
 80017e0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200000c4 	.word	0x200000c4
 80017f0:	200000ac 	.word	0x200000ac
 80017f4:	200000a4 	.word	0x200000a4
 80017f8:	200000a8 	.word	0x200000a8
 80017fc:	200000bc 	.word	0x200000bc
 8001800:	200000c0 	.word	0x200000c0
 8001804:	200000b0 	.word	0x200000b0
 8001808:	20000040 	.word	0x20000040
 800180c:	200000b4 	.word	0x200000b4

08001810 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <vTaskSwitchContext+0xa0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <vTaskSwitchContext+0xa4>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001824:	e03e      	b.n	80018a4 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <vTaskSwitchContext+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <vTaskSwitchContext+0xa8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800183a:	7afb      	ldrb	r3, [r7, #11]
 800183c:	f1c3 031f 	rsb	r3, r3, #31
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	491e      	ldr	r1, [pc, #120]	; (80018bc <vTaskSwitchContext+0xac>)
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <vTaskSwitchContext+0x5a>
        __asm volatile
 8001856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185a:	f383 8811 	msr	BASEPRI, r3
 800185e:	f3bf 8f6f 	isb	sy
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	e7fe      	b.n	8001868 <vTaskSwitchContext+0x58>
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <vTaskSwitchContext+0xac>)
 8001876:	4413      	add	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	3308      	adds	r3, #8
 800188c:	429a      	cmp	r2, r3
 800188e:	d104      	bne.n	800189a <vTaskSwitchContext+0x8a>
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <vTaskSwitchContext+0xb0>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	200000c4 	.word	0x200000c4
 80018b4:	200000b8 	.word	0x200000b8
 80018b8:	200000b0 	.word	0x200000b0
 80018bc:	20000040 	.word	0x20000040
 80018c0:	2000003c 	.word	0x2000003c

080018c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <prvResetNextTaskUnblockTime+0x30>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d104      	bne.n	80018dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <prvResetNextTaskUnblockTime+0x34>)
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80018da:	e005      	b.n	80018e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <prvResetNextTaskUnblockTime+0x30>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <prvResetNextTaskUnblockTime+0x34>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200000a4 	.word	0x200000a4
 80018f8:	200000c0 	.word	0x200000c0
 80018fc:	00000000 	.word	0x00000000

08001900 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <pxCurrentTCBConst2>)
 8001902:	6819      	ldr	r1, [r3, #0]
 8001904:	6808      	ldr	r0, [r1, #0]
 8001906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190a:	f380 8809 	msr	PSP, r0
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f380 8811 	msr	BASEPRI, r0
 800191a:	4770      	bx	lr
 800191c:	f3af 8000 	nop.w

08001920 <pxCurrentTCBConst2>:
 8001920:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
	...

08001930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001930:	f3ef 8009 	mrs	r0, PSP
 8001934:	f3bf 8f6f 	isb	sy
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <pxCurrentTCBConst>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f01e 0f10 	tst.w	lr, #16
 8001940:	bf08      	it	eq
 8001942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800194a:	6010      	str	r0, [r2, #0]
 800194c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001954:	f380 8811 	msr	BASEPRI, r0
 8001958:	f3bf 8f4f 	dsb	sy
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f7ff ff56 	bl	8001810 <vTaskSwitchContext>
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	f380 8811 	msr	BASEPRI, r0
 800196c:	bc09      	pop	{r0, r3}
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	6808      	ldr	r0, [r1, #0]
 8001972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001976:	f01e 0f10 	tst.w	lr, #16
 800197a:	bf08      	it	eq
 800197c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001980:	f380 8809 	msr	PSP, r0
 8001984:	f3bf 8f6f 	isb	sy
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w

08001990 <pxCurrentTCBConst>:
 8001990:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop

08001998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	f3bf 8f6f 	isb	sy
 80019aa:	f3bf 8f4f 	dsb	sy
 80019ae:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80019b0:	f7ff fe3c 	bl	800162c <xTaskIncrementTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SysTick_Handler+0x3c>)
 80019bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	e000ed04 	.word	0xe000ed04

080019d8 <main>:
#include "ultrasonic.h"
#include "pwm.h"
#include "FreeRTOSConfig.h"

int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
	u16 read1,read2,read3,read4,read5,read6;
	rcc_setSystemClk(HSI);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff fd46 	bl	8001470 <rcc_setSystemClk>
	rcc_enablePeriClk(APB2,TIM8_EN);
 80019e4:	210d      	movs	r1, #13
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff fd96 	bl	8001518 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB2,TIM1_EN);
 80019ec:	210b      	movs	r1, #11
 80019ee:	2002      	movs	r0, #2
 80019f0:	f7ff fd92 	bl	8001518 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB1,TIM2_EN);
 80019f4:	2100      	movs	r1, #0
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff fd8e 	bl	8001518 <rcc_enablePeriClk>
	rcc_enablePeriClk(APB1,TIM6_EN);
 80019fc:	2104      	movs	r1, #4
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff fd8a 	bl	8001518 <rcc_enablePeriClk>


	rcc_enablePeriClk(AHB,IOPA_EN);
 8001a04:	2111      	movs	r1, #17
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fd86 	bl	8001518 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPB_EN);
 8001a0c:	2112      	movs	r1, #18
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fd82 	bl	8001518 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPC_EN);
 8001a14:	2113      	movs	r1, #19
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fd7e 	bl	8001518 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPF_EN);
 8001a1c:	2116      	movs	r1, #22
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fd7a 	bl	8001518 <rcc_enablePeriClk>


	DIO_setupPinMode( PORTA_ID , PIN5_ID , PIN_OUTPUT );
 8001a24:	2201      	movs	r2, #1
 8001a26:	2105      	movs	r1, #5
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff f985 	bl	8000d38 <DIO_setupPinMode>
	DIO_writePin( PORTA_ID , PIN5_ID , LOGIC_LOW );
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff fa5c 	bl	8000ef0 <DIO_writePin>

	sysTick_init(AHB_8,(void*)RET_NULLPTR);
 8001a38:	2102      	movs	r1, #2
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fdaa 	bl	8001594 <sysTick_init>


	Ultrasonic_init();
 8001a40:	f7fe fbce 	bl	80001e0 <Ultrasonic_init>
//	PWM_Start(channel1, 75);
//	read1 = 1;
//	PWM_Start(channel1, 100);
//	read1 = 1;

	TIM6_Init(7);
 8001a44:	2007      	movs	r0, #7
 8001a46:	f7ff f929 	bl	8000c9c <TIM6_Init>


//		DIO_togglePin( PORTA_ID , PIN5_ID );
//		TIM6_Delay(5000);

		Ultrasonic_Trigger( TRIGGER1_PORT , TRIGGER1_PIN , UltraSonic_Channel1 );
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7fe fc8e 	bl	8000370 <Ultrasonic_Trigger>
		read1 = Ultrasonic_readDistance();
 8001a54:	f7fe fcb4 	bl	80003c0 <Ultrasonic_readDistance>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	80fb      	strh	r3, [r7, #6]
		sysTick_start(500000);
 8001a5c:	4801      	ldr	r0, [pc, #4]	; (8001a64 <main+0x8c>)
 8001a5e:	f7ff fdc5 	bl	80015ec <sysTick_start>
		Ultrasonic_Trigger( TRIGGER1_PORT , TRIGGER1_PIN , UltraSonic_Channel1 );
 8001a62:	e7f2      	b.n	8001a4a <main+0x72>
 8001a64:	0007a120 	.word	0x0007a120

08001a68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a72:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <LoopForever+0xe>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a88:	4c0a      	ldr	r4, [pc, #40]	; (8001ab4 <LoopForever+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a96:	f000 f811 	bl	8001abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9a:	f7ff ff9d 	bl	80019d8 <main>

08001a9e <LoopForever>:

LoopForever:
  b LoopForever
 8001a9e:	e7fe      	b.n	8001a9e <LoopForever>
  ldr   r0, =_estack
 8001aa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001aac:	08001b24 	.word	0x08001b24
  ldr r2, =_sbss
 8001ab0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001ab4:	200000d0 	.word	0x200000d0

08001ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC1_2_IRQHandler>
	...

08001abc <__libc_init_array>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	4e0d      	ldr	r6, [pc, #52]	; (8001af4 <__libc_init_array+0x38>)
 8001ac0:	4c0d      	ldr	r4, [pc, #52]	; (8001af8 <__libc_init_array+0x3c>)
 8001ac2:	1ba4      	subs	r4, r4, r6
 8001ac4:	10a4      	asrs	r4, r4, #2
 8001ac6:	2500      	movs	r5, #0
 8001ac8:	42a5      	cmp	r5, r4
 8001aca:	d109      	bne.n	8001ae0 <__libc_init_array+0x24>
 8001acc:	4e0b      	ldr	r6, [pc, #44]	; (8001afc <__libc_init_array+0x40>)
 8001ace:	4c0c      	ldr	r4, [pc, #48]	; (8001b00 <__libc_init_array+0x44>)
 8001ad0:	f000 f818 	bl	8001b04 <_init>
 8001ad4:	1ba4      	subs	r4, r4, r6
 8001ad6:	10a4      	asrs	r4, r4, #2
 8001ad8:	2500      	movs	r5, #0
 8001ada:	42a5      	cmp	r5, r4
 8001adc:	d105      	bne.n	8001aea <__libc_init_array+0x2e>
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
 8001ae0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ae4:	4798      	blx	r3
 8001ae6:	3501      	adds	r5, #1
 8001ae8:	e7ee      	b.n	8001ac8 <__libc_init_array+0xc>
 8001aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aee:	4798      	blx	r3
 8001af0:	3501      	adds	r5, #1
 8001af2:	e7f2      	b.n	8001ada <__libc_init_array+0x1e>
 8001af4:	08001b1c 	.word	0x08001b1c
 8001af8:	08001b1c 	.word	0x08001b1c
 8001afc:	08001b1c 	.word	0x08001b1c
 8001b00:	08001b20 	.word	0x08001b20

08001b04 <_init>:
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b06:	bf00      	nop
 8001b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b0a:	bc08      	pop	{r3}
 8001b0c:	469e      	mov	lr, r3
 8001b0e:	4770      	bx	lr

08001b10 <_fini>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr
