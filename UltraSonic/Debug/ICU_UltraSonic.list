
ICU_UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001248  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013dc  080013e4  000113e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013dc  080013dc  000113e4  2**0
                  CONTENTS
  4 .ARM          00000000  080013dc  080013dc  000113e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013dc  080013e4  000113e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013dc  080013dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013e0  080013e0  000113e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000113e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  080013e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080013e4  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001424  00000000  00000000  00011414  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005b9  00000000  00000000  00012838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  00012df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000158  00000000  00000000  00012fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000143a  00000000  00000000  00013120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000c41  00000000  00000000  0001455a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000065bd  00000000  00000000  0001519b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  0001b7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013c4 	.word	0x080013c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080013c4 	.word	0x080013c4

080001d4 <TIM8_ICU_Enable>:




void TIM8_ICU_Enable(ICU_Channel channel)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]


	TIM8_PSC_REG = 7;
 80001de:	4b29      	ldr	r3, [pc, #164]	; (8000284 <TIM8_ICU_Enable+0xb0>)
 80001e0:	2207      	movs	r2, #7
 80001e2:	801a      	strh	r2, [r3, #0]

	switch(channel)
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d83e      	bhi.n	8000268 <TIM8_ICU_Enable+0x94>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <TIM8_ICU_Enable+0x1c>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	0800021b 	.word	0x0800021b
 80001f8:	08000235 	.word	0x08000235
 80001fc:	0800024f 	.word	0x0800024f
	{
	  case channel_1:
		  TIM8_CCMR1_REG |= WriteValue(1,CC1S_BIT_0_1);
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a20      	ldr	r2, [pc, #128]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6013      	str	r3, [r2, #0]
		  SET_BIT(TIM8_CCER_REG , CC1E_BIT_0 );
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <TIM8_ICU_Enable+0xb8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1e      	ldr	r2, [pc, #120]	; (800028c <TIM8_ICU_Enable+0xb8>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6013      	str	r3, [r2, #0]
	  break;
 8000218:	e026      	b.n	8000268 <TIM8_ICU_Enable+0x94>
	  case channel_2:
		  TIM8_CCMR1_REG |= WriteValue(1,CC2S_BIT_8_9);
 800021a:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a1a      	ldr	r2, [pc, #104]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 8000220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000224:	6013      	str	r3, [r2, #0]
		  SET_BIT(TIM8_CCER_REG , CC2E_BIT_4 );
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <TIM8_ICU_Enable+0xb8>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a18      	ldr	r2, [pc, #96]	; (800028c <TIM8_ICU_Enable+0xb8>)
 800022c:	f043 0310 	orr.w	r3, r3, #16
 8000230:	6013      	str	r3, [r2, #0]
	  break;
 8000232:	e019      	b.n	8000268 <TIM8_ICU_Enable+0x94>
	  case channel_3:
		  TIM8_CCMR1_REG |= WriteValue(1,CC3S_BIT_0_1);  //01: CC3 channel is configured as input, IC3 is mapped on TI3
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6013      	str	r3, [r2, #0]
		  SET_BIT(TIM8_CCER_REG , CC3E_BIT_8 );
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <TIM8_ICU_Enable+0xb8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a11      	ldr	r2, [pc, #68]	; (800028c <TIM8_ICU_Enable+0xb8>)
 8000246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800024a:	6013      	str	r3, [r2, #0]
	  break;
 800024c:	e00c      	b.n	8000268 <TIM8_ICU_Enable+0x94>
	  case channel_4:
		  TIM8_CCMR1_REG |= WriteValue(1,CC4S_BIT_8_9);
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <TIM8_ICU_Enable+0xb4>)
 8000254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000258:	6013      	str	r3, [r2, #0]
		  SET_BIT(TIM8_CCER_REG , CC4E_BIT_12 );
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <TIM8_ICU_Enable+0xb8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a0b      	ldr	r2, [pc, #44]	; (800028c <TIM8_ICU_Enable+0xb8>)
 8000260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000264:	6013      	str	r3, [r2, #0]
	  break;
 8000266:	bf00      	nop

	//TIM8_DIER_REG = 0;


	//TIM8_ARR_REG = 0xFFFF;
	SET_BIT(TIM8_CR1_REG,CEN_BIT_0);
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <TIM8_ICU_Enable+0xbc>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	b29b      	uxth	r3, r3
 800026e:	4a08      	ldr	r2, [pc, #32]	; (8000290 <TIM8_ICU_Enable+0xbc>)
 8000270:	f043 0301 	orr.w	r3, r3, #1
 8000274:	b29b      	uxth	r3, r3
 8000276:	8013      	strh	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40013428 	.word	0x40013428
 8000288:	40013418 	.word	0x40013418
 800028c:	40013420 	.word	0x40013420
 8000290:	40013400 	.word	0x40013400

08000294 <TIM8_ICU_SelectEdge>:



void TIM8_ICU_SelectEdge(ICU_Channel channel,ICU_Edge edge)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	f200 80ba 	bhi.w	8000420 <TIM8_ICU_SelectEdge+0x18c>
 80002ac:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <TIM8_ICU_SelectEdge+0x20>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002c5 	.word	0x080002c5
 80002b8:	0800031f 	.word	0x0800031f
 80002bc:	08000379 	.word	0x08000379
 80002c0:	080003d3 	.word	0x080003d3
	{
	  case channel_1:
		  	   if( edge == RISING )
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d10c      	bne.n	80002e4 <TIM8_ICU_SelectEdge+0x50>
		  	  	{
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 80002ca:	4b58      	ldr	r3, [pc, #352]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a57      	ldr	r2, [pc, #348]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002d0:	f023 0302 	bic.w	r3, r3, #2
 80002d4:	6013      	str	r3, [r2, #0]
		  		      CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 80002d6:	4b55      	ldr	r3, [pc, #340]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a54      	ldr	r2, [pc, #336]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002dc:	f023 0308 	bic.w	r3, r3, #8
 80002e0:	6013      	str	r3, [r2, #0]
		  	  	else
		  	  	{
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
		  	  	}
	  break;
 80002e2:	e09d      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
		  	  	else if (edge == FALLING )
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d10c      	bne.n	8000304 <TIM8_ICU_SelectEdge+0x70>
		  	  	  	  SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 80002ea:	4b50      	ldr	r3, [pc, #320]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a4f      	ldr	r2, [pc, #316]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	6013      	str	r3, [r2, #0]
		  	  	  	  CLEAR_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 80002f6:	4b4d      	ldr	r3, [pc, #308]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a4c      	ldr	r2, [pc, #304]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80002fc:	f023 0308 	bic.w	r3, r3, #8
 8000300:	6013      	str	r3, [r2, #0]
	  break;
 8000302:	e08d      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
		  	  		 SET_BIT(TIM8_CCER_REG,CC1P_BIT_1);
 8000304:	4b49      	ldr	r3, [pc, #292]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a48      	ldr	r2, [pc, #288]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6013      	str	r3, [r2, #0]
		  	  		 SET_BIT(TIM8_CCER_REG,CC1NP_BIT_3);
 8000310:	4b46      	ldr	r3, [pc, #280]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a45      	ldr	r2, [pc, #276]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000316:	f043 0308 	orr.w	r3, r3, #8
 800031a:	6013      	str	r3, [r2, #0]
	  break;
 800031c:	e080      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
	  case channel_2:
	  	  	  if( edge == RISING )
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d10c      	bne.n	800033e <TIM8_ICU_SelectEdge+0xaa>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 8000324:	4b41      	ldr	r3, [pc, #260]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a40      	ldr	r2, [pc, #256]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 800032a:	f023 0320 	bic.w	r3, r3, #32
 800032e:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 8000330:	4b3e      	ldr	r3, [pc, #248]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a3d      	ldr	r2, [pc, #244]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800033a:	6013      	str	r3, [r2, #0]
	  	     else
	  	     {
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
	  	     }
	  break;
 800033c:	e070      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
	  	     else if (edge == FALLING )
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d10c      	bne.n	800035e <TIM8_ICU_SelectEdge+0xca>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 8000344:	4b39      	ldr	r3, [pc, #228]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a38      	ldr	r2, [pc, #224]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 8000350:	4b36      	ldr	r3, [pc, #216]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a35      	ldr	r2, [pc, #212]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800035a:	6013      	str	r3, [r2, #0]
	  break;
 800035c:	e060      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
	  	  		  SET_BIT(TIM8_CCER_REG,CC2P_BIT_5);
 800035e:	4b33      	ldr	r3, [pc, #204]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a32      	ldr	r2, [pc, #200]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	6013      	str	r3, [r2, #0]
	  	  		  SET_BIT(TIM8_CCER_REG,CC2NP_BIT_7);
 800036a:	4b30      	ldr	r3, [pc, #192]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a2f      	ldr	r2, [pc, #188]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000374:	6013      	str	r3, [r2, #0]
	  break;
 8000376:	e053      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
	  case channel_3:
	  	  	  if( edge == RISING )
 8000378:	79bb      	ldrb	r3, [r7, #6]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d10c      	bne.n	8000398 <TIM8_ICU_SelectEdge+0x104>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 800037e:	4b2b      	ldr	r3, [pc, #172]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a2a      	ldr	r2, [pc, #168]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000388:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 800038a:	4b28      	ldr	r3, [pc, #160]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a27      	ldr	r2, [pc, #156]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000394:	6013      	str	r3, [r2, #0]
		  	  else
		  	  {
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
		  	  }
	  break;
 8000396:	e043      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
		  	  else if (edge == FALLING )
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d10c      	bne.n	80003b8 <TIM8_ICU_SelectEdge+0x124>
	  	  		  SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 800039e:	4b23      	ldr	r3, [pc, #140]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a22      	ldr	r2, [pc, #136]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a8:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a1f      	ldr	r2, [pc, #124]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003b4:	6013      	str	r3, [r2, #0]
	  break;
 80003b6:	e033      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
		  		 SET_BIT(TIM8_CCER_REG,CC3P_BIT_9);
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a1b      	ldr	r2, [pc, #108]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c2:	6013      	str	r3, [r2, #0]
		  		SET_BIT(TIM8_CCER_REG,CC3NP_BIT_11);
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a18      	ldr	r2, [pc, #96]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ce:	6013      	str	r3, [r2, #0]
	  break;
 80003d0:	e026      	b.n	8000420 <TIM8_ICU_SelectEdge+0x18c>
	  case channel_4:
	  	  	  if( edge == RISING )
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d10a      	bne.n	80003ee <TIM8_ICU_SelectEdge+0x15a>
	  	  	  {
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC4P_BIT_13);
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a13      	ldr	r2, [pc, #76]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80003e2:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC4NP_BIT_15);
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003e6:	4a11      	ldr	r2, [pc, #68]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	6013      	str	r3, [r2, #0]
		  	  else
		  	  {
	  	  		  SET_BIT(TIM8_CCER_REG,CC4P_BIT_13);
	  	  		  SET_BIT(TIM8_CCER_REG,CC4NP_BIT_15);
		  	  }
	  break;
 80003ec:	e017      	b.n	800041e <TIM8_ICU_SelectEdge+0x18a>
		  	  else if (edge == FALLING )
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10a      	bne.n	800040a <TIM8_ICU_SelectEdge+0x176>
	  	  		  SET_BIT(TIM8_CCER_REG,CC4P_BIT_13);
 80003f4:	4b0d      	ldr	r3, [pc, #52]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 80003fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003fe:	6013      	str	r3, [r2, #0]
	  	  		  CLEAR_BIT(TIM8_CCER_REG,CC4NP_BIT_15);
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000402:	4a0a      	ldr	r2, [pc, #40]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6013      	str	r3, [r2, #0]
	  break;
 8000408:	e009      	b.n	800041e <TIM8_ICU_SelectEdge+0x18a>
	  	  		  SET_BIT(TIM8_CCER_REG,CC4P_BIT_13);
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a07      	ldr	r2, [pc, #28]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000414:	6013      	str	r3, [r2, #0]
	  	  		  SET_BIT(TIM8_CCER_REG,CC4NP_BIT_15);
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <TIM8_ICU_SelectEdge+0x198>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6013      	str	r3, [r2, #0]
	  break;
 800041e:	bf00      	nop
	}



}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40013420 	.word	0x40013420

08000430 <TIM8_ICU_INT_CheckStatus>:



STD_ReturnState TIM8_ICU_INT_CheckStatus(ICU_Channel channel)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState state;

	switch(channel)
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d84b      	bhi.n	80004d8 <TIM8_ICU_INT_CheckStatus+0xa8>
 8000440:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <TIM8_ICU_INT_CheckStatus+0x18>)
 8000442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000446:	bf00      	nop
 8000448:	08000459 	.word	0x08000459
 800044c:	08000479 	.word	0x08000479
 8000450:	08000499 	.word	0x08000499
 8000454:	080004b9 	.word	0x080004b9
	{
	   case channel_1:
		   state = CHECK_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 8000458:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <TIM8_ICU_INT_CheckStatus+0xb8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	085b      	lsrs	r3, r3, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
		   if( state == 0 )
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d102      	bne.n	8000472 <TIM8_ICU_INT_CheckStatus+0x42>
		   	{
		   	   state = E_NOT_OK;
 800046c:	2301      	movs	r3, #1
 800046e:	73fb      	strb	r3, [r7, #15]
		   	}
		   	else
		   	{
			   state = E_OK;
			}
	   break;
 8000470:	e032      	b.n	80004d8 <TIM8_ICU_INT_CheckStatus+0xa8>
			   state = E_OK;
 8000472:	2300      	movs	r3, #0
 8000474:	73fb      	strb	r3, [r7, #15]
	   break;
 8000476:	e02f      	b.n	80004d8 <TIM8_ICU_INT_CheckStatus+0xa8>
	   case channel_2:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <TIM8_ICU_INT_CheckStatus+0xb8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	b2db      	uxtb	r3, r3
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d102      	bne.n	8000492 <TIM8_ICU_INT_CheckStatus+0x62>
	   	   {
	   		   state = E_NOT_OK;
 800048c:	2301      	movs	r3, #1
 800048e:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 8000490:	e022      	b.n	80004d8 <TIM8_ICU_INT_CheckStatus+0xa8>
			  state = E_OK;
 8000492:	2300      	movs	r3, #0
 8000494:	73fb      	strb	r3, [r7, #15]
	   break;
 8000496:	e01f      	b.n	80004d8 <TIM8_ICU_INT_CheckStatus+0xa8>
	   case channel_3:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC3IF_BIT_3 );
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <TIM8_ICU_INT_CheckStatus+0xb8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	08db      	lsrs	r3, r3, #3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d102      	bne.n	80004b2 <TIM8_ICU_INT_CheckStatus+0x82>
	   	   {
	   		   state = E_NOT_OK;
 80004ac:	2301      	movs	r3, #1
 80004ae:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 80004b0:	e012      	b.n	80004d8 <TIM8_ICU_INT_CheckStatus+0xa8>
			  state = E_OK;
 80004b2:	2300      	movs	r3, #0
 80004b4:	73fb      	strb	r3, [r7, #15]
	   break;
 80004b6:	e00f      	b.n	80004d8 <TIM8_ICU_INT_CheckStatus+0xa8>
	   case channel_4:
	   	   state = CHECK_BIT( TIM8_SR_REG , CC4IF_BIT_4 );
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <TIM8_ICU_INT_CheckStatus+0xb8>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	091b      	lsrs	r3, r3, #4
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	73fb      	strb	r3, [r7, #15]
	   	   if( state == 0 )
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d102      	bne.n	80004d2 <TIM8_ICU_INT_CheckStatus+0xa2>
	   	   {
	   		   state = E_NOT_OK;
 80004cc:	2301      	movs	r3, #1
 80004ce:	73fb      	strb	r3, [r7, #15]
	   	   else
	   	   {
			  state = E_OK;
	   	   }

	   break;
 80004d0:	e001      	b.n	80004d6 <TIM8_ICU_INT_CheckStatus+0xa6>
			  state = E_OK;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73fb      	strb	r3, [r7, #15]
	   break;
 80004d6:	bf00      	nop


	}

	return state;
 80004d8:	7bfb      	ldrb	r3, [r7, #15]

}
 80004da:	4618      	mov	r0, r3
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40013410 	.word	0x40013410

080004ec <TIM8_ICU_Read>:


void TIM8_ICU_Read(ICU_Channel channel,u16 * read_ptr )
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]

	switch(channel)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	d822      	bhi.n	8000544 <TIM8_ICU_Read+0x58>
 80004fe:	a201      	add	r2, pc, #4	; (adr r2, 8000504 <TIM8_ICU_Read+0x18>)
 8000500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000504:	08000515 	.word	0x08000515
 8000508:	08000521 	.word	0x08000521
 800050c:	0800052d 	.word	0x0800052d
 8000510:	08000539 	.word	0x08000539
	{
	  case channel_1:
		  * read_ptr = TIM8_CCR1_REG;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <TIM8_ICU_Read+0x64>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	b29a      	uxth	r2, r3
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	801a      	strh	r2, [r3, #0]
	  break;
 800051e:	e011      	b.n	8000544 <TIM8_ICU_Read+0x58>
	  case channel_2:
		  * read_ptr = TIM8_CCR2_REG;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <TIM8_ICU_Read+0x68>)
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	b29a      	uxth	r2, r3
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	801a      	strh	r2, [r3, #0]
	  break;
 800052a:	e00b      	b.n	8000544 <TIM8_ICU_Read+0x58>
	  case channel_3:
		  * read_ptr = TIM8_CCR3_REG;
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <TIM8_ICU_Read+0x6c>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	b29a      	uxth	r2, r3
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	801a      	strh	r2, [r3, #0]
	  break;
 8000536:	e005      	b.n	8000544 <TIM8_ICU_Read+0x58>
	  case channel_4:
		  * read_ptr = TIM8_CCR4_REG;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <TIM8_ICU_Read+0x70>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b29a      	uxth	r2, r3
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	801a      	strh	r2, [r3, #0]
	  break;
 8000542:	bf00      	nop
	}

}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40013434 	.word	0x40013434
 8000554:	40013438 	.word	0x40013438
 8000558:	4001343c 	.word	0x4001343c
 800055c:	40013440 	.word	0x40013440

08000560 <TIM8_ICU_INT_Enable>:




void TIM8_ICU_INT_Enable(ICU_Channel channel,void(*ptr)(void))
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
	switch(channel)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b03      	cmp	r3, #3
 8000570:	d84d      	bhi.n	800060e <TIM8_ICU_INT_Enable+0xae>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <TIM8_ICU_INT_Enable+0x18>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	08000589 	.word	0x08000589
 800057c:	080005a7 	.word	0x080005a7
 8000580:	080005c5 	.word	0x080005c5
 8000584:	080005e3 	.word	0x080005e3
	{
	  case channel_1:
	    	SET_BIT(TIM8_DIER_REG,CC1IE_BIT_1);
 8000588:	4b24      	ldr	r3, [pc, #144]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	b29b      	uxth	r3, r3
 800058e:	4a23      	ldr	r2, [pc, #140]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	b29b      	uxth	r3, r3
 8000596:	8013      	strh	r3, [r2, #0]
	    	if(ptr != NULLPTR)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d030      	beq.n	8000600 <TIM8_ICU_INT_Enable+0xa0>
	    	{
	    		Channel_1_CLB_Ptr = ptr;
 800059e:	4a20      	ldr	r2, [pc, #128]	; (8000620 <TIM8_ICU_INT_Enable+0xc0>)
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 80005a4:	e02c      	b.n	8000600 <TIM8_ICU_INT_Enable+0xa0>
	  case channel_2:
		   SET_BIT(TIM8_DIER_REG,CC2IE_BIT_2);
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	8013      	strh	r3, [r2, #0]
	    	if(ptr != NULLPTR)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d023      	beq.n	8000604 <TIM8_ICU_INT_Enable+0xa4>
	    	{
	    		Channel_2_CLB_Ptr = ptr;
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <TIM8_ICU_INT_Enable+0xc4>)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 80005c2:	e01f      	b.n	8000604 <TIM8_ICU_INT_Enable+0xa4>
	  case channel_3:
		   SET_BIT(TIM8_DIER_REG,CC3IE_BIT_3);
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4a14      	ldr	r2, [pc, #80]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	8013      	strh	r3, [r2, #0]
	    	if( ptr != NULLPTR)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d016      	beq.n	8000608 <TIM8_ICU_INT_Enable+0xa8>
	    	{
	    		Channel_3_CLB_Ptr = ptr;
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <TIM8_ICU_INT_Enable+0xc8>)
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 80005e0:	e012      	b.n	8000608 <TIM8_ICU_INT_Enable+0xa8>
	  case channel_4:
		   SET_BIT(TIM8_DIER_REG,CC4IE_BIT_4);
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <TIM8_ICU_INT_Enable+0xbc>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	8013      	strh	r3, [r2, #0]
	    	if( ptr != NULLPTR)
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d009      	beq.n	800060c <TIM8_ICU_INT_Enable+0xac>
	    	{
	    		Channel_4_CLB_Ptr = ptr;
 80005f8:	4a0c      	ldr	r2, [pc, #48]	; (800062c <TIM8_ICU_INT_Enable+0xcc>)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	6013      	str	r3, [r2, #0]
	    	}
	  break;
 80005fe:	e005      	b.n	800060c <TIM8_ICU_INT_Enable+0xac>
	  break;
 8000600:	bf00      	nop
 8000602:	e004      	b.n	800060e <TIM8_ICU_INT_Enable+0xae>
	  break;
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <TIM8_ICU_INT_Enable+0xae>
	  break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <TIM8_ICU_INT_Enable+0xae>
	  break;
 800060c:	bf00      	nop
	}



}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	4001340c 	.word	0x4001340c
 8000620:	2000001c 	.word	0x2000001c
 8000624:	20000020 	.word	0x20000020
 8000628:	20000024 	.word	0x20000024
 800062c:	20000028 	.word	0x20000028

08000630 <TIM8_CC_IRQHandler>:

}

//TIM8_CC_IRQHandler
void TIM8_CC_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

	if ( TIM8_ICU_INT_CheckStatus(channel_1 ) == E_OK  )
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff fefb 	bl	8000430 <TIM8_ICU_INT_CheckStatus>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10c      	bne.n	800065a <TIM8_CC_IRQHandler+0x2a>
	{

		CLEAR_BIT( TIM8_SR_REG , CC1IF_BIT_1 );
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a22      	ldr	r2, [pc, #136]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 8000646:	f023 0302 	bic.w	r3, r3, #2
 800064a:	6013      	str	r3, [r2, #0]
		if( Channel_1_CLB_Ptr != NULLPTR )
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <TIM8_CC_IRQHandler+0xa4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <TIM8_CC_IRQHandler+0x2a>
		{
			Channel_1_CLB_Ptr();
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <TIM8_CC_IRQHandler+0xa4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4798      	blx	r3
		}


	}

	if ( TIM8_ICU_INT_CheckStatus(channel_2 ) == E_OK  )
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff fee8 	bl	8000430 <TIM8_ICU_INT_CheckStatus>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d10c      	bne.n	8000680 <TIM8_CC_IRQHandler+0x50>
	{
		CLEAR_BIT( TIM8_SR_REG , CC2IF_BIT_2 );
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 800066c:	f023 0304 	bic.w	r3, r3, #4
 8000670:	6013      	str	r3, [r2, #0]
		if( Channel_2_CLB_Ptr != NULLPTR )
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <TIM8_CC_IRQHandler+0xa8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <TIM8_CC_IRQHandler+0x50>
		{
			Channel_2_CLB_Ptr();
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <TIM8_CC_IRQHandler+0xa8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4798      	blx	r3
		}

	}

	if ( TIM8_ICU_INT_CheckStatus(channel_3 ) == E_OK  )
 8000680:	2002      	movs	r0, #2
 8000682:	f7ff fed5 	bl	8000430 <TIM8_ICU_INT_CheckStatus>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10c      	bne.n	80006a6 <TIM8_CC_IRQHandler+0x76>
	{
		CLEAR_BIT( TIM8_SR_REG ,CC3IF_BIT_3 );
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 8000692:	f023 0308 	bic.w	r3, r3, #8
 8000696:	6013      	str	r3, [r2, #0]

		if( Channel_3_CLB_Ptr != NULLPTR )
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <TIM8_CC_IRQHandler+0xac>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <TIM8_CC_IRQHandler+0x76>
		{
			Channel_3_CLB_Ptr();
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <TIM8_CC_IRQHandler+0xac>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4798      	blx	r3
		}

	}

	if ( TIM8_ICU_INT_CheckStatus(channel_4 ) == E_OK  )
 80006a6:	2003      	movs	r0, #3
 80006a8:	f7ff fec2 	bl	8000430 <TIM8_ICU_INT_CheckStatus>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d10c      	bne.n	80006cc <TIM8_CC_IRQHandler+0x9c>
	{
		CLEAR_BIT( TIM8_SR_REG , CC4IF_BIT_4 );
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <TIM8_CC_IRQHandler+0xa0>)
 80006b8:	f023 0310 	bic.w	r3, r3, #16
 80006bc:	6013      	str	r3, [r2, #0]
		if( Channel_4_CLB_Ptr != NULLPTR )
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <TIM8_CC_IRQHandler+0xb0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d002      	beq.n	80006cc <TIM8_CC_IRQHandler+0x9c>
		{
			Channel_4_CLB_Ptr();
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <TIM8_CC_IRQHandler+0xb0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4798      	blx	r3
		}

	}
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013410 	.word	0x40013410
 80006d4:	2000001c 	.word	0x2000001c
 80006d8:	20000020 	.word	0x20000020
 80006dc:	20000024 	.word	0x20000024
 80006e0:	20000028 	.word	0x20000028

080006e4 <NVIC_EnableIRQ>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e4:	b490      	push	{r4, r7}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState Ret_Val = E_NOT_OK;
 80006ee:	2301      	movs	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
	if((u8)IRQn >= 0)
	{
		NVIC_ISER->ISER[(IRQn / 32)] |= (1 << (IRQn % 32));
 80006f2:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <NVIC_EnableIRQ+0x44>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	b2d8      	uxtb	r0, r3
 80006fa:	4603      	mov	r3, r0
 80006fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000700:	79fa      	ldrb	r2, [r7, #7]
 8000702:	f002 021f 	and.w	r2, r2, #31
 8000706:	2101      	movs	r1, #1
 8000708:	fa01 f202 	lsl.w	r2, r1, r2
 800070c:	4614      	mov	r4, r2
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <NVIC_EnableIRQ+0x44>)
 8000710:	4601      	mov	r1, r0
 8000712:	4323      	orrs	r3, r4
 8000714:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		Ret_Val = E_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]
	}
	return Ret_Val;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bc90      	pop	{r4, r7}
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100

0800072c <NVIC_SetPriority>:
* Reentrancy      :
* Parameters () :
* Return value:   : *
*******************************************************************************/
STD_ReturnState NVIC_SetPriority(IRQn_Type IRQn,u32 priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
	STD_ReturnState Ret_Val = E_NOT_OK;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
	if(IRQn >=0)
	{
		NVIC_IPR->IPR[(u32)IRQn] = (u8)(priority <<4)	&(u32)0xff;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <NVIC_SetPriority+0x30>)
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	54ca      	strb	r2, [r1, r3]
		Ret_Val = E_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
	}
	return Ret_Val;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e400 	.word	0xe000e400

08000760 <rcc_setSystemClk>:


#include "rcc.h"


void rcc_setSystemClk(rcc_sysClk_t sysClk){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	switch(sysClk){
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d017      	beq.n	80007a0 <rcc_setSystemClk+0x40>
 8000770:	2b02      	cmp	r3, #2
 8000772:	d02a      	beq.n	80007ca <rcc_setSystemClk+0x6a>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d000      	beq.n	800077a <rcc_setSystemClk+0x1a>
		/* select PLL as sys clock*/
		RCC_CFGR_REG|=PLL_SW;
		break;

	}
}
 8000778:	e03c      	b.n	80007f4 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSION_BIT);
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <rcc_setSystemClk+0xa0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a20      	ldr	r2, [pc, #128]	; (8000800 <rcc_setSystemClk+0xa0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSION_READY_FLAG_BIT)==0);
 8000786:	bf00      	nop
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <rcc_setSystemClk+0xa0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f8      	beq.n	8000788 <rcc_setSystemClk+0x28>
		RCC_CFGR_REG|=HSI_SW;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <rcc_setSystemClk+0xa4>)
 8000798:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <rcc_setSystemClk+0xa4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	6013      	str	r3, [r2, #0]
		break;
 800079e:	e029      	b.n	80007f4 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,HSEON_BIT);
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <rcc_setSystemClk+0xa0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <rcc_setSystemClk+0xa0>)
 80007a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007aa:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,HSEON_READY_FLAG_BIT)==0);
 80007ac:	bf00      	nop
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <rcc_setSystemClk+0xa0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	0c5b      	lsrs	r3, r3, #17
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0f8      	beq.n	80007ae <rcc_setSystemClk+0x4e>
		RCC_CFGR_REG|=HSE_SW;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <rcc_setSystemClk+0xa4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <rcc_setSystemClk+0xa4>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]
		break;
 80007c8:	e014      	b.n	80007f4 <rcc_setSystemClk+0x94>
		SET_BIT(RCC_CR_REG,PLLON_BIT);
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <rcc_setSystemClk+0xa0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <rcc_setSystemClk+0xa0>)
 80007d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d4:	6013      	str	r3, [r2, #0]
		while(CHECK_BIT(RCC_CR_REG,PLLON_READY_FLAG_BIT)==0);
 80007d6:	bf00      	nop
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <rcc_setSystemClk+0xa0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	0e5b      	lsrs	r3, r3, #25
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f8      	beq.n	80007d8 <rcc_setSystemClk+0x78>
		RCC_CFGR_REG|=PLL_SW;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <rcc_setSystemClk+0xa4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <rcc_setSystemClk+0xa4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6013      	str	r3, [r2, #0]
		break;
 80007f2:	bf00      	nop
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000
 8000804:	40021004 	.word	0x40021004

08000808 <rcc_enablePeriClk>:
void rcc_enablePeriClk(rcc_busId_t busId , u8 periId ){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	460a      	mov	r2, r1
 8000812:	71fb      	strb	r3, [r7, #7]
 8000814:	4613      	mov	r3, r2
 8000816:	71bb      	strb	r3, [r7, #6]
	switch(busId){
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d00f      	beq.n	800083e <rcc_enablePeriClk+0x36>
 800081e:	2b02      	cmp	r3, #2
 8000820:	d018      	beq.n	8000854 <rcc_enablePeriClk+0x4c>
 8000822:	2b00      	cmp	r3, #0
 8000824:	d000      	beq.n	8000828 <rcc_enablePeriClk+0x20>
	case APB2:
		SET_BIT(RCC_APB2ENR_REG,periId);

		break;
	}
}
 8000826:	e020      	b.n	800086a <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_AHBENR_REG,periId);
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <rcc_enablePeriClk+0x70>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	4611      	mov	r1, r2
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <rcc_enablePeriClk+0x70>)
 8000838:	430b      	orrs	r3, r1
 800083a:	6013      	str	r3, [r2, #0]
		break;
 800083c:	e015      	b.n	800086a <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB1ENR_REG,periId);
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <rcc_enablePeriClk+0x74>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	79ba      	ldrb	r2, [r7, #6]
 8000844:	2101      	movs	r1, #1
 8000846:	fa01 f202 	lsl.w	r2, r1, r2
 800084a:	4611      	mov	r1, r2
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <rcc_enablePeriClk+0x74>)
 800084e:	430b      	orrs	r3, r1
 8000850:	6013      	str	r3, [r2, #0]
		break;
 8000852:	e00a      	b.n	800086a <rcc_enablePeriClk+0x62>
		SET_BIT(RCC_APB2ENR_REG,periId);
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <rcc_enablePeriClk+0x78>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	79ba      	ldrb	r2, [r7, #6]
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <rcc_enablePeriClk+0x78>)
 8000864:	430b      	orrs	r3, r1
 8000866:	6013      	str	r3, [r2, #0]
		break;
 8000868:	bf00      	nop
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40021014 	.word	0x40021014
 800087c:	4002101c 	.word	0x4002101c
 8000880:	40021018 	.word	0x40021018

08000884 <main>:
#include "icu.h"
#include "sysTick.h"
#include "ultrasonic.h"

int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
	u16 read;
	rcc_setSystemClk(HSI);
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff ff68 	bl	8000760 <rcc_setSystemClk>
	rcc_enablePeriClk(APB2,TIM8_EN);
 8000890:	210d      	movs	r1, #13
 8000892:	2002      	movs	r0, #2
 8000894:	f7ff ffb8 	bl	8000808 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPA_EN);
 8000898:	2111      	movs	r1, #17
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ffb4 	bl	8000808 <rcc_enablePeriClk>
	rcc_enablePeriClk(AHB,IOPC_EN);
 80008a0:	2113      	movs	r1, #19
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ffb0 	bl	8000808 <rcc_enablePeriClk>


	sysTick_init(AHB_8,NULLPTR);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fd1a 	bl	80012e4 <sysTick_init>


	Ultrasonic_init();
 80008b0:	f000 f836 	bl	8000920 <Ultrasonic_init>


    /* Loop forever */
	for(;;)
	{
		Ultrasonic_Trigger();
 80008b4:	f000 f86a 	bl	800098c <Ultrasonic_Trigger>
		read = Ultrasonic_readDistance();
 80008b8:	f000 f87a 	bl	80009b0 <Ultrasonic_readDistance>
 80008bc:	4603      	mov	r3, r0
 80008be:	80fb      	strh	r3, [r7, #6]
		sysTick_start(500000);
 80008c0:	4801      	ldr	r0, [pc, #4]	; (80008c8 <main+0x44>)
 80008c2:	f000 fd3b 	bl	800133c <sysTick_start>
		Ultrasonic_Trigger();
 80008c6:	e7f5      	b.n	80008b4 <main+0x30>
 80008c8:	0007a120 	.word	0x0007a120

080008cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <LoopForever+0xe>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ec:	4c0a      	ldr	r4, [pc, #40]	; (8000918 <LoopForever+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fa:	f000 fd3f 	bl	800137c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff ffc1 	bl	8000884 <main>

08000902 <LoopForever>:

LoopForever:
    b LoopForever
 8000902:	e7fe      	b.n	8000902 <LoopForever>
  ldr   r0, =_estack
 8000904:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000910:	080013e4 	.word	0x080013e4
  ldr r2, =_sbss
 8000914:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000918:	20000038 	.word	0x20000038

0800091c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_2_IRQHandler>
	...

08000920 <Ultrasonic_init>:

/*
 * Description: initialization Function of the Ultrasonic driver
 */
void Ultrasonic_init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0



	DIO_setupPinMode( TRIGGER_PORT , TRIGGER_PIN , PIN_OUTPUT );
 8000924:	2201      	movs	r2, #1
 8000926:	2101      	movs	r1, #1
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f89f 	bl	8000a6c <DIO_setupPinMode>
	DIO_writePin( TRIGGER_PORT ,  TRIGGER_PIN , LOGIC_LOW );
 800092e:	2200      	movs	r2, #0
 8000930:	2101      	movs	r1, #1
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f976 	bl	8000c24 <DIO_writePin>


	DIO_setupPinMode( PORTA_ID , PIN5_ID , PIN_OUTPUT ); // Internal Led
 8000938:	2201      	movs	r2, #1
 800093a:	2105      	movs	r1, #5
 800093c:	2000      	movs	r0, #0
 800093e:	f000 f895 	bl	8000a6c <DIO_setupPinMode>
	DIO_writePin( PORTA_ID , PIN5_ID , LOGIC_LOW );
 8000942:	2200      	movs	r2, #0
 8000944:	2105      	movs	r1, #5
 8000946:	2000      	movs	r0, #0
 8000948:	f000 f96c 	bl	8000c24 <DIO_writePin>


	DIO_setupPinMode( ECHO_PORT , ECHO_PIN , PIN_ALTERNATE );
 800094c:	2202      	movs	r2, #2
 800094e:	2106      	movs	r1, #6
 8000950:	2002      	movs	r0, #2
 8000952:	f000 f88b 	bl	8000a6c <DIO_setupPinMode>
	DIO_setAlternateFunction(ECHO_PORT ,ECHO_PIN , AF4 );
 8000956:	2204      	movs	r2, #4
 8000958:	2106      	movs	r1, #6
 800095a:	2002      	movs	r0, #2
 800095c:	f000 fb08 	bl	8000f70 <DIO_setAlternateFunction>


	TIM8_ICU_Enable(channel_1);
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fc37 	bl	80001d4 <TIM8_ICU_Enable>
	TIM8_ICU_SelectEdge(channel_1, Both_Edges );
 8000966:	2102      	movs	r1, #2
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff fc93 	bl	8000294 <TIM8_ICU_SelectEdge>
	TIM8_ICU_INT_Enable(channel_1 , Ultrasonic_edgeProcessing );
 800096e:	4906      	ldr	r1, [pc, #24]	; (8000988 <Ultrasonic_init+0x68>)
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fdf5 	bl	8000560 <TIM8_ICU_INT_Enable>


	NVIC_EnableIRQ(IRQn_TIM8_CC);
 8000976:	202e      	movs	r0, #46	; 0x2e
 8000978:	f7ff feb4 	bl	80006e4 <NVIC_EnableIRQ>
	NVIC_SetPriority(IRQn_TIM8_CC,0);
 800097c:	2100      	movs	r1, #0
 800097e:	202e      	movs	r0, #46	; 0x2e
 8000980:	f7ff fed4 	bl	800072c <NVIC_SetPriority>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	08000a1d 	.word	0x08000a1d

0800098c <Ultrasonic_Trigger>:

/*
 *  Description: Send the trigger pulse to the ultrasonic
 */
void Ultrasonic_Trigger(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

	DIO_writePin( TRIGGER_PORT ,  TRIGGER_PIN , LOGIC_HIGH );
 8000990:	2201      	movs	r2, #1
 8000992:	2101      	movs	r1, #1
 8000994:	2000      	movs	r0, #0
 8000996:	f000 f945 	bl	8000c24 <DIO_writePin>
	sysTick_start(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f000 fcce 	bl	800133c <sysTick_start>
	DIO_writePin( TRIGGER_PORT ,  TRIGGER_PIN , LOGIC_LOW );
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f93d 	bl	8000c24 <DIO_writePin>



}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <Ultrasonic_readDistance>:

/*
 * Description: Does the distance measurements and return with the distance
 */
u16 Ultrasonic_readDistance(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
	u16 tim ;
	u16 distance ;

	while(flag < 2 );
 80009b6:	bf00      	nop
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <Ultrasonic_readDistance+0x5c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d9fa      	bls.n	80009b8 <Ultrasonic_readDistance+0x8>
	if( t1 > t2)
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <Ultrasonic_readDistance+0x60>)
 80009c4:	881a      	ldrh	r2, [r3, #0]
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <Ultrasonic_readDistance+0x64>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d908      	bls.n	80009e0 <Ultrasonic_readDistance+0x30>
	{
		 tim = ( 0xFFFF - t1 ) + t2 ;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <Ultrasonic_readDistance+0x64>)
 80009d0:	881a      	ldrh	r2, [r3, #0]
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <Ultrasonic_readDistance+0x60>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	3b01      	subs	r3, #1
 80009dc:	80fb      	strh	r3, [r7, #6]
 80009de:	e005      	b.n	80009ec <Ultrasonic_readDistance+0x3c>
	}
	else
	{
		 tim = t2 - t1 ;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <Ultrasonic_readDistance+0x64>)
 80009e2:	881a      	ldrh	r2, [r3, #0]
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <Ultrasonic_readDistance+0x60>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	80fb      	strh	r3, [r7, #6]
	}
	distance = ( tim / 58 ) ;
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <Ultrasonic_readDistance+0x68>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	095b      	lsrs	r3, r3, #5
 80009f6:	80bb      	strh	r3, [r7, #4]
	flag = 0;
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <Ultrasonic_readDistance+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	return (u16) (distance);
 80009fe:	88bb      	ldrh	r3, [r7, #4]

}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	2000002c 	.word	0x2000002c
 8000a10:	20000036 	.word	0x20000036
 8000a14:	20000034 	.word	0x20000034
 8000a18:	8d3dcb09 	.word	0x8d3dcb09

08000a1c <Ultrasonic_edgeProcessing>:

/*
 * Description: Call Back function
 */
void Ultrasonic_edgeProcessing(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

	if( flag == 0 )
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <Ultrasonic_edgeProcessing+0x44>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d107      	bne.n	8000a3a <Ultrasonic_edgeProcessing+0x1e>
	{
		 TIM8_ICU_Read(channel_1,&t1);
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <Ultrasonic_edgeProcessing+0x48>)
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fd5d 	bl	80004ec <TIM8_ICU_Read>
		 flag = 1 ;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <Ultrasonic_edgeProcessing+0x44>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
		 DIO_togglePin( PORTA_ID , PIN5_ID );			// Internal Led


	}

}
 8000a38:	e00f      	b.n	8000a5a <Ultrasonic_edgeProcessing+0x3e>
	else if( flag == 1 )
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <Ultrasonic_edgeProcessing+0x44>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10a      	bne.n	8000a5a <Ultrasonic_edgeProcessing+0x3e>
		 TIM8_ICU_Read(channel_1,&t2);
 8000a44:	4908      	ldr	r1, [pc, #32]	; (8000a68 <Ultrasonic_edgeProcessing+0x4c>)
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fd50 	bl	80004ec <TIM8_ICU_Read>
		 flag = 2 ;  // check
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <Ultrasonic_edgeProcessing+0x44>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	701a      	strb	r2, [r3, #0]
		 DIO_togglePin( PORTA_ID , PIN5_ID );			// Internal Led
 8000a52:	2105      	movs	r1, #5
 8000a54:	2000      	movs	r0, #0
 8000a56:	f000 f9f1 	bl	8000e3c <DIO_togglePin>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000002c 	.word	0x2000002c
 8000a64:	20000036 	.word	0x20000036
 8000a68:	20000034 	.word	0x20000034

08000a6c <DIO_setupPinMode>:

/*******************************************************************************
 *                      Global Functions Definitions                           *
 *******************************************************************************/
STD_ReturnState DIO_setupPinMode(DIO_PortID portID, DIO_PinID pinID, DIO_PinMode pinMode)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	460b      	mov	r3, r1
 8000a78:	71bb      	strb	r3, [r7, #6]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]

	if((portID >= NUM_OF_PORTS) || (pinID >= NUM_OF_PINS_PER_PORT))
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b07      	cmp	r3, #7
 8000a86:	d802      	bhi.n	8000a8e <DIO_setupPinMode+0x22>
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2b0e      	cmp	r3, #14
 8000a8c:	d902      	bls.n	8000a94 <DIO_setupPinMode+0x28>
	{
		Ret_Val = E_NOT_OK;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e0b1      	b.n	8000bf8 <DIO_setupPinMode+0x18c>
	}

	else
	{
		switch(portID)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	f200 80ae 	bhi.w	8000bf8 <DIO_setupPinMode+0x18c>
 8000a9c:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <DIO_setupPinMode+0x38>)
 8000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa2:	bf00      	nop
 8000aa4:	08000ac5 	.word	0x08000ac5
 8000aa8:	08000aef 	.word	0x08000aef
 8000aac:	08000b15 	.word	0x08000b15
 8000ab0:	08000b3b 	.word	0x08000b3b
 8000ab4:	08000b61 	.word	0x08000b61
 8000ab8:	08000b87 	.word	0x08000b87
 8000abc:	08000bad 	.word	0x08000bad
 8000ac0:	08000bd3 	.word	0x08000bd3
		{
		case PORTA_ID:
			DIOA_MODER_REG = (DIOA_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	79ba      	ldrb	r2, [r7, #6]
 8000acc:	0052      	lsls	r2, r2, #1
 8000ace:	2103      	movs	r1, #3
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	43d2      	mvns	r2, r2
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	7979      	ldrb	r1, [r7, #5]
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	0052      	lsls	r2, r2, #1
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	6013      	str	r3, [r2, #0]
			break;
 8000aec:	e084      	b.n	8000bf8 <DIO_setupPinMode+0x18c>

		case PORTB_ID:
			DIOB_MODER_REG = (DIOB_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000aee:	4b46      	ldr	r3, [pc, #280]	; (8000c08 <DIO_setupPinMode+0x19c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	79ba      	ldrb	r2, [r7, #6]
 8000af4:	0052      	lsls	r2, r2, #1
 8000af6:	2103      	movs	r1, #3
 8000af8:	fa01 f202 	lsl.w	r2, r1, r2
 8000afc:	43d2      	mvns	r2, r2
 8000afe:	4013      	ands	r3, r2
 8000b00:	7979      	ldrb	r1, [r7, #5]
 8000b02:	79ba      	ldrb	r2, [r7, #6]
 8000b04:	0052      	lsls	r2, r2, #1
 8000b06:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4a3e      	ldr	r2, [pc, #248]	; (8000c08 <DIO_setupPinMode+0x19c>)
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	6013      	str	r3, [r2, #0]
			break;
 8000b12:	e071      	b.n	8000bf8 <DIO_setupPinMode+0x18c>

		case PORTC_ID:
			DIOC_MODER_REG = (DIOC_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <DIO_setupPinMode+0x1a0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	79ba      	ldrb	r2, [r7, #6]
 8000b1a:	0052      	lsls	r2, r2, #1
 8000b1c:	2103      	movs	r1, #3
 8000b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b22:	43d2      	mvns	r2, r2
 8000b24:	4013      	ands	r3, r2
 8000b26:	7979      	ldrb	r1, [r7, #5]
 8000b28:	79ba      	ldrb	r2, [r7, #6]
 8000b2a:	0052      	lsls	r2, r2, #1
 8000b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b30:	4611      	mov	r1, r2
 8000b32:	4a36      	ldr	r2, [pc, #216]	; (8000c0c <DIO_setupPinMode+0x1a0>)
 8000b34:	430b      	orrs	r3, r1
 8000b36:	6013      	str	r3, [r2, #0]
			break;
 8000b38:	e05e      	b.n	8000bf8 <DIO_setupPinMode+0x18c>

		case PORTD_ID:
			DIOD_MODER_REG = (DIOD_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <DIO_setupPinMode+0x1a4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	79ba      	ldrb	r2, [r7, #6]
 8000b40:	0052      	lsls	r2, r2, #1
 8000b42:	2103      	movs	r1, #3
 8000b44:	fa01 f202 	lsl.w	r2, r1, r2
 8000b48:	43d2      	mvns	r2, r2
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	7979      	ldrb	r1, [r7, #5]
 8000b4e:	79ba      	ldrb	r2, [r7, #6]
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	fa01 f202 	lsl.w	r2, r1, r2
 8000b56:	4611      	mov	r1, r2
 8000b58:	4a2d      	ldr	r2, [pc, #180]	; (8000c10 <DIO_setupPinMode+0x1a4>)
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	6013      	str	r3, [r2, #0]
			break;
 8000b5e:	e04b      	b.n	8000bf8 <DIO_setupPinMode+0x18c>

		case PORTE_ID:
			DIOE_MODER_REG = (DIOE_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000b60:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <DIO_setupPinMode+0x1a8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	0052      	lsls	r2, r2, #1
 8000b68:	2103      	movs	r1, #3
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	43d2      	mvns	r2, r2
 8000b70:	4013      	ands	r3, r2
 8000b72:	7979      	ldrb	r1, [r7, #5]
 8000b74:	79ba      	ldrb	r2, [r7, #6]
 8000b76:	0052      	lsls	r2, r2, #1
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <DIO_setupPinMode+0x1a8>)
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6013      	str	r3, [r2, #0]
			break;
 8000b84:	e038      	b.n	8000bf8 <DIO_setupPinMode+0x18c>

		case PORTF_ID:
			DIOF_MODER_REG = (DIOF_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000b86:	4b24      	ldr	r3, [pc, #144]	; (8000c18 <DIO_setupPinMode+0x1ac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	0052      	lsls	r2, r2, #1
 8000b8e:	2103      	movs	r1, #3
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	4013      	ands	r3, r2
 8000b98:	7979      	ldrb	r1, [r7, #5]
 8000b9a:	79ba      	ldrb	r2, [r7, #6]
 8000b9c:	0052      	lsls	r2, r2, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <DIO_setupPinMode+0x1ac>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6013      	str	r3, [r2, #0]
			break;
 8000baa:	e025      	b.n	8000bf8 <DIO_setupPinMode+0x18c>

		case PORTG_ID:
			DIOG_MODER_REG = (DIOG_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <DIO_setupPinMode+0x1b0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	43d2      	mvns	r2, r2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	7979      	ldrb	r1, [r7, #5]
 8000bc0:	79ba      	ldrb	r2, [r7, #6]
 8000bc2:	0052      	lsls	r2, r2, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <DIO_setupPinMode+0x1b0>)
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
			break;
 8000bd0:	e012      	b.n	8000bf8 <DIO_setupPinMode+0x18c>

		case PORTH_ID:
			DIOH_MODER_REG = (DIOH_MODER_REG & ~(0x03 << (pinID*2))) | (pinMode << (pinID*2));
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <DIO_setupPinMode+0x1b4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	79ba      	ldrb	r2, [r7, #6]
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	2103      	movs	r1, #3
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	4013      	ands	r3, r2
 8000be4:	7979      	ldrb	r1, [r7, #5]
 8000be6:	79ba      	ldrb	r2, [r7, #6]
 8000be8:	0052      	lsls	r2, r2, #1
 8000bea:	fa01 f202 	lsl.w	r2, r1, r2
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <DIO_setupPinMode+0x1b4>)
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	6013      	str	r3, [r2, #0]
			break;
 8000bf6:	bf00      	nop
		}
	}

	return Ret_Val;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	48000c00 	.word	0x48000c00
 8000c14:	48001000 	.word	0x48001000
 8000c18:	48001400 	.word	0x48001400
 8000c1c:	48001800 	.word	0x48001800
 8000c20:	48001c00 	.word	0x48001c00

08000c24 <DIO_writePin>:

STD_ReturnState DIO_writePin(DIO_PortID portID, DIO_PinID pinID, DIO_PinLevel pinLevel)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	71bb      	strb	r3, [r7, #6]
 8000c32:	4613      	mov	r3, r2
 8000c34:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b07      	cmp	r3, #7
 8000c3e:	d802      	bhi.n	8000c46 <DIO_writePin+0x22>
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	2b0e      	cmp	r3, #14
 8000c44:	d902      	bls.n	8000c4c <DIO_writePin+0x28>
	{
		Ret_Val = E_NOT_OK;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e0df      	b.n	8000e0c <DIO_writePin+0x1e8>
	}

	else
	{
		switch(portID)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b07      	cmp	r3, #7
 8000c50:	f200 80dc 	bhi.w	8000e0c <DIO_writePin+0x1e8>
 8000c54:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <DIO_writePin+0x38>)
 8000c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5a:	bf00      	nop
 8000c5c:	08000c7d 	.word	0x08000c7d
 8000c60:	08000caf 	.word	0x08000caf
 8000c64:	08000ce1 	.word	0x08000ce1
 8000c68:	08000d13 	.word	0x08000d13
 8000c6c:	08000d45 	.word	0x08000d45
 8000c70:	08000d77 	.word	0x08000d77
 8000c74:	08000da9 	.word	0x08000da9
 8000c78:	08000ddb 	.word	0x08000ddb
		{
		case PORTA_ID:
			if(pinLevel == LOGIC_LOW)
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10a      	bne.n	8000c98 <DIO_writePin+0x74>
			{
				CLEAR_BIT(DIOA_ODR_REG, pinID);
 8000c82:	4b66      	ldr	r3, [pc, #408]	; (8000e1c <DIO_writePin+0x1f8>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4962      	ldr	r1, [pc, #392]	; (8000e1c <DIO_writePin+0x1f8>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOA_ODR_REG, pinID);
			}
			break;
 8000c96:	e0b9      	b.n	8000e0c <DIO_writePin+0x1e8>
				SET_BIT(DIOA_ODR_REG, pinID);
 8000c98:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <DIO_writePin+0x1f8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	79ba      	ldrb	r2, [r7, #6]
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4a5d      	ldr	r2, [pc, #372]	; (8000e1c <DIO_writePin+0x1f8>)
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6013      	str	r3, [r2, #0]
			break;
 8000cac:	e0ae      	b.n	8000e0c <DIO_writePin+0x1e8>

		case PORTB_ID:
			if(pinLevel == LOGIC_LOW)
 8000cae:	797b      	ldrb	r3, [r7, #5]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10a      	bne.n	8000cca <DIO_writePin+0xa6>
			{
				CLEAR_BIT(DIOB_ODR_REG, pinID);
 8000cb4:	4b5a      	ldr	r3, [pc, #360]	; (8000e20 <DIO_writePin+0x1fc>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	4957      	ldr	r1, [pc, #348]	; (8000e20 <DIO_writePin+0x1fc>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOB_ODR_REG, pinID);
			}
			break;
 8000cc8:	e0a0      	b.n	8000e0c <DIO_writePin+0x1e8>
				SET_BIT(DIOB_ODR_REG, pinID);
 8000cca:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <DIO_writePin+0x1fc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	79ba      	ldrb	r2, [r7, #6]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4a51      	ldr	r2, [pc, #324]	; (8000e20 <DIO_writePin+0x1fc>)
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	6013      	str	r3, [r2, #0]
			break;
 8000cde:	e095      	b.n	8000e0c <DIO_writePin+0x1e8>

		case PORTC_ID:
			if(pinLevel == LOGIC_LOW)
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <DIO_writePin+0xd8>
			{
				CLEAR_BIT(DIOC_ODR_REG, pinID);
 8000ce6:	4b4f      	ldr	r3, [pc, #316]	; (8000e24 <DIO_writePin+0x200>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	494b      	ldr	r1, [pc, #300]	; (8000e24 <DIO_writePin+0x200>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOC_ODR_REG, pinID);
			}
			break;
 8000cfa:	e087      	b.n	8000e0c <DIO_writePin+0x1e8>
				SET_BIT(DIOC_ODR_REG, pinID);
 8000cfc:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <DIO_writePin+0x200>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	79ba      	ldrb	r2, [r7, #6]
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <DIO_writePin+0x200>)
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	6013      	str	r3, [r2, #0]
			break;
 8000d10:	e07c      	b.n	8000e0c <DIO_writePin+0x1e8>

		case PORTD_ID:
			if(pinLevel == LOGIC_LOW)
 8000d12:	797b      	ldrb	r3, [r7, #5]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10a      	bne.n	8000d2e <DIO_writePin+0x10a>
			{
				CLEAR_BIT(DIOD_ODR_REG, pinID);
 8000d18:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <DIO_writePin+0x204>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4940      	ldr	r1, [pc, #256]	; (8000e28 <DIO_writePin+0x204>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOD_ODR_REG, pinID);
			}
			break;
 8000d2c:	e06e      	b.n	8000e0c <DIO_writePin+0x1e8>
				SET_BIT(DIOD_ODR_REG, pinID);
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <DIO_writePin+0x204>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	79ba      	ldrb	r2, [r7, #6]
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a3a      	ldr	r2, [pc, #232]	; (8000e28 <DIO_writePin+0x204>)
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6013      	str	r3, [r2, #0]
			break;
 8000d42:	e063      	b.n	8000e0c <DIO_writePin+0x1e8>

		case PORTE_ID:
			if(pinLevel == LOGIC_LOW)
 8000d44:	797b      	ldrb	r3, [r7, #5]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10a      	bne.n	8000d60 <DIO_writePin+0x13c>
			{
				CLEAR_BIT(DIOE_ODR_REG, pinID);
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <DIO_writePin+0x208>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	2101      	movs	r1, #1
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4934      	ldr	r1, [pc, #208]	; (8000e2c <DIO_writePin+0x208>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOE_ODR_REG, pinID);
			}
			break;
 8000d5e:	e055      	b.n	8000e0c <DIO_writePin+0x1e8>
				SET_BIT(DIOE_ODR_REG, pinID);
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <DIO_writePin+0x208>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	79ba      	ldrb	r2, [r7, #6]
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <DIO_writePin+0x208>)
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6013      	str	r3, [r2, #0]
			break;
 8000d74:	e04a      	b.n	8000e0c <DIO_writePin+0x1e8>

		case PORTF_ID:
			if(pinLevel == LOGIC_LOW)
 8000d76:	797b      	ldrb	r3, [r7, #5]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10a      	bne.n	8000d92 <DIO_writePin+0x16e>
			{
				CLEAR_BIT(DIOF_ODR_REG, pinID);
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <DIO_writePin+0x20c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4929      	ldr	r1, [pc, #164]	; (8000e30 <DIO_writePin+0x20c>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOF_ODR_REG, pinID);
			}
			break;
 8000d90:	e03c      	b.n	8000e0c <DIO_writePin+0x1e8>
				SET_BIT(DIOF_ODR_REG, pinID);
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <DIO_writePin+0x20c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <DIO_writePin+0x20c>)
 8000da2:	430b      	orrs	r3, r1
 8000da4:	6013      	str	r3, [r2, #0]
			break;
 8000da6:	e031      	b.n	8000e0c <DIO_writePin+0x1e8>

		case PORTG_ID:
			if(pinLevel == LOGIC_LOW)
 8000da8:	797b      	ldrb	r3, [r7, #5]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10a      	bne.n	8000dc4 <DIO_writePin+0x1a0>
			{
				CLEAR_BIT(DIOG_ODR_REG, pinID);
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <DIO_writePin+0x210>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2101      	movs	r1, #1
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	491d      	ldr	r1, [pc, #116]	; (8000e34 <DIO_writePin+0x210>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOG_ODR_REG, pinID);
			}
			break;
 8000dc2:	e023      	b.n	8000e0c <DIO_writePin+0x1e8>
				SET_BIT(DIOG_ODR_REG, pinID);
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <DIO_writePin+0x210>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	2101      	movs	r1, #1
 8000dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <DIO_writePin+0x210>)
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	6013      	str	r3, [r2, #0]
			break;
 8000dd8:	e018      	b.n	8000e0c <DIO_writePin+0x1e8>

		case PORTH_ID:
			if(pinLevel == LOGIC_LOW)
 8000dda:	797b      	ldrb	r3, [r7, #5]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10a      	bne.n	8000df6 <DIO_writePin+0x1d2>
			{
				CLEAR_BIT(DIOH_ODR_REG, pinID);
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <DIO_writePin+0x214>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	2101      	movs	r1, #1
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4912      	ldr	r1, [pc, #72]	; (8000e38 <DIO_writePin+0x214>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	600b      	str	r3, [r1, #0]
			}
			else
			{
				SET_BIT(DIOH_ODR_REG, pinID);
			}
			break;
 8000df4:	e009      	b.n	8000e0a <DIO_writePin+0x1e6>
				SET_BIT(DIOH_ODR_REG, pinID);
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <DIO_writePin+0x214>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	79ba      	ldrb	r2, [r7, #6]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	4611      	mov	r1, r2
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <DIO_writePin+0x214>)
 8000e06:	430b      	orrs	r3, r1
 8000e08:	6013      	str	r3, [r2, #0]
			break;
 8000e0a:	bf00      	nop
		}
	}

	return Ret_Val;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	48000014 	.word	0x48000014
 8000e20:	48000414 	.word	0x48000414
 8000e24:	48000814 	.word	0x48000814
 8000e28:	48000c14 	.word	0x48000c14
 8000e2c:	48001014 	.word	0x48001014
 8000e30:	48001414 	.word	0x48001414
 8000e34:	48001814 	.word	0x48001814
 8000e38:	48001c14 	.word	0x48001c14

08000e3c <DIO_togglePin>:

STD_ReturnState DIO_togglePin(DIO_PortID portID, DIO_PinID pinID)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	460a      	mov	r2, r1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	71bb      	strb	r3, [r7, #6]
	STD_ReturnState Ret_Val = E_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b07      	cmp	r3, #7
 8000e54:	d802      	bhi.n	8000e5c <DIO_togglePin+0x20>
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	2b0e      	cmp	r3, #14
 8000e5a:	d902      	bls.n	8000e62 <DIO_togglePin+0x26>
	{
		Ret_Val = E_NOT_OK;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e06e      	b.n	8000f40 <DIO_togglePin+0x104>
	}

	else
	{
		switch(portID)
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	2b07      	cmp	r3, #7
 8000e66:	d86b      	bhi.n	8000f40 <DIO_togglePin+0x104>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <DIO_togglePin+0x34>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000e91 	.word	0x08000e91
 8000e74:	08000ea7 	.word	0x08000ea7
 8000e78:	08000ebd 	.word	0x08000ebd
 8000e7c:	08000ed3 	.word	0x08000ed3
 8000e80:	08000ee9 	.word	0x08000ee9
 8000e84:	08000eff 	.word	0x08000eff
 8000e88:	08000f15 	.word	0x08000f15
 8000e8c:	08000f2b 	.word	0x08000f2b
		{
		case PORTA_ID:
			FLIP_BIT(DIOA_ODR_REG, pinID);
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <DIO_togglePin+0x114>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	79ba      	ldrb	r2, [r7, #6]
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4a2c      	ldr	r2, [pc, #176]	; (8000f50 <DIO_togglePin+0x114>)
 8000ea0:	404b      	eors	r3, r1
 8000ea2:	6013      	str	r3, [r2, #0]
			break;
 8000ea4:	e04c      	b.n	8000f40 <DIO_togglePin+0x104>

		case PORTB_ID:
			FLIP_BIT(DIOB_ODR_REG, pinID);
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <DIO_togglePin+0x118>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	79ba      	ldrb	r2, [r7, #6]
 8000eac:	2101      	movs	r1, #1
 8000eae:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <DIO_togglePin+0x118>)
 8000eb6:	404b      	eors	r3, r1
 8000eb8:	6013      	str	r3, [r2, #0]
			break;
 8000eba:	e041      	b.n	8000f40 <DIO_togglePin+0x104>

		case PORTC_ID:
			FLIP_BIT(DIOC_ODR_REG, pinID);
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <DIO_togglePin+0x11c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	79ba      	ldrb	r2, [r7, #6]
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <DIO_togglePin+0x11c>)
 8000ecc:	404b      	eors	r3, r1
 8000ece:	6013      	str	r3, [r2, #0]
			break;
 8000ed0:	e036      	b.n	8000f40 <DIO_togglePin+0x104>

		case PORTD_ID:
			FLIP_BIT(DIOD_ODR_REG, pinID);
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <DIO_togglePin+0x120>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	79ba      	ldrb	r2, [r7, #6]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <DIO_togglePin+0x120>)
 8000ee2:	404b      	eors	r3, r1
 8000ee4:	6013      	str	r3, [r2, #0]
			break;
 8000ee6:	e02b      	b.n	8000f40 <DIO_togglePin+0x104>

		case PORTE_ID:
			FLIP_BIT(DIOE_ODR_REG, pinID);
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <DIO_togglePin+0x124>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	79ba      	ldrb	r2, [r7, #6]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <DIO_togglePin+0x124>)
 8000ef8:	404b      	eors	r3, r1
 8000efa:	6013      	str	r3, [r2, #0]
			break;
 8000efc:	e020      	b.n	8000f40 <DIO_togglePin+0x104>

		case PORTF_ID:
			FLIP_BIT(DIOF_ODR_REG, pinID);
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <DIO_togglePin+0x128>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <DIO_togglePin+0x128>)
 8000f0e:	404b      	eors	r3, r1
 8000f10:	6013      	str	r3, [r2, #0]
			break;
 8000f12:	e015      	b.n	8000f40 <DIO_togglePin+0x104>

		case PORTG_ID:
			FLIP_BIT(DIOG_ODR_REG, pinID);
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <DIO_togglePin+0x12c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	79ba      	ldrb	r2, [r7, #6]
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4611      	mov	r1, r2
 8000f22:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <DIO_togglePin+0x12c>)
 8000f24:	404b      	eors	r3, r1
 8000f26:	6013      	str	r3, [r2, #0]
			break;
 8000f28:	e00a      	b.n	8000f40 <DIO_togglePin+0x104>

		case PORTH_ID:
			FLIP_BIT(DIOH_ODR_REG, pinID);
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <DIO_togglePin+0x130>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	4611      	mov	r1, r2
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <DIO_togglePin+0x130>)
 8000f3a:	404b      	eors	r3, r1
 8000f3c:	6013      	str	r3, [r2, #0]
			break;
 8000f3e:	bf00      	nop
		}
	}

	return Ret_Val;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	48000014 	.word	0x48000014
 8000f54:	48000414 	.word	0x48000414
 8000f58:	48000814 	.word	0x48000814
 8000f5c:	48000c14 	.word	0x48000c14
 8000f60:	48001014 	.word	0x48001014
 8000f64:	48001414 	.word	0x48001414
 8000f68:	48001814 	.word	0x48001814
 8000f6c:	48001c14 	.word	0x48001c14

08000f70 <DIO_setAlternateFunction>:

	return Ret_Val;
}

STD_ReturnState DIO_setAlternateFunction (DIO_PortID portID, DIO_PinID pinID, DIO_AltFuncID altFunID)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	71bb      	strb	r3, [r7, #6]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	717b      	strb	r3, [r7, #5]
	STD_ReturnState Ret_Val = E_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]

	if(portID >= NUM_OF_PORTS || pinID >= NUM_OF_PINS_PER_PORT)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d802      	bhi.n	8000f92 <DIO_setAlternateFunction+0x22>
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b0e      	cmp	r3, #14
 8000f90:	d902      	bls.n	8000f98 <DIO_setAlternateFunction+0x28>
	{
		Ret_Val = E_NOT_OK;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e16f      	b.n	8001278 <DIO_setAlternateFunction+0x308>
	}

	else if(pinID >= PIN0_ID && pinID <= PIN7_ID)
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	2b07      	cmp	r3, #7
 8000f9c:	f200 80b1 	bhi.w	8001102 <DIO_setAlternateFunction+0x192>
	{
		switch (portID)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	f200 8168 	bhi.w	8001278 <DIO_setAlternateFunction+0x308>
 8000fa8:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <DIO_setAlternateFunction+0x40>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08000fd1 	.word	0x08000fd1
 8000fb4:	08000ff7 	.word	0x08000ff7
 8000fb8:	0800101d 	.word	0x0800101d
 8000fbc:	08001043 	.word	0x08001043
 8000fc0:	08001069 	.word	0x08001069
 8000fc4:	0800108f 	.word	0x0800108f
 8000fc8:	080010b5 	.word	0x080010b5
 8000fcc:	080010db 	.word	0x080010db
		{
		case PORTA_ID:
			DIOA_AFRL_REG = (DIOA_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000fd0:	4bad      	ldr	r3, [pc, #692]	; (8001288 <DIO_setAlternateFunction+0x318>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	79ba      	ldrb	r2, [r7, #6]
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	210f      	movs	r1, #15
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	43d2      	mvns	r2, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	7979      	ldrb	r1, [r7, #5]
 8000fe4:	79ba      	ldrb	r2, [r7, #6]
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	4611      	mov	r1, r2
 8000fee:	4aa6      	ldr	r2, [pc, #664]	; (8001288 <DIO_setAlternateFunction+0x318>)
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	6013      	str	r3, [r2, #0]
			break;
 8000ff4:	e140      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRL_REG = (DIOB_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8000ff6:	4ba5      	ldr	r3, [pc, #660]	; (800128c <DIO_setAlternateFunction+0x31c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	79ba      	ldrb	r2, [r7, #6]
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	210f      	movs	r1, #15
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	43d2      	mvns	r2, r2
 8001006:	4013      	ands	r3, r2
 8001008:	7979      	ldrb	r1, [r7, #5]
 800100a:	79ba      	ldrb	r2, [r7, #6]
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4611      	mov	r1, r2
 8001014:	4a9d      	ldr	r2, [pc, #628]	; (800128c <DIO_setAlternateFunction+0x31c>)
 8001016:	430b      	orrs	r3, r1
 8001018:	6013      	str	r3, [r2, #0]
			break;
 800101a:	e12d      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRL_REG = (DIOC_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800101c:	4b9c      	ldr	r3, [pc, #624]	; (8001290 <DIO_setAlternateFunction+0x320>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	79ba      	ldrb	r2, [r7, #6]
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	210f      	movs	r1, #15
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	43d2      	mvns	r2, r2
 800102c:	4013      	ands	r3, r2
 800102e:	7979      	ldrb	r1, [r7, #5]
 8001030:	79ba      	ldrb	r2, [r7, #6]
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	4611      	mov	r1, r2
 800103a:	4a95      	ldr	r2, [pc, #596]	; (8001290 <DIO_setAlternateFunction+0x320>)
 800103c:	430b      	orrs	r3, r1
 800103e:	6013      	str	r3, [r2, #0]
			break;
 8001040:	e11a      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRL_REG = (DIOD_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001042:	4b94      	ldr	r3, [pc, #592]	; (8001294 <DIO_setAlternateFunction+0x324>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	79ba      	ldrb	r2, [r7, #6]
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	210f      	movs	r1, #15
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	43d2      	mvns	r2, r2
 8001052:	4013      	ands	r3, r2
 8001054:	7979      	ldrb	r1, [r7, #5]
 8001056:	79ba      	ldrb	r2, [r7, #6]
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	4611      	mov	r1, r2
 8001060:	4a8c      	ldr	r2, [pc, #560]	; (8001294 <DIO_setAlternateFunction+0x324>)
 8001062:	430b      	orrs	r3, r1
 8001064:	6013      	str	r3, [r2, #0]
			break;
 8001066:	e107      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRL_REG = (DIOE_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001068:	4b8b      	ldr	r3, [pc, #556]	; (8001298 <DIO_setAlternateFunction+0x328>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	79ba      	ldrb	r2, [r7, #6]
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	210f      	movs	r1, #15
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	43d2      	mvns	r2, r2
 8001078:	4013      	ands	r3, r2
 800107a:	7979      	ldrb	r1, [r7, #5]
 800107c:	79ba      	ldrb	r2, [r7, #6]
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4611      	mov	r1, r2
 8001086:	4a84      	ldr	r2, [pc, #528]	; (8001298 <DIO_setAlternateFunction+0x328>)
 8001088:	430b      	orrs	r3, r1
 800108a:	6013      	str	r3, [r2, #0]
			break;
 800108c:	e0f4      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRL_REG = (DIOF_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800108e:	4b83      	ldr	r3, [pc, #524]	; (800129c <DIO_setAlternateFunction+0x32c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	79ba      	ldrb	r2, [r7, #6]
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	210f      	movs	r1, #15
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	43d2      	mvns	r2, r2
 800109e:	4013      	ands	r3, r2
 80010a0:	7979      	ldrb	r1, [r7, #5]
 80010a2:	79ba      	ldrb	r2, [r7, #6]
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	fa01 f202 	lsl.w	r2, r1, r2
 80010aa:	4611      	mov	r1, r2
 80010ac:	4a7b      	ldr	r2, [pc, #492]	; (800129c <DIO_setAlternateFunction+0x32c>)
 80010ae:	430b      	orrs	r3, r1
 80010b0:	6013      	str	r3, [r2, #0]
			break;
 80010b2:	e0e1      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRL_REG = (DIOG_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80010b4:	4b7a      	ldr	r3, [pc, #488]	; (80012a0 <DIO_setAlternateFunction+0x330>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	79ba      	ldrb	r2, [r7, #6]
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	210f      	movs	r1, #15
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	43d2      	mvns	r2, r2
 80010c4:	4013      	ands	r3, r2
 80010c6:	7979      	ldrb	r1, [r7, #5]
 80010c8:	79ba      	ldrb	r2, [r7, #6]
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	4611      	mov	r1, r2
 80010d2:	4a73      	ldr	r2, [pc, #460]	; (80012a0 <DIO_setAlternateFunction+0x330>)
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6013      	str	r3, [r2, #0]
			break;
 80010d8:	e0ce      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRL_REG = (DIOH_AFRL_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80010da:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <DIO_setAlternateFunction+0x334>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	79ba      	ldrb	r2, [r7, #6]
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	210f      	movs	r1, #15
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	4013      	ands	r3, r2
 80010ec:	7979      	ldrb	r1, [r7, #5]
 80010ee:	79ba      	ldrb	r2, [r7, #6]
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	4611      	mov	r1, r2
 80010f8:	4a6a      	ldr	r2, [pc, #424]	; (80012a4 <DIO_setAlternateFunction+0x334>)
 80010fa:	430b      	orrs	r3, r1
 80010fc:	6013      	str	r3, [r2, #0]
			break;
 80010fe:	bf00      	nop
 8001100:	e0ba      	b.n	8001278 <DIO_setAlternateFunction+0x308>
		}
	}

	else if(pinID >= PIN8_ID && pinID <= PIN15_ID)
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	2b07      	cmp	r3, #7
 8001106:	f240 80b7 	bls.w	8001278 <DIO_setAlternateFunction+0x308>
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	f200 80b3 	bhi.w	8001278 <DIO_setAlternateFunction+0x308>
	{
		pinID = pinID - 8;
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	3b08      	subs	r3, #8
 8001116:	71bb      	strb	r3, [r7, #6]

		switch (portID)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b07      	cmp	r3, #7
 800111c:	f200 80ac 	bhi.w	8001278 <DIO_setAlternateFunction+0x308>
 8001120:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <DIO_setAlternateFunction+0x1b8>)
 8001122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001126:	bf00      	nop
 8001128:	08001149 	.word	0x08001149
 800112c:	0800116f 	.word	0x0800116f
 8001130:	08001195 	.word	0x08001195
 8001134:	080011bb 	.word	0x080011bb
 8001138:	080011e1 	.word	0x080011e1
 800113c:	08001207 	.word	0x08001207
 8001140:	0800122d 	.word	0x0800122d
 8001144:	08001253 	.word	0x08001253
		{
		case PORTA_ID:
			DIOA_AFRH_REG = (DIOA_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <DIO_setAlternateFunction+0x338>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	79ba      	ldrb	r2, [r7, #6]
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	210f      	movs	r1, #15
 8001152:	fa01 f202 	lsl.w	r2, r1, r2
 8001156:	43d2      	mvns	r2, r2
 8001158:	4013      	ands	r3, r2
 800115a:	7979      	ldrb	r1, [r7, #5]
 800115c:	79ba      	ldrb	r2, [r7, #6]
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	4611      	mov	r1, r2
 8001166:	4a50      	ldr	r2, [pc, #320]	; (80012a8 <DIO_setAlternateFunction+0x338>)
 8001168:	430b      	orrs	r3, r1
 800116a:	6013      	str	r3, [r2, #0]
			break;
 800116c:	e084      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTB_ID:
			DIOB_AFRH_REG = (DIOB_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800116e:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <DIO_setAlternateFunction+0x33c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	79ba      	ldrb	r2, [r7, #6]
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	210f      	movs	r1, #15
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	43d2      	mvns	r2, r2
 800117e:	4013      	ands	r3, r2
 8001180:	7979      	ldrb	r1, [r7, #5]
 8001182:	79ba      	ldrb	r2, [r7, #6]
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	4611      	mov	r1, r2
 800118c:	4a47      	ldr	r2, [pc, #284]	; (80012ac <DIO_setAlternateFunction+0x33c>)
 800118e:	430b      	orrs	r3, r1
 8001190:	6013      	str	r3, [r2, #0]
			break;
 8001192:	e071      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTC_ID:
			DIOC_AFRH_REG = (DIOC_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <DIO_setAlternateFunction+0x340>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	79ba      	ldrb	r2, [r7, #6]
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	210f      	movs	r1, #15
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	43d2      	mvns	r2, r2
 80011a4:	4013      	ands	r3, r2
 80011a6:	7979      	ldrb	r1, [r7, #5]
 80011a8:	79ba      	ldrb	r2, [r7, #6]
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	fa01 f202 	lsl.w	r2, r1, r2
 80011b0:	4611      	mov	r1, r2
 80011b2:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <DIO_setAlternateFunction+0x340>)
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6013      	str	r3, [r2, #0]
			break;
 80011b8:	e05e      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTD_ID:
			DIOD_AFRH_REG = (DIOD_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80011ba:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <DIO_setAlternateFunction+0x344>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	79ba      	ldrb	r2, [r7, #6]
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	210f      	movs	r1, #15
 80011c4:	fa01 f202 	lsl.w	r2, r1, r2
 80011c8:	43d2      	mvns	r2, r2
 80011ca:	4013      	ands	r3, r2
 80011cc:	7979      	ldrb	r1, [r7, #5]
 80011ce:	79ba      	ldrb	r2, [r7, #6]
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	4611      	mov	r1, r2
 80011d8:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <DIO_setAlternateFunction+0x344>)
 80011da:	430b      	orrs	r3, r1
 80011dc:	6013      	str	r3, [r2, #0]
			break;
 80011de:	e04b      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTE_ID:
			DIOE_AFRH_REG = (DIOE_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <DIO_setAlternateFunction+0x348>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	79ba      	ldrb	r2, [r7, #6]
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	210f      	movs	r1, #15
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	43d2      	mvns	r2, r2
 80011f0:	4013      	ands	r3, r2
 80011f2:	7979      	ldrb	r1, [r7, #5]
 80011f4:	79ba      	ldrb	r2, [r7, #6]
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4611      	mov	r1, r2
 80011fe:	4a2e      	ldr	r2, [pc, #184]	; (80012b8 <DIO_setAlternateFunction+0x348>)
 8001200:	430b      	orrs	r3, r1
 8001202:	6013      	str	r3, [r2, #0]
			break;
 8001204:	e038      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTF_ID:
			DIOF_AFRH_REG = (DIOF_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001206:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <DIO_setAlternateFunction+0x34c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	210f      	movs	r1, #15
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	43d2      	mvns	r2, r2
 8001216:	4013      	ands	r3, r2
 8001218:	7979      	ldrb	r1, [r7, #5]
 800121a:	79ba      	ldrb	r2, [r7, #6]
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	4611      	mov	r1, r2
 8001224:	4a25      	ldr	r2, [pc, #148]	; (80012bc <DIO_setAlternateFunction+0x34c>)
 8001226:	430b      	orrs	r3, r1
 8001228:	6013      	str	r3, [r2, #0]
			break;
 800122a:	e025      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTG_ID:
			DIOG_AFRH_REG = (DIOG_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <DIO_setAlternateFunction+0x350>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	79ba      	ldrb	r2, [r7, #6]
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	210f      	movs	r1, #15
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	43d2      	mvns	r2, r2
 800123c:	4013      	ands	r3, r2
 800123e:	7979      	ldrb	r1, [r7, #5]
 8001240:	79ba      	ldrb	r2, [r7, #6]
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	4611      	mov	r1, r2
 800124a:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <DIO_setAlternateFunction+0x350>)
 800124c:	430b      	orrs	r3, r1
 800124e:	6013      	str	r3, [r2, #0]
			break;
 8001250:	e012      	b.n	8001278 <DIO_setAlternateFunction+0x308>

		case PORTH_ID:
			DIOH_AFRH_REG = (DIOH_AFRH_REG & ~(0x0F << (pinID*4))) | (altFunID << (pinID*4));
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <DIO_setAlternateFunction+0x354>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	79ba      	ldrb	r2, [r7, #6]
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	210f      	movs	r1, #15
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	43d2      	mvns	r2, r2
 8001262:	4013      	ands	r3, r2
 8001264:	7979      	ldrb	r1, [r7, #5]
 8001266:	79ba      	ldrb	r2, [r7, #6]
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4611      	mov	r1, r2
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <DIO_setAlternateFunction+0x354>)
 8001272:	430b      	orrs	r3, r1
 8001274:	6013      	str	r3, [r2, #0]
			break;
 8001276:	bf00      	nop
		}
	}

	return Ret_Val;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	48000020 	.word	0x48000020
 800128c:	48000420 	.word	0x48000420
 8001290:	48000820 	.word	0x48000820
 8001294:	48000c20 	.word	0x48000c20
 8001298:	48001020 	.word	0x48001020
 800129c:	48001420 	.word	0x48001420
 80012a0:	48001820 	.word	0x48001820
 80012a4:	48001c20 	.word	0x48001c20
 80012a8:	48000024 	.word	0x48000024
 80012ac:	48000424 	.word	0x48000424
 80012b0:	48000824 	.word	0x48000824
 80012b4:	48000c24 	.word	0x48000c24
 80012b8:	48001024 	.word	0x48001024
 80012bc:	48001424 	.word	0x48001424
 80012c0:	48001824 	.word	0x48001824
 80012c4:	48001c24 	.word	0x48001c24

080012c8 <SysTick_Handler>:


static volatile void(*g_callBackPtr)(void) = NULLPTR;

void SysTick_Handler (void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	if(g_callBackPtr != NULLPTR)
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Handler+0x18>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <SysTick_Handler+0x12>
	{
		(*g_callBackPtr)();
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <SysTick_Handler+0x18>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4798      	blx	r3
	}
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000030 	.word	0x20000030

080012e4 <sysTick_init>:

void sysTick_init(systick_clock_t clock, void (*fPtr)(void))
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
	if(fPtr != NULLPTR)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <sysTick_init+0x20>
	{
		CLEAR_BIT(SYSTICK_STK_CTRL_REG, 1);
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <sysTick_init+0x50>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <sysTick_init+0x50>)
 80012fc:	f023 0302 	bic.w	r3, r3, #2
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e008      	b.n	8001316 <sysTick_init+0x32>
	}
	else
	{
		SET_BIT(SYSTICK_STK_CTRL_REG, 1);
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <sysTick_init+0x50>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <sysTick_init+0x50>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	6013      	str	r3, [r2, #0]
		g_callBackPtr = fPtr;
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <sysTick_init+0x54>)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6013      	str	r3, [r2, #0]
	}

	SYSTICK_STK_CTRL_REG |= (clock<<2);
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <sysTick_init+0x50>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4611      	mov	r1, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <sysTick_init+0x50>)
 8001322:	430b      	orrs	r3, r1
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010
 8001338:	20000030 	.word	0x20000030

0800133c <sysTick_start>:

void sysTick_start(u32 loadVal)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	SYSTICK_STK_LOAD_REG = loadVal;
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <sysTick_start+0x38>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]

	SET_BIT(SYSTICK_STK_CTRL_REG, 0);
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <sysTick_start+0x3c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <sysTick_start+0x3c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6013      	str	r3, [r2, #0]

	while(CHECK_BIT(SYSTICK_STK_CTRL_REG,16) == 0 )
 8001356:	bf00      	nop
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <sysTick_start+0x3c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0c1b      	lsrs	r3, r3, #16
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f8      	beq.n	8001358 <sysTick_start+0x1c>
	{
		;
	}
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e014 	.word	0xe000e014
 8001378:	e000e010 	.word	0xe000e010

0800137c <__libc_init_array>:
 800137c:	b570      	push	{r4, r5, r6, lr}
 800137e:	4e0d      	ldr	r6, [pc, #52]	; (80013b4 <__libc_init_array+0x38>)
 8001380:	4c0d      	ldr	r4, [pc, #52]	; (80013b8 <__libc_init_array+0x3c>)
 8001382:	1ba4      	subs	r4, r4, r6
 8001384:	10a4      	asrs	r4, r4, #2
 8001386:	2500      	movs	r5, #0
 8001388:	42a5      	cmp	r5, r4
 800138a:	d109      	bne.n	80013a0 <__libc_init_array+0x24>
 800138c:	4e0b      	ldr	r6, [pc, #44]	; (80013bc <__libc_init_array+0x40>)
 800138e:	4c0c      	ldr	r4, [pc, #48]	; (80013c0 <__libc_init_array+0x44>)
 8001390:	f000 f818 	bl	80013c4 <_init>
 8001394:	1ba4      	subs	r4, r4, r6
 8001396:	10a4      	asrs	r4, r4, #2
 8001398:	2500      	movs	r5, #0
 800139a:	42a5      	cmp	r5, r4
 800139c:	d105      	bne.n	80013aa <__libc_init_array+0x2e>
 800139e:	bd70      	pop	{r4, r5, r6, pc}
 80013a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013a4:	4798      	blx	r3
 80013a6:	3501      	adds	r5, #1
 80013a8:	e7ee      	b.n	8001388 <__libc_init_array+0xc>
 80013aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ae:	4798      	blx	r3
 80013b0:	3501      	adds	r5, #1
 80013b2:	e7f2      	b.n	800139a <__libc_init_array+0x1e>
 80013b4:	080013dc 	.word	0x080013dc
 80013b8:	080013dc 	.word	0x080013dc
 80013bc:	080013dc 	.word	0x080013dc
 80013c0:	080013e0 	.word	0x080013e0

080013c4 <_init>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	bf00      	nop
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr

080013d0 <_fini>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	bf00      	nop
 80013d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d6:	bc08      	pop	{r3}
 80013d8:	469e      	mov	lr, r3
 80013da:	4770      	bx	lr
